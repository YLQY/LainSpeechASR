encoder.embed.conv.0.weight-torch.Size([32, 1, 3, 3])-torch.float32
tensor([[[[ 2.3579e-02, -2.1686e-02,  2.3995e-02],
          [ 3.3218e-02, -5.1929e-02,  3.1645e-02],
          [-5.7174e-03, -1.4202e-01, -6.4894e-03]]],


        [[[-7.2312e-02, -1.1393e-01, -3.7157e-02],
          [-1.8065e-03, -3.6916e-02, -6.2602e-02],
          [ 8.8841e-02,  1.4280e-01,  1.2237e-01]]],


        [[[ 3.8374e-02, -6.8754e-02, -9.1817e-03],
          [ 9.9791e-02,  9.6554e-02, -1.6986e-01],
          [-1.0574e-01,  1.8707e-01, -5.8894e-02]]],


        [[[-3.6304e-02, -1.4249e-01,  1.8402e-01],
          [ 2.2091e-03, -1.7488e-01,  1.6883e-01],
          [ 6.6111e-03, -1.3019e-01,  1.1409e-01]]],


        [[[-3.6931e-02,  1.8966e-02, -1.1459e-01],
          [-1.1517e-03, -2.1782e-02, -1.0236e-01],
          [-5.3858e-03,  5.0885e-02, -1.0410e-01]]],


        [[[-1.4824e-01,  2.0760e-01, -5.3108e-02],
          [ 7.8399e-03,  1.2730e-01, -1.2162e-01],
          [ 3.4555e-02, -4.4331e-04, -4.7486e-02]]],


        [[[ 9.4978e-02, -2.0323e-01, -1.3892e-01],
          [-9.5434e-02,  2.0489e-01,  1.4055e-01],
          [ 1.3978e-04, -3.4644e-04, -2.7320e-03]]],


        [[[-8.2138e-02,  5.8427e-02,  4.3567e-02],
          [-4.7987e-02,  8.9374e-02,  5.8374e-02],
          [-9.3486e-02, -2.7913e-02,  9.7293e-03]]],


        [[[ 7.4038e-02,  2.4231e-01,  1.3831e-01],
          [-1.1050e-01, -1.8692e-01, -1.6270e-01],
          [ 2.0950e-03, -2.6020e-02,  1.6209e-02]]],


        [[[ 1.1322e-02,  2.6100e-02,  1.3967e-02],
          [ 1.0517e-01,  9.5991e-02,  8.2040e-02],
          [-9.7926e-02, -1.3021e-01, -8.1087e-02]]],


        [[[ 1.6402e-01, -8.4224e-02, -7.0642e-02],
          [ 1.9005e-01, -1.7753e-01, -1.7560e-02],
          [ 7.7201e-02, -1.0581e-01,  3.0999e-02]]],


        [[[-1.3510e-01, -1.1434e-02, -5.1659e-03],
          [-1.0256e-02,  1.2680e-02,  1.7944e-02],
          [ 1.2325e-02,  1.8441e-02, -5.9153e-03]]],


        [[[-3.5131e-03,  2.8471e-02, -1.0213e-01],
          [-2.4777e-02, -7.8736e-02,  3.5313e-01],
          [ 8.2089e-03,  1.8044e-02, -1.3051e-01]]],


        [[[-7.0704e-02, -3.2844e-02,  4.6434e-02],
          [-5.7192e-03,  1.1580e-01,  4.0659e-02],
          [-4.1348e-02, -4.0587e-02, -5.0937e-02]]],


        [[[-1.4127e-01, -1.0248e-01,  3.4067e-01],
          [-1.9902e-02,  1.0741e-02,  6.5590e-03],
          [ 1.9184e-02,  1.3044e-02, -6.4831e-02]]],


        [[[ 2.9514e-04, -1.4044e-04,  3.1037e-04],
          [-2.5778e-02, -2.5595e-01, -8.2386e-02],
          [ 2.4682e-02,  2.5781e-01,  8.1115e-02]]],


        [[[ 5.5138e-02,  8.7855e-02,  1.4610e-01],
          [-6.2575e-02, -9.4220e-02, -1.2658e-01],
          [ 6.8400e-03, -2.1703e-02,  1.3941e-03]]],


        [[[ 5.3079e-03, -8.9796e-04,  4.3408e-02],
          [-1.3745e-02, -4.6790e-02,  1.9247e-02],
          [-3.0988e-02, -1.7873e-02, -1.0719e-02]]],


        [[[ 4.9114e-02,  9.3672e-02,  8.9768e-02],
          [ 1.6567e-02, -7.2807e-02, -7.6819e-02],
          [-4.4214e-02, -1.2966e-02, -1.0196e-02]]],


        [[[ 5.2945e-03, -4.0666e-02, -6.2883e-04],
          [-6.4733e-02, -3.7208e-02, -7.6074e-02],
          [ 4.6465e-02,  5.7231e-02,  6.2737e-02]]],


        [[[-5.9836e-02, -1.4167e-02, -2.5478e-02],
          [-3.6671e-03,  5.8425e-02,  9.4446e-02],
          [-2.2322e-02, -9.4464e-03,  3.3199e-02]]],


        [[[-9.4935e-03, -4.8142e-02, -1.3813e-02],
          [-1.4089e-01,  4.1495e-01, -1.1625e-01],
          [-3.8422e-03, -5.2805e-02,  7.8827e-03]]],


        [[[ 3.4976e-02, -7.3202e-02,  8.4747e-02],
          [ 3.4844e-02, -1.7991e-01,  6.0883e-02],
          [ 4.1387e-02, -9.3300e-02,  9.7356e-02]]],


        [[[ 1.5507e-01, -1.7340e-01,  5.3523e-03],
          [ 1.9289e-01, -2.0076e-01, -2.7568e-03],
          [ 1.4397e-01, -1.3840e-01, -6.6338e-03]]],


        [[[-8.9544e-03, -1.8098e-02, -1.7558e-02],
          [ 1.8310e-02, -1.8634e-02, -3.2505e-02],
          [-8.1202e-03, -7.0841e-03, -4.8247e-03]]],


        [[[ 1.0085e-02, -1.7357e-01,  1.4967e-01],
          [-1.8714e-02, -1.6408e-01,  1.9419e-01],
          [-4.1499e-02, -3.9741e-02,  9.4163e-02]]],


        [[[-8.8097e-02,  3.3436e-01, -9.7963e-02],
          [-2.6913e-02, -5.5274e-02,  1.5899e-02],
          [ 4.3425e-03, -3.8843e-02,  1.3968e-02]]],


        [[[-1.4495e-01, -1.4361e-01,  1.1912e-01],
          [ 1.4340e-01,  1.5191e-01, -1.2292e-01],
          [-2.3373e-03, -3.7361e-03,  3.1237e-03]]],


        [[[ 2.0826e-02,  5.0408e-02, -9.3743e-02],
          [ 5.0559e-02,  8.3912e-02, -9.3312e-02],
          [ 1.9937e-02,  6.1482e-02, -7.3058e-02]]],


        [[[-5.0789e-02, -8.0667e-02,  1.2596e-01],
          [ 1.0563e-01, -1.9033e-01,  6.4809e-02],
          [ 1.4973e-01, -7.5552e-02, -4.4192e-02]]],


        [[[-9.8226e-02, -6.6147e-03,  2.0953e-02],
          [-3.9126e-02,  4.3329e-02,  4.7723e-02],
          [ 1.8542e-02, -4.1781e-03,  6.7885e-02]]],


        [[[ 4.5605e-02,  1.8372e-02,  4.8973e-02],
          [ 5.4220e-03,  4.0555e-02,  4.4468e-02],
          [ 1.9888e-02,  9.5892e-03,  5.1396e-02]]]])

encoder.embed.conv.0.bias-torch.Size([32])-torch.float32
tensor([-5.5958e-02,  9.8820e-02, -4.1900e-02, -1.3518e-01, -1.7839e-01,
        -7.6260e-03, -4.3818e-04,  2.5567e-01, -1.9298e-01,  1.2303e-01,
         1.0508e-01,  1.3734e-01, -7.2966e-02,  1.5515e-01, -8.9749e-03,
         2.3374e-04,  1.0020e-01,  2.2052e-01,  7.0552e-02,  4.8010e-02,
         1.9385e-01, -5.4197e-02,  1.4099e-01, -1.5599e-01,  2.6798e-01,
         1.1981e-01, -6.0602e-02, -2.3131e-04,  1.7796e-01,  1.9520e-02,
         2.1843e-01,  1.6108e-01])

encoder.embed.conv.2.weight-torch.Size([32, 32, 3, 3])-torch.float32
tensor([[[[ 1.4487e-02, -6.6148e-02, -2.3838e-02],
          [-6.4387e-02, -9.1738e-02, -3.2900e-02],
          [ 3.1071e-03, -1.0667e-03, -4.1818e-03]],

         [[-4.2231e-02, -3.2970e-02,  2.4703e-02],
          [-5.6231e-02, -4.1084e-02, -6.6752e-02],
          [-2.2494e-02,  1.1659e-02, -7.8114e-02]],

         [[ 8.5236e-02,  1.4970e-01,  8.9866e-02],
          [-1.2661e-01, -1.6922e-01,  1.4344e-02],
          [-5.2358e-02, -9.9248e-02, -1.3521e-02]],

         ...,

         [[-1.1219e-02,  1.0569e-01,  1.0848e-01],
          [-7.5200e-02, -1.8981e-01, -1.3704e-01],
          [-7.3339e-02, -3.3284e-02,  1.5236e-02]],

         [[-8.9041e-02,  3.6625e-03,  5.6288e-02],
          [-9.2818e-02,  6.0573e-02, -4.2335e-02],
          [ 1.0585e-02, -1.6097e-02,  7.4930e-03]],

         [[ 5.5810e-02,  1.2011e-01,  6.7046e-03],
          [-3.8036e-02, -1.6076e-02,  2.7824e-02],
          [-7.8368e-02,  2.9408e-02, -1.5160e-02]]],


        [[[ 5.2278e-02,  6.0707e-03, -1.1280e-01],
          [ 7.1783e-03,  1.3997e-02, -7.6422e-02],
          [-3.0500e-02,  4.0000e-02, -3.3376e-02]],

         [[-1.5724e-02,  2.6137e-02,  4.9184e-02],
          [-2.2202e-03,  2.5994e-02,  3.0482e-02],
          [ 1.6858e-02, -2.9439e-02,  6.5779e-03]],

         [[-4.5233e-02,  9.3058e-03,  1.1852e-01],
          [-5.7212e-02,  1.0871e-02,  2.1404e-01],
          [-7.3914e-02,  5.5334e-02,  1.0220e-01]],

         ...,

         [[-3.0178e-03, -3.1068e-02,  2.7730e-01],
          [ 5.1714e-02, -4.4536e-02,  3.2899e-01],
          [ 3.5445e-02,  1.1998e-02,  8.3032e-02]],

         [[-4.1159e-02,  3.9077e-02, -6.1645e-02],
          [-4.9621e-02,  8.3494e-02,  1.7668e-02],
          [-3.3374e-02, -3.1397e-02, -6.4758e-03]],

         [[-7.9876e-02,  2.8242e-02, -2.0192e-02],
          [-2.8313e-02, -7.5485e-02,  5.0261e-02],
          [-7.3829e-02,  7.3324e-02,  8.2438e-02]]],


        [[[ 2.9208e-02, -4.1568e-02,  3.4422e-02],
          [ 3.4908e-02,  1.0653e-01,  6.4342e-02],
          [-2.5621e-02, -8.3638e-02,  1.3668e-02]],

         [[ 3.0064e-03, -6.2405e-02,  1.1660e-02],
          [ 1.1748e-01,  1.3796e-01,  9.9770e-03],
          [-1.8983e-03,  1.0254e-01,  2.4994e-02]],

         [[-4.0468e-02, -4.8899e-02, -5.3020e-02],
          [-4.9335e-02, -9.9232e-02, -8.6665e-02],
          [ 4.2336e-02, -7.7903e-03,  1.3558e-02]],

         ...,

         [[-6.6827e-02,  2.7129e-02,  2.7208e-02],
          [ 3.4556e-02, -1.0063e-02, -1.9373e-02],
          [ 6.8760e-03,  4.2463e-02,  7.5400e-02]],

         [[ 7.6108e-02,  1.2280e-02,  1.0764e-02],
          [ 4.2000e-02,  2.7468e-02,  1.3916e-02],
          [ 4.3400e-02,  2.1116e-02,  1.3131e-03]],

         [[ 2.2875e-02, -2.0761e-02, -4.3892e-02],
          [ 1.7254e-02,  2.6101e-02, -6.0027e-02],
          [ 8.2932e-02,  9.0835e-02, -5.8669e-02]]],


        ...,


        [[[-1.1738e-03, -1.2473e-01, -6.4557e-03],
          [ 1.1606e-02,  1.5922e-02, -3.2414e-03],
          [ 4.0364e-02, -2.5472e-04,  5.8792e-02]],

         [[-1.2242e-01, -2.5027e-01, -7.3784e-02],
          [-2.4590e-02, -4.1362e-02, -1.5052e-02],
          [-1.7269e-02, -4.7763e-02, -3.3248e-02]],

         [[-8.4367e-02,  5.4384e-02,  2.9351e-02],
          [ 9.2170e-02,  3.9410e-03,  6.5034e-03],
          [ 5.6075e-02,  1.5881e-02,  1.0680e-02]],

         ...,

         [[-1.1754e-01,  4.5666e-02,  5.1434e-02],
          [-5.9501e-05,  3.5901e-02,  3.5818e-02],
          [ 5.1948e-02,  5.4919e-02, -1.3853e-02]],

         [[-6.7981e-02, -5.6662e-02, -5.4759e-02],
          [-4.7492e-02, -6.0071e-02,  5.0447e-02],
          [-5.1450e-02, -1.8719e-02,  6.3582e-02]],

         [[ 2.1408e-02,  1.6374e-01,  4.6252e-02],
          [ 6.1685e-02, -3.1843e-03,  2.0987e-02],
          [ 4.1001e-02, -6.9517e-02, -4.7178e-03]]],


        [[[-3.9183e-02, -8.7701e-02, -5.0007e-02],
          [-1.2872e-03, -3.5712e-02, -3.4653e-02],
          [ 3.4994e-02, -8.1753e-03,  1.6421e-02]],

         [[ 1.3951e-02,  5.0156e-02,  1.0509e-01],
          [-1.9720e-02, -2.0337e-02, -2.2521e-02],
          [-1.0574e-02,  3.9039e-02, -1.6135e-02]],

         [[ 7.3489e-02,  2.2157e-01,  1.5641e-01],
          [-1.7940e-02,  4.5857e-02,  7.2729e-02],
          [ 3.2120e-02, -2.6044e-02, -1.0857e-02]],

         ...,

         [[ 3.1641e-02,  1.7099e-01,  1.7060e-01],
          [-5.1746e-02, -4.3872e-02,  1.0759e-01],
          [-1.1734e-02, -4.0556e-02, -6.6024e-03]],

         [[ 5.2635e-02,  3.2892e-02, -2.4859e-02],
          [ 6.4361e-03, -6.1469e-02,  6.7586e-02],
          [ 5.8395e-02, -9.9731e-02, -1.1920e-02]],

         [[-1.3461e-02,  6.7705e-02,  3.1665e-02],
          [-4.1032e-02,  5.1408e-02,  3.4761e-02],
          [ 3.6108e-02,  5.3359e-02,  4.3399e-02]]],


        [[[ 4.8614e-02,  5.1407e-02, -3.6231e-02],
          [ 2.9394e-02, -2.0452e-02, -3.8363e-02],
          [-4.3433e-02, -3.8126e-02, -9.5384e-02]],

         [[ 4.7062e-02,  4.9455e-02, -2.7711e-02],
          [ 3.9545e-02,  9.0033e-02,  9.6861e-02],
          [ 3.6049e-02,  8.6400e-02,  7.8442e-02]],

         [[-2.6893e-04,  5.4599e-02,  4.7128e-02],
          [ 7.9558e-02,  6.7245e-02,  7.7518e-02],
          [ 1.1172e-02,  3.4908e-02, -1.4225e-02]],

         ...,

         [[ 2.4699e-02, -4.7950e-02, -2.1068e-02],
          [ 9.1853e-02,  5.8616e-02, -7.0165e-03],
          [-1.6150e-02, -2.0198e-04, -2.8349e-02]],

         [[-2.9714e-02, -1.4792e-02, -7.9933e-02],
          [-5.0574e-02, -4.1418e-02, -7.5151e-02],
          [ 1.6530e-04, -1.9078e-02,  3.8241e-02]],

         [[-4.0204e-02, -1.5620e-02, -3.0234e-02],
          [ 1.9912e-02, -5.7857e-02,  3.8862e-02],
          [ 1.2102e-01,  7.1548e-03,  1.3090e-01]]]])

encoder.embed.conv.2.bias-torch.Size([32])-torch.float32
tensor([ 0.0146, -0.0114,  0.0532,  0.0246,  0.0309, -0.0304, -0.0006, -0.0564,
         0.0462,  0.0100,  0.0233,  0.0344,  0.0073, -0.0276,  0.0431, -0.0672,
         0.0156, -0.0266,  0.0567, -0.0100, -0.0066, -0.0402,  0.0425, -0.0123,
        -0.0606, -0.0352,  0.0503,  0.0087, -0.0158,  0.0027, -0.0230,  0.0448])

encoder.embed.out.0.weight-torch.Size([1280, 608])-torch.float32
tensor([[-0.0289, -0.0984, -0.1083,  ..., -0.0645,  0.0783,  0.0945],
        [ 0.0096, -0.0293, -0.0170,  ...,  0.0085,  0.0369,  0.0209],
        [-0.0365,  0.0639, -0.0802,  ..., -0.0067, -0.0371,  0.0354],
        ...,
        [-0.0626, -0.0376, -0.0299,  ...,  0.0403,  0.0414, -0.0112],
        [ 0.0741,  0.0352, -0.1032,  ...,  0.0106,  0.0136,  0.0700],
        [ 0.0010,  0.0779, -0.0113,  ..., -0.0073, -0.0090,  0.0300]])

encoder.embed.out.0.bias-torch.Size([1280])-torch.float32
tensor([-0.0191, -0.0587, -0.0503,  ..., -0.0335,  0.0130,  0.0107])

encoder.encoders.0.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.8629, 0.8805, 0.8715,  ..., 0.9202, 1.0053, 0.8575])

encoder.encoders.0.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.0481,  0.0242,  0.0805,  ...,  0.0078,  0.1403,  0.0501])

encoder.encoders.0.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0185,  0.0145, -0.0641,  ...,  0.0450, -0.0097, -0.0422],
        [ 0.0609, -0.0289, -0.0399,  ...,  0.0126,  0.0061,  0.0081],
        [ 0.0049,  0.0406,  0.0315,  ...,  0.0432,  0.0030, -0.0263],
        ...,
        [ 0.0094, -0.0494, -0.0543,  ...,  0.0389, -0.0420, -0.0784],
        [ 0.0001,  0.0031, -0.0116,  ...,  0.0432, -0.0570,  0.0617],
        [-0.0044,  0.0402, -0.0626,  ..., -0.0073,  0.0131, -0.0222]])

encoder.encoders.0.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0269, -0.0154, -0.0275,  ..., -0.0290, -0.0003, -0.0428])

encoder.encoders.0.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0121, -0.0245,  0.0668,  ..., -0.0061, -0.0208,  0.0200],
        [ 0.0361,  0.0806,  0.0390,  ..., -0.0918, -0.0489,  0.0212],
        [ 0.0115, -0.0129, -0.0048,  ...,  0.0311, -0.0151, -0.0002],
        ...,
        [ 0.0234, -0.0102, -0.0368,  ..., -0.0251,  0.0112, -0.0112],
        [-0.0406,  0.0086, -0.0558,  ...,  0.0423,  0.0212,  0.0104],
        [-0.0016, -0.0284,  0.0218,  ..., -0.0247,  0.0475, -0.0423]])

encoder.encoders.0.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0825,  0.0295,  0.0228,  ...,  0.0162,  0.0595, -0.0201])

encoder.encoders.0.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.0316,  0.0915, -0.1215,  ...,  0.0751,  0.2762,  0.0997],
        [-0.1469,  0.0693,  0.0547,  ...,  0.3125, -0.1213, -0.0682],
        [ 0.2715,  0.0661,  0.2077,  ..., -0.2606,  0.0765, -0.3249],
        ...,
        [-0.0814,  0.0495, -0.1556,  ...,  0.1845,  0.1741, -0.2590],
        [ 0.0787,  0.3046,  0.3385,  ..., -0.0042, -0.0407,  0.2210],
        [ 0.2858, -0.1283,  0.1303,  ..., -0.0323, -0.2170,  0.1268]])

encoder.encoders.0.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 0.0991, -0.0803, -0.0178,  ...,  0.1143,  0.1200,  0.1626],
        [ 0.3480,  0.0095,  0.0278,  ...,  0.0522, -0.2356,  0.3687],
        [-0.0544, -0.0014,  0.1582,  ...,  0.1525, -0.2582,  0.3220],
        ...,
        [-0.0745, -0.0672,  0.2377,  ..., -0.0579, -0.0072,  0.3083],
        [ 0.3709, -0.0021,  0.2492,  ...,  0.0776, -0.1796,  0.0967],
        [-0.1185,  0.1961,  0.0116,  ...,  0.0330, -0.3748, -0.0061]])

encoder.encoders.0.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0138,  0.0202, -0.0076,  ...,  0.0362,  0.0023, -0.0434],
        [-0.0223,  0.0411, -0.0126,  ..., -0.0147,  0.0263, -0.0194],
        [-0.0108, -0.0129,  0.0192,  ...,  0.0680, -0.0356, -0.0252],
        ...,
        [-0.0634,  0.0273, -0.0154,  ..., -0.0331,  0.0162,  0.0290],
        [ 0.0269, -0.0344,  0.0512,  ...,  0.0364,  0.0483,  0.0402],
        [ 0.0428, -0.0104, -0.0207,  ..., -0.0118, -0.0533,  0.0524]])

encoder.encoders.0.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0031, -0.0706, -0.0623,  ..., -0.0425,  0.0148, -0.0025],
        [-0.0517, -0.0376, -0.0362,  ..., -0.0159,  0.0131, -0.0279],
        [-0.0180, -0.0385,  0.0453,  ...,  0.0473, -0.0051,  0.0203],
        ...,
        [-0.0305,  0.0163, -0.0638,  ..., -0.0113,  0.0305, -0.0294],
        [ 0.0520, -0.0909, -0.1060,  ..., -0.0164,  0.0759, -0.0129],
        [-0.0273,  0.0293, -0.0017,  ...,  0.0365,  0.0087,  0.0703]])

encoder.encoders.0.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0221,  0.0520, -0.0533,  ..., -0.0489,  0.1111, -0.0945],
        [-0.0143, -0.0539,  0.0086,  ...,  0.0466, -0.0186,  0.0281],
        [ 0.0069, -0.0873, -0.0539,  ...,  0.0340,  0.0318,  0.0367],
        ...,
        [-0.0550, -0.0006,  0.0419,  ..., -0.0086, -0.0065,  0.0006],
        [ 0.1496,  0.0397, -0.0609,  ...,  0.0177,  0.0480, -0.0175],
        [ 0.0340,  0.0440,  0.0471,  ..., -0.0367,  0.0222,  0.0367]])

encoder.encoders.0.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.4929, 0.4152, 0.4703,  ..., 0.5504, 0.5552, 0.5024])

encoder.encoders.0.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0566, -0.0447,  0.0211,  ..., -0.0031,  0.0476,  0.0123])

encoder.encoders.0.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.6695, 0.5947, 0.8011,  ..., 0.8102, 0.7595, 0.7291])

encoder.encoders.0.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-9.7353e-05, -5.5479e-02, -2.2783e-02,  ..., -2.7723e-03,
        -2.2852e-02, -8.4606e-05])

encoder.encoders.0.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6905, 0.6692, 0.7785,  ..., 0.7224, 0.8526, 0.7869])

encoder.encoders.0.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0179,  0.0199, -0.0102,  ..., -0.0125,  0.0195,  0.0073])

encoder.encoders.0.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0575,  0.0526,  0.0329,  ...,  0.0231,  0.0050, -0.0059],
        [-0.0462,  0.0159,  0.0386,  ..., -0.0239, -0.0202, -0.0440],
        [ 0.0488, -0.0174,  0.0071,  ...,  0.0673, -0.0342, -0.0364],
        ...,
        [-0.0313, -0.0581, -0.0664,  ...,  0.0654,  0.0151,  0.0367],
        [-0.0391, -0.0868, -0.0037,  ..., -0.0524, -0.0011, -0.0527],
        [ 0.0193, -0.0539,  0.0241,  ..., -0.0392, -0.0669,  0.0303]])

encoder.encoders.0.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0472, -0.0681,  0.0112,  ..., -0.0015,  0.0547, -0.0379],
        [-0.0283, -0.0142,  0.0341,  ..., -0.0067, -0.0211,  0.0306],
        [-0.0029, -0.0479, -0.0242,  ...,  0.0244,  0.0126,  0.0355],
        ...,
        [-0.0289,  0.0206, -0.0117,  ..., -0.0038, -0.0050, -0.0650],
        [ 0.0143,  0.0138,  0.0105,  ..., -0.0543,  0.0217,  0.0152],
        [-0.0088, -0.0335,  0.0093,  ...,  0.0476,  0.0197, -0.0288]])

encoder.encoders.0.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([0.9719, 0.9288, 1.0537,  ..., 1.0412, 1.1032, 1.0565])

encoder.encoders.0.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0336,  0.1468,  0.0222,  ..., -0.0427,  0.0066,  0.0269])

encoder.encoders.0.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0418],
         [ 0.0010],
         [ 0.0581],
         ...,
         [-0.0421],
         [-0.0353],
         [ 0.0090]],

        [[-0.0468],
         [-0.0184],
         [ 0.0373],
         ...,
         [-0.0026],
         [-0.0399],
         [ 0.0207]],

        [[ 0.0301],
         [-0.0326],
         [ 0.0343],
         ...,
         [-0.0606],
         [-0.0168],
         [-0.0158]],

        ...,

        [[-0.0097],
         [-0.0040],
         [ 0.0008],
         ...,
         [ 0.0552],
         [ 0.0176],
         [-0.0461]],

        [[ 0.0121],
         [ 0.0131],
         [ 0.0069],
         ...,
         [-0.0272],
         [ 0.0150],
         [-0.0025]],

        [[-0.0568],
         [ 0.0188],
         [-0.0020],
         ...,
         [ 0.0508],
         [ 0.0575],
         [-0.0045]]])

encoder.encoders.0.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0007,  0.0016, -0.0028,  ...,  0.0031, -0.0025,  0.0011]],

        [[-0.0044,  0.0004,  0.0028,  ...,  0.0003, -0.0010,  0.0009]],

        [[ 0.0015,  0.0042, -0.0001,  ...,  0.0058, -0.0021,  0.0086]],

        ...,

        [[ 0.0058,  0.0028,  0.0042,  ...,  0.0059,  0.0009,  0.0039]],

        [[ 0.0046, -0.0023,  0.0026,  ...,  0.0007, -0.0018, -0.0002]],

        [[ 0.0101,  0.0018, -0.0057,  ..., -0.0002, -0.0114, -0.0139]]])

encoder.encoders.0.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0648, 1.0405, 1.0642,  ..., 1.0332, 1.0047, 1.0827])

encoder.encoders.0.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0335, -0.0428, -0.0506,  ..., -0.0834,  0.0611, -0.0529])

encoder.encoders.0.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0163],
         [-0.0792],
         [-0.0898],
         ...,
         [-0.0074],
         [-0.0257],
         [ 0.0553]],

        [[-0.0380],
         [ 0.0247],
         [-0.0734],
         ...,
         [ 0.0301],
         [ 0.0010],
         [-0.0195]],

        [[-0.0298],
         [ 0.0277],
         [ 0.0329],
         ...,
         [ 0.0115],
         [-0.0233],
         [-0.1296]],

        ...,

        [[-0.0359],
         [ 0.0461],
         [-0.0090],
         ...,
         [-0.1156],
         [ 0.0600],
         [ 0.0283]],

        [[ 0.0041],
         [ 0.0323],
         [ 0.0243],
         ...,
         [-0.0218],
         [-0.0638],
         [ 0.0099]],

        [[-0.0636],
         [-0.1853],
         [-0.0187],
         ...,
         [ 0.0699],
         [ 0.0094],
         [ 0.0977]]])

encoder.encoders.0.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([0.9968, 0.9434, 1.0692,  ..., 1.0864, 1.1631, 1.0627])

encoder.encoders.0.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.0426,  0.1431,  0.0943,  ..., -0.0920,  0.0887,  0.0855])

encoder.encoders.0.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0759,  0.0208,  0.0101,  ...,  0.0211,  0.0283,  0.0187],
        [ 0.0391,  0.0346,  0.0497,  ..., -0.0731,  0.0148,  0.0602],
        [ 0.0175, -0.0922,  0.0625,  ..., -0.0076, -0.0430, -0.1013],
        ...,
        [ 0.0364,  0.0052,  0.0362,  ..., -0.0161,  0.0442, -0.0234],
        [ 0.0605, -0.0630, -0.0442,  ..., -0.0058,  0.0090, -0.0431],
        [ 0.0106,  0.0512,  0.0460,  ...,  0.0404, -0.0210, -0.0345]])

encoder.encoders.0.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0046, -0.0343, -0.0284,  ..., -0.0091, -0.0213, -0.0307])

encoder.encoders.0.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0057, -0.0469, -0.0469,  ..., -0.0105, -0.0641, -0.0086],
        [-0.0399,  0.0423,  0.0297,  ..., -0.0410,  0.0448,  0.0079],
        [ 0.0353, -0.0503, -0.1024,  ...,  0.0364,  0.0882, -0.0850],
        ...,
        [ 0.0146, -0.0142,  0.0066,  ..., -0.0177,  0.0079, -0.0475],
        [-0.0490, -0.0310, -0.0069,  ..., -0.0286, -0.0482,  0.0844],
        [ 0.0272, -0.0409,  0.1382,  ..., -0.0252,  0.0415,  0.0415]])

encoder.encoders.0.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0536, -0.0386, -0.0147,  ..., -0.0261,  0.0200, -0.0547])

encoder.encoders.0.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.1786, 1.2272, 1.1716,  ..., 1.1232, 1.1831, 1.1093])

encoder.encoders.0.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0292, -0.0175,  0.0612,  ..., -0.0372,  0.0926, -0.0426])

encoder.encoders.1.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.9301, 0.8588, 1.0233,  ..., 0.9917, 1.0536, 1.0233])

encoder.encoders.1.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.0391,  0.0770,  0.0546,  ..., -0.0333,  0.1006,  0.0100])

encoder.encoders.1.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0755, -0.0300, -0.0372,  ..., -0.0137, -0.0074,  0.0005],
        [ 0.0071,  0.0323,  0.0168,  ..., -0.0708,  0.0267,  0.0295],
        [-0.0287,  0.0602,  0.0145,  ..., -0.0485, -0.0563,  0.0047],
        ...,
        [-0.0425, -0.0597, -0.0748,  ...,  0.0567, -0.0286,  0.0701],
        [-0.0395, -0.0438, -0.0122,  ...,  0.0221, -0.0087, -0.0148],
        [-0.0242, -0.0046, -0.0051,  ..., -0.0414,  0.0201,  0.0133]])

encoder.encoders.1.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0401, -0.0439, -0.0181,  ..., -0.0461,  0.0043, -0.0498])

encoder.encoders.1.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0274, -0.0165, -0.0392,  ...,  0.0316,  0.0409,  0.0248],
        [-0.0005,  0.0148, -0.0034,  ..., -0.0080,  0.0074, -0.0509],
        [-0.0034, -0.0218, -0.0341,  ...,  0.0049, -0.0317,  0.0878],
        ...,
        [-0.0468,  0.0256, -0.0058,  ...,  0.0266,  0.0143,  0.0234],
        [-0.0277,  0.0604, -0.0270,  ..., -0.0382, -0.0603,  0.0204],
        [-0.0731, -0.0484,  0.0075,  ...,  0.0575, -0.0291, -0.0223]])

encoder.encoders.1.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0040, -0.0453,  0.0489,  ..., -0.0120,  0.0162, -0.0061])

encoder.encoders.1.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.2405, -0.0337, -0.1299,  ..., -0.0915,  0.0652, -0.0678],
        [-0.0177,  0.0410, -0.1340,  ..., -0.0243,  0.0371, -0.1619],
        [ 0.0540, -0.1489, -0.1475,  ..., -0.0087,  0.1970, -0.1045],
        ...,
        [ 0.2168, -0.2238,  0.2925,  ..., -0.1164,  0.0894,  0.0077],
        [ 0.2428,  0.0473,  0.0239,  ..., -0.0707, -0.2229, -0.1944],
        [ 0.1165,  0.0736,  0.0116,  ...,  0.1757, -0.2179,  0.1509]])

encoder.encoders.1.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.1702, -0.1206, -0.3535,  ..., -0.0945,  0.2695,  0.2467],
        [ 0.2076,  0.0429,  0.0068,  ..., -0.0752,  0.2640, -0.0991],
        [-0.0585,  0.2913, -0.1105,  ..., -0.0372,  0.1412, -0.1020],
        ...,
        [ 0.0187, -0.2109, -0.3313,  ...,  0.1305,  0.1904,  0.0668],
        [ 0.0247, -0.0955, -0.1016,  ..., -0.2886,  0.1616,  0.1400],
        [ 0.0168,  0.2767,  0.1557,  ...,  0.1137, -0.0150,  0.1501]])

encoder.encoders.1.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-3.9702e-02, -4.8798e-02, -3.4741e-03,  ...,  3.3456e-02,
         -3.4841e-02,  9.9475e-03],
        [-3.3634e-03,  5.2504e-02, -3.5467e-02,  ..., -1.6924e-02,
         -1.9331e-02,  1.4739e-02],
        [ 1.5757e-02, -2.8868e-02,  2.4606e-02,  ...,  1.8192e-02,
          8.1260e-02,  3.7352e-02],
        ...,
        [ 3.2994e-02,  3.9569e-02,  3.1385e-03,  ..., -4.5600e-05,
         -4.7697e-03,  8.9745e-03],
        [ 2.5831e-03,  4.1330e-03,  8.1599e-03,  ..., -3.6887e-02,
          7.1562e-02, -1.6645e-02],
        [ 4.3800e-02, -4.1234e-02,  2.4954e-02,  ..., -2.0873e-02,
          1.1794e-02,  1.8908e-04]])

encoder.encoders.1.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 1.0934e-02,  1.1075e-02,  6.9324e-03,  ...,  5.7331e-02,
         -4.5588e-02,  1.0307e-01],
        [ 1.9824e-02, -2.1989e-02,  5.0335e-02,  ...,  1.3456e-03,
         -1.0657e-02,  3.4040e-02],
        [ 4.4193e-02, -7.7083e-05, -1.9236e-02,  ...,  7.6341e-02,
         -1.4657e-02,  6.1305e-03],
        ...,
        [ 2.9959e-02,  7.6429e-02, -3.2418e-02,  ...,  4.1532e-02,
          1.9058e-02, -1.0545e-01],
        [ 2.3314e-02, -1.6578e-02,  1.1378e-03,  ...,  4.9604e-02,
          8.3547e-02, -3.0135e-03],
        [-1.4228e-02, -8.7787e-03,  3.4103e-02,  ...,  2.0047e-02,
          5.2510e-02,  1.8519e-02]])

encoder.encoders.1.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0320,  0.0030, -0.0531,  ..., -0.0299, -0.0330,  0.0161],
        [ 0.0065,  0.0063, -0.0691,  ..., -0.0129,  0.0174, -0.0021],
        [-0.0113,  0.0087, -0.0688,  ...,  0.0159, -0.0213,  0.0156],
        ...,
        [-0.0016, -0.0364, -0.0174,  ..., -0.0421, -0.0208, -0.0066],
        [-0.0383, -0.0203, -0.0571,  ..., -0.0142,  0.0350,  0.0184],
        [ 0.0096, -0.0225,  0.0113,  ...,  0.0134, -0.0094, -0.0572]])

encoder.encoders.1.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.4921, 0.4026, 0.4575,  ..., 0.5505, 0.4954, 0.5942])

encoder.encoders.1.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0643,  0.0391,  0.0230,  ...,  0.0325, -0.0365,  0.0413])

encoder.encoders.1.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.7530, 0.6465, 0.7376,  ..., 0.8161, 0.7219, 0.8044])

encoder.encoders.1.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-0.0621, -0.0063, -0.0125,  ..., -0.0473,  0.0316, -0.0539])

encoder.encoders.1.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.7190, 0.6561, 0.7935,  ..., 0.7517, 0.7521, 0.7439])

encoder.encoders.1.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.1090,  0.0514, -0.0161,  ...,  0.0526, -0.0697,  0.0726])

encoder.encoders.1.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0344,  0.0198,  0.0172,  ..., -0.0409, -0.0090, -0.0503],
        [ 0.0037, -0.0362, -0.0052,  ...,  0.0254, -0.0010, -0.0032],
        [-0.0329,  0.0333,  0.0236,  ..., -0.0108,  0.0090,  0.0329],
        ...,
        [ 0.0352, -0.0048,  0.0211,  ...,  0.0338,  0.0177, -0.0773],
        [ 0.0093, -0.0738,  0.0356,  ..., -0.0503, -0.0377, -0.0395],
        [ 0.0141, -0.0059, -0.0200,  ...,  0.0224,  0.1033, -0.0855]])

encoder.encoders.1.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0750, -0.0634, -0.0564,  ..., -0.0021, -0.0009, -0.0280],
        [ 0.0872,  0.0430,  0.0676,  ...,  0.0190,  0.0258,  0.0417],
        [-0.0480,  0.0279, -0.0283,  ..., -0.0017,  0.0374,  0.0213],
        ...,
        [ 0.0707,  0.0757, -0.0117,  ..., -0.0119,  0.0258,  0.0604],
        [ 0.0383, -0.0381,  0.0003,  ..., -0.0060,  0.0415,  0.0387],
        [-0.0158, -0.0027, -0.0021,  ...,  0.0205, -0.0251,  0.0286]])

encoder.encoders.1.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.0103, 0.9988, 1.0163,  ..., 1.0681, 1.0613, 1.0523])

encoder.encoders.1.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0030,  0.0231,  0.0715,  ..., -0.0692,  0.0106, -0.0536])

encoder.encoders.1.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 6.1834e-02],
         [-7.1161e-02],
         [ 1.9994e-02],
         ...,
         [-6.3657e-02],
         [ 6.8009e-02],
         [-1.7958e-02]],

        [[-6.0313e-02],
         [-9.6760e-03],
         [ 2.6802e-02],
         ...,
         [-1.0893e-03],
         [-1.2896e-02],
         [ 2.4529e-02]],

        [[-1.5836e-03],
         [-6.1632e-03],
         [-3.9718e-02],
         ...,
         [-2.3633e-03],
         [ 7.8478e-05],
         [ 6.3076e-03]],

        ...,

        [[-2.2262e-02],
         [ 1.0193e-02],
         [ 1.4895e-02],
         ...,
         [ 1.5194e-02],
         [ 9.0724e-03],
         [-7.8913e-03]],

        [[ 4.4705e-02],
         [-6.3012e-03],
         [-5.8819e-02],
         ...,
         [ 5.0970e-04],
         [-1.4779e-02],
         [ 3.4792e-02]],

        [[ 2.6618e-03],
         [ 3.6330e-02],
         [-2.1975e-02],
         ...,
         [ 6.2834e-02],
         [ 4.4880e-03],
         [ 6.1732e-02]]])

encoder.encoders.1.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[ 0.0065,  0.0031, -0.0015,  ...,  0.0059,  0.0021,  0.0014]],

        [[-0.0258, -0.0081, -0.0073,  ..., -0.0095, -0.0053, -0.0191]],

        [[ 0.0041,  0.0016, -0.0042,  ..., -0.0026, -0.0040,  0.0027]],

        ...,

        [[-0.0065,  0.0045,  0.0008,  ..., -0.0035, -0.0051, -0.0013]],

        [[ 0.0063,  0.0039, -0.0004,  ..., -0.0027, -0.0012,  0.0028]],

        [[ 0.0074,  0.0155,  0.0153,  ...,  0.0086,  0.0111,  0.0178]]])

encoder.encoders.1.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.1175, 1.1099, 0.9981,  ..., 1.0084, 1.0152, 1.0398])

encoder.encoders.1.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0717, -0.0753, -0.0770,  ..., -0.0597, -0.0748, -0.0542])

encoder.encoders.1.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0892],
         [-0.0075],
         [-0.0877],
         ...,
         [-0.0076],
         [ 0.0106],
         [ 0.0104]],

        [[ 0.0330],
         [ 0.0190],
         [ 0.0128],
         ...,
         [ 0.0074],
         [-0.0455],
         [ 0.0659]],

        [[-0.0979],
         [-0.0398],
         [ 0.0255],
         ...,
         [ 0.0270],
         [ 0.0282],
         [ 0.0070]],

        ...,

        [[ 0.0170],
         [-0.0385],
         [-0.0543],
         ...,
         [ 0.0602],
         [ 0.0038],
         [ 0.0441]],

        [[ 0.0292],
         [ 0.0361],
         [-0.0197],
         ...,
         [-0.0332],
         [-0.0029],
         [ 0.0546]],

        [[-0.0244],
         [-0.0067],
         [ 0.0303],
         ...,
         [ 0.0132],
         [-0.0132],
         [ 0.0093]]])

encoder.encoders.1.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.0371, 0.9577, 0.9877,  ..., 1.0210, 1.0433, 1.0843])

encoder.encoders.1.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.1594, -0.1584,  0.1565,  ..., -0.0013,  0.1918, -0.2024])

encoder.encoders.1.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0219, -0.0137,  0.0325,  ..., -0.0174, -0.0240, -0.0144],
        [ 0.0494,  0.1060, -0.0626,  ..., -0.0163, -0.0007, -0.0270],
        [ 0.0999,  0.0163, -0.0196,  ...,  0.0291,  0.0027,  0.0021],
        ...,
        [ 0.0190,  0.0429, -0.0039,  ..., -0.0042, -0.0085,  0.0675],
        [-0.0350,  0.0894, -0.0257,  ...,  0.0800, -0.0193, -0.0248],
        [ 0.0361,  0.0362, -0.0211,  ...,  0.0421,  0.0065,  0.0668]])

encoder.encoders.1.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0212,  0.0093, -0.0043,  ..., -0.0351, -0.0143, -0.0322])

encoder.encoders.1.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0886,  0.0455, -0.0821,  ...,  0.0495,  0.0539, -0.0041],
        [-0.0285,  0.0021,  0.0308,  ..., -0.0233,  0.0185,  0.0087],
        [ 0.0154,  0.0163, -0.0015,  ...,  0.0245, -0.0492,  0.0179],
        ...,
        [-0.0174,  0.0212, -0.0002,  ...,  0.0134, -0.0405, -0.0613],
        [-0.0201,  0.0025,  0.0287,  ...,  0.0038,  0.0522, -0.0050],
        [-0.0319,  0.0035,  0.0713,  ...,  0.0404, -0.0098, -0.0268]])

encoder.encoders.1.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0295, -0.0611,  0.0094,  ..., -0.0215,  0.0342, -0.0419])

encoder.encoders.1.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.1666, 1.2085, 1.1438,  ..., 1.1294, 1.1361, 1.1011])

encoder.encoders.1.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0023, -0.1169,  0.0451,  ..., -0.0491,  0.0408, -0.0794])

encoder.encoders.2.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.0154, 1.0015, 1.0219,  ..., 1.0405, 1.0261, 1.0251])

encoder.encoders.2.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.0974, -0.1748,  0.0540,  ..., -0.0193,  0.1218, -0.0726])

encoder.encoders.2.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0473,  0.0206, -0.0050,  ...,  0.0175, -0.0471, -0.0283],
        [ 0.0761,  0.1033,  0.0459,  ...,  0.0012, -0.0314, -0.0439],
        [-0.0029,  0.0330, -0.0293,  ..., -0.0027,  0.0005,  0.0490],
        ...,
        [ 0.0008,  0.0616, -0.0195,  ...,  0.0070, -0.0758,  0.0174],
        [ 0.0158,  0.0568,  0.0030,  ..., -0.0227,  0.0049,  0.0480],
        [ 0.0063, -0.0028,  0.0520,  ...,  0.0568,  0.0306, -0.0357]])

encoder.encoders.2.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0122, -0.0375, -0.0254,  ..., -0.0351, -0.0379, -0.0141])

encoder.encoders.2.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0174, -0.0060, -0.0089,  ..., -0.0080, -0.0014,  0.0468],
        [ 0.0127, -0.0288,  0.0201,  ..., -0.0328,  0.0546,  0.0017],
        [-0.0171, -0.0524,  0.0342,  ..., -0.0103, -0.0513,  0.0038],
        ...,
        [ 0.0334, -0.0043,  0.0280,  ...,  0.0090, -0.0123,  0.0744],
        [ 0.0265,  0.0317,  0.0289,  ...,  0.0232, -0.0365,  0.0735],
        [ 0.0106, -0.0637, -0.0190,  ...,  0.0060,  0.0403, -0.0150]])

encoder.encoders.2.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0495, -0.0218,  0.0332,  ..., -0.0444,  0.0143, -0.0342])

encoder.encoders.2.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.0528, -0.0369, -0.2145,  ..., -0.0032, -0.1456,  0.0020],
        [ 0.0957, -0.2321, -0.0620,  ..., -0.0776, -0.2161, -0.3584],
        [ 0.0377, -0.1531,  0.0987,  ..., -0.0682,  0.1464,  0.2383],
        ...,
        [-0.0284,  0.2497, -0.1437,  ...,  0.1132, -0.0561,  0.0288],
        [ 0.2278,  0.1969, -0.0801,  ...,  0.0382, -0.0516,  0.0243],
        [-0.1250, -0.1449, -0.1262,  ..., -0.0355,  0.2652, -0.0558]])

encoder.encoders.2.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.2901,  0.1214, -0.1805,  ...,  0.1855, -0.1822,  0.0098],
        [-0.3009, -0.0351,  0.0456,  ..., -0.1823,  0.0448,  0.0779],
        [-0.0130, -0.0556,  0.0625,  ..., -0.1328,  0.2730, -0.1854],
        ...,
        [ 0.2173,  0.0369, -0.1773,  ...,  0.0382, -0.0222, -0.0362],
        [-0.1687, -0.0700,  0.0941,  ...,  0.0637,  0.1026, -0.0151],
        [ 0.2195,  0.0361,  0.0559,  ..., -0.0665,  0.0097, -0.1446]])

encoder.encoders.2.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0091, -0.0228,  0.0506,  ..., -0.0156, -0.0168, -0.0084],
        [-0.0262,  0.0033, -0.0321,  ...,  0.0036, -0.0083,  0.0314],
        [ 0.0060, -0.0624, -0.0111,  ..., -0.0081, -0.0024, -0.0417],
        ...,
        [-0.0022, -0.0517, -0.0480,  ...,  0.0644, -0.0782, -0.0450],
        [ 0.0416, -0.0408, -0.0439,  ...,  0.0362,  0.0490, -0.0044],
        [-0.0021, -0.0694,  0.0180,  ..., -0.0466,  0.0200, -0.0203]])

encoder.encoders.2.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0390,  0.0136,  0.0453,  ...,  0.0235,  0.0138,  0.0041],
        [-0.0308, -0.0672, -0.0598,  ...,  0.0491, -0.0064,  0.0844],
        [ 0.0359, -0.0605, -0.0163,  ..., -0.0161,  0.0258, -0.0147],
        ...,
        [ 0.0231,  0.0664,  0.0966,  ..., -0.0098, -0.0037, -0.0240],
        [ 0.0713,  0.0402,  0.0329,  ...,  0.0096,  0.0215,  0.0285],
        [-0.0364, -0.0344, -0.0090,  ..., -0.0098, -0.0028, -0.0130]])

encoder.encoders.2.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0070, -0.0012, -0.0277,  ..., -0.0025, -0.0566,  0.0550],
        [ 0.0239, -0.0312, -0.0457,  ..., -0.0594, -0.0264,  0.0380],
        [-0.0125,  0.0044,  0.0041,  ...,  0.0353,  0.1072, -0.0029],
        ...,
        [-0.0227, -0.0237, -0.0033,  ...,  0.0562,  0.0353,  0.0438],
        [ 0.0883,  0.0232, -0.0152,  ..., -0.0116,  0.0270,  0.0311],
        [-0.0593, -0.0208, -0.0119,  ...,  0.0255,  0.0402, -0.0131]])

encoder.encoders.2.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.4945, 0.4759, 0.4751,  ..., 0.5339, 0.4657, 0.5410])

encoder.encoders.2.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0826,  0.0689,  0.0008,  ..., -0.0395, -0.0055,  0.0515])

encoder.encoders.2.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.7491, 0.7520, 0.7053,  ..., 0.7731, 0.6841, 0.7946])

encoder.encoders.2.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0030, -0.0361,  0.0091,  ...,  0.0059,  0.0029, -0.0212])

encoder.encoders.2.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6991, 0.7048, 0.6676,  ..., 0.7180, 0.7524, 0.7231])

encoder.encoders.2.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0839,  0.1327, -0.0228,  ...,  0.0364, -0.0345,  0.1083])

encoder.encoders.2.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0685, -0.0148,  0.0785,  ..., -0.0405, -0.0220, -0.0073],
        [ 0.0094,  0.0089, -0.0467,  ...,  0.0191, -0.0138,  0.0593],
        [-0.0506, -0.0167,  0.0294,  ..., -0.0584,  0.0427, -0.0341],
        ...,
        [ 0.0065,  0.0385, -0.0604,  ...,  0.0310,  0.0068, -0.0404],
        [-0.0572, -0.0517,  0.0121,  ...,  0.0046, -0.0071, -0.0253],
        [ 0.0487,  0.0037, -0.0224,  ..., -0.0065, -0.0329,  0.0172]])

encoder.encoders.2.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0387,  0.0107,  0.0186,  ..., -0.0040,  0.0457,  0.0025],
        [ 0.1168,  0.0089,  0.0318,  ...,  0.0152,  0.0266, -0.0119],
        [ 0.1067,  0.0516,  0.0563,  ...,  0.0087, -0.0109,  0.0378],
        ...,
        [ 0.0495,  0.1202,  0.0122,  ..., -0.0036,  0.0425,  0.0150],
        [ 0.0169,  0.0833,  0.0060,  ..., -0.0007, -0.0342,  0.0184],
        [ 0.0081, -0.0631, -0.0021,  ...,  0.0120, -0.0274,  0.0522]])

encoder.encoders.2.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.0178, 1.0508, 1.0425,  ..., 1.0457, 1.0860, 1.0380])

encoder.encoders.2.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0351, -0.0944,  0.0694,  ..., -0.0569,  0.0322, -0.1652])

encoder.encoders.2.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0502],
         [ 0.0257],
         [ 0.0422],
         ...,
         [ 0.1030],
         [-0.0476],
         [-0.0397]],

        [[-0.0431],
         [-0.0015],
         [ 0.0517],
         ...,
         [-0.0121],
         [ 0.0452],
         [ 0.0317]],

        [[ 0.0904],
         [-0.0188],
         [-0.0021],
         ...,
         [-0.0849],
         [ 0.0804],
         [-0.0324]],

        ...,

        [[-0.0249],
         [-0.0453],
         [-0.0143],
         ...,
         [-0.0342],
         [ 0.0065],
         [-0.0385]],

        [[ 0.0159],
         [-0.0831],
         [ 0.0003],
         ...,
         [ 0.0237],
         [-0.0151],
         [-0.0689]],

        [[-0.0068],
         [-0.0451],
         [ 0.0290],
         ...,
         [-0.0416],
         [-0.0120],
         [ 0.0116]]])

encoder.encoders.2.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[ 7.4527e-04,  3.3474e-04,  3.5051e-03,  ..., -3.6418e-03,
          -6.5967e-03,  1.5283e-04]],

        [[-7.0256e-03, -8.1654e-03,  6.2107e-05,  ...,  3.1364e-03,
          -8.4742e-04, -5.4350e-03]],

        [[-3.5345e-02, -1.4817e-02, -1.8745e-02,  ..., -1.1277e-02,
          -1.1394e-02, -3.8390e-02]],

        ...,

        [[ 2.2899e-03, -4.3234e-04, -1.4620e-04,  ...,  4.7521e-03,
           2.5558e-03, -2.4063e-03]],

        [[ 1.2510e-03,  4.9663e-03, -7.5408e-03,  ..., -1.4485e-03,
           3.3768e-04,  5.7738e-03]],

        [[-8.9440e-03, -2.4860e-03, -1.1172e-02,  ..., -5.8322e-03,
          -7.0960e-03,  1.9519e-03]]])

encoder.encoders.2.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9826, 0.9650, 1.0489,  ..., 0.9754, 1.0100, 1.0027])

encoder.encoders.2.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0756, -0.0724, -0.0367,  ..., -0.0919, -0.0403, -0.0650])

encoder.encoders.2.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0134],
         [-0.0836],
         [ 0.0735],
         ...,
         [ 0.0878],
         [-0.0035],
         [ 0.0599]],

        [[-0.0361],
         [-0.0680],
         [ 0.0298],
         ...,
         [-0.0247],
         [-0.0150],
         [-0.0261]],

        [[ 0.0405],
         [ 0.0482],
         [ 0.0717],
         ...,
         [-0.0052],
         [ 0.0776],
         [ 0.0602]],

        ...,

        [[ 0.0370],
         [-0.0262],
         [ 0.0379],
         ...,
         [-0.0899],
         [-0.0320],
         [-0.0724]],

        [[-0.0028],
         [-0.0536],
         [-0.0312],
         ...,
         [ 0.0178],
         [-0.0491],
         [ 0.0380]],

        [[ 0.0392],
         [-0.0323],
         [ 0.0392],
         ...,
         [-0.0206],
         [ 0.0030],
         [-0.0543]]])

encoder.encoders.2.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.0317, 0.9853, 1.0557,  ..., 1.0324, 1.0606, 1.0667])

encoder.encoders.2.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.1568, -0.0516,  0.0588,  ..., -0.0443, -0.0310, -0.1759])

encoder.encoders.2.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0249,  0.0478, -0.0399,  ..., -0.0600,  0.0331,  0.0242],
        [-0.0167,  0.0305, -0.0501,  ...,  0.0183,  0.1103,  0.0008],
        [-0.0713,  0.0117, -0.0515,  ..., -0.0010,  0.0355, -0.0309],
        ...,
        [-0.0122,  0.0235, -0.0337,  ...,  0.0452,  0.0241,  0.0581],
        [ 0.0082, -0.0105,  0.0678,  ...,  0.0120,  0.0311,  0.0288],
        [ 0.0213,  0.0237,  0.0351,  ...,  0.0480,  0.0039,  0.0871]])

encoder.encoders.2.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0010, -0.0388, -0.0194,  ...,  0.0030,  0.0180, -0.0011])

encoder.encoders.2.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0137, -0.0656,  0.0673,  ..., -0.0410,  0.0031, -0.0338],
        [-0.0089, -0.0192, -0.0299,  ..., -0.0623,  0.0409, -0.0876],
        [ 0.0094,  0.0353,  0.0470,  ..., -0.0102,  0.0031, -0.0500],
        ...,
        [-0.0053, -0.0089,  0.0660,  ..., -0.0058, -0.0340, -0.0200],
        [ 0.0303, -0.0102, -0.0009,  ...,  0.0128,  0.0374, -0.0654],
        [ 0.0076, -0.0299,  0.0649,  ..., -0.0266, -0.0271,  0.0263]])

encoder.encoders.2.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0326, -0.0353,  0.0144,  ..., -0.0132, -0.0044, -0.0397])

encoder.encoders.2.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2135, 1.1653, 1.1262,  ..., 1.1743, 1.1284, 1.1843])

encoder.encoders.2.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0984, -0.0328,  0.0191,  ..., -0.0684, -0.0370, -0.0970])

encoder.encoders.3.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.0228, 0.9481, 1.0082,  ..., 1.0090, 1.0293, 0.9842])

encoder.encoders.3.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.1375, -0.0601,  0.0581,  ..., -0.0404,  0.0049, -0.1016])

encoder.encoders.3.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0580,  0.0394, -0.0114,  ...,  0.0750, -0.0499,  0.0113],
        [-0.0281,  0.0469, -0.0201,  ..., -0.0221, -0.0129, -0.0122],
        [-0.0579,  0.0020,  0.0144,  ...,  0.0282, -0.0732, -0.0319],
        ...,
        [ 0.0536, -0.0730,  0.0335,  ..., -0.0575, -0.0035,  0.0054],
        [-0.1307, -0.0971, -0.0618,  ..., -0.0732,  0.0628,  0.0347],
        [ 0.0255, -0.0259, -0.0488,  ..., -0.0295,  0.0177,  0.0266]])

encoder.encoders.3.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0200, -0.0260, -0.0009,  ..., -0.0028,  0.0028, -0.0434])

encoder.encoders.3.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0342, -0.0143, -0.0258,  ..., -0.0255, -0.0383,  0.0345],
        [-0.0012,  0.0168,  0.0580,  ..., -0.0275,  0.0066,  0.0694],
        [ 0.0403,  0.0347,  0.0159,  ..., -0.0344,  0.0060,  0.0056],
        ...,
        [-0.0325, -0.1008,  0.0238,  ..., -0.0143, -0.0394, -0.0361],
        [-0.0244,  0.0165,  0.0045,  ...,  0.0053, -0.0035,  0.0339],
        [ 0.0073,  0.0722, -0.0092,  ..., -0.0193, -0.0409,  0.0138]])

encoder.encoders.3.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0283, -0.0134,  0.0013,  ..., -0.0365, -0.0076, -0.0273])

encoder.encoders.3.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.0787, -0.1207, -0.1692,  ..., -0.0300,  0.1998,  0.1718],
        [ 0.1676, -0.0580, -0.0266,  ...,  0.2904, -0.1846,  0.2696],
        [-0.0963,  0.0355, -0.0444,  ..., -0.1815,  0.0991, -0.0265],
        ...,
        [-0.2117,  0.0703,  0.0534,  ..., -0.1045, -0.1955, -0.0877],
        [ 0.2614,  0.0194, -0.1515,  ...,  0.1449, -0.0096, -0.2632],
        [ 0.1093, -0.2896, -0.2888,  ...,  0.0328,  0.1970,  0.0283]])

encoder.encoders.3.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 0.2467, -0.1251,  0.0227,  ...,  0.1472, -0.0380, -0.1210],
        [ 0.1205,  0.0420,  0.2610,  ...,  0.1131,  0.0627, -0.3601],
        [-0.1326, -0.0048,  0.0243,  ..., -0.0943,  0.1553, -0.1675],
        ...,
        [ 0.2343,  0.0555, -0.0650,  ..., -0.3843,  0.0935, -0.1523],
        [-0.1875, -0.1357, -0.0936,  ..., -0.0406, -0.0034,  0.2163],
        [ 0.2679,  0.4035,  0.3383,  ...,  0.3924,  0.2550,  0.0372]])

encoder.encoders.3.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0081, -0.0338,  0.0310,  ..., -0.0453,  0.0205,  0.0172],
        [-0.0071,  0.0058, -0.0301,  ...,  0.0316, -0.0002,  0.0621],
        [ 0.0230, -0.0021,  0.0483,  ..., -0.0319, -0.0092, -0.0305],
        ...,
        [-0.0539, -0.0289,  0.0092,  ..., -0.0211, -0.0448,  0.0426],
        [-0.0491,  0.0077,  0.0058,  ..., -0.0308, -0.0420,  0.0116],
        [-0.0085, -0.0238, -0.0357,  ..., -0.0037,  0.0066,  0.0103]])

encoder.encoders.3.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0196,  0.0026,  0.0050,  ...,  0.0167, -0.0261,  0.0103],
        [ 0.0100,  0.0730, -0.0298,  ..., -0.0170, -0.0713, -0.0718],
        [ 0.0562, -0.0553, -0.0689,  ...,  0.0167,  0.0276, -0.0266],
        ...,
        [ 0.0241, -0.0292, -0.0355,  ...,  0.0317,  0.0172, -0.0660],
        [ 0.0136, -0.0379,  0.0813,  ...,  0.0396, -0.0425, -0.0778],
        [-0.0043, -0.0016,  0.0560,  ...,  0.0153, -0.0461, -0.0171]])

encoder.encoders.3.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0816,  0.0034, -0.0011,  ...,  0.0198,  0.0808,  0.0634],
        [ 0.0100, -0.0239,  0.0121,  ...,  0.0176,  0.0564,  0.0611],
        [-0.0177,  0.0076,  0.0331,  ..., -0.0075,  0.0071, -0.0458],
        ...,
        [-0.0050, -0.0223,  0.0508,  ..., -0.0535,  0.0308, -0.0401],
        [-0.0212, -0.0565, -0.0535,  ...,  0.0642, -0.0799, -0.0163],
        [ 0.0660, -0.0198,  0.0624,  ..., -0.0393,  0.0193,  0.0608]])

encoder.encoders.3.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.4760, 0.4934, 0.4786,  ..., 0.4777, 0.5266, 0.5006])

encoder.encoders.3.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([0.0302, 0.0786, 0.0058,  ..., 0.0258, 0.0396, 0.1043])

encoder.encoders.3.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.6778, 0.7495, 0.7082,  ..., 0.7116, 0.6899, 0.7361])

encoder.encoders.3.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0175,  0.0034,  0.0060,  ..., -0.0280,  0.0417,  0.0428])

encoder.encoders.3.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6393, 0.7000, 0.7040,  ..., 0.6859, 0.6926, 0.6662])

encoder.encoders.3.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0247,  0.1127, -0.0400,  ...,  0.0845,  0.0447,  0.1718])

encoder.encoders.3.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0282, -0.0243,  0.0416,  ..., -0.0081,  0.0597,  0.0058],
        [-0.0066, -0.0235, -0.0239,  ...,  0.0284,  0.0015, -0.0616],
        [-0.0507,  0.0123,  0.0061,  ...,  0.0624,  0.0412, -0.0184],
        ...,
        [ 0.0237, -0.0244, -0.0178,  ...,  0.0170, -0.0351,  0.0478],
        [-0.0613, -0.0344, -0.0297,  ..., -0.0313, -0.0111,  0.0214],
        [-0.0331,  0.0271, -0.0365,  ..., -0.0214,  0.0211, -0.0391]])

encoder.encoders.3.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0183, -0.0357,  0.0388,  ..., -0.0470,  0.0357, -0.0383],
        [ 0.0136,  0.0099,  0.0243,  ...,  0.0296, -0.0373,  0.0025],
        [ 0.0024, -0.0106,  0.0299,  ..., -0.0102, -0.0445,  0.0178],
        ...,
        [ 0.0028,  0.0499,  0.0694,  ..., -0.0117,  0.0242, -0.0134],
        [ 0.0708,  0.0868,  0.0746,  ..., -0.0486,  0.0081, -0.0166],
        [ 0.0347,  0.0382,  0.0062,  ...,  0.0193, -0.0248,  0.0156]])

encoder.encoders.3.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.0126, 1.0300, 1.0724,  ..., 1.0627, 1.1065, 1.0189])

encoder.encoders.3.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([ 0.0975, -0.1497,  0.0274,  ..., -0.0734, -0.1294, -0.1730])

encoder.encoders.3.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.0567],
         [-0.0721],
         [-0.0084],
         ...,
         [-0.0230],
         [-0.0612],
         [-0.0180]],

        [[ 0.0402],
         [-0.0515],
         [ 0.0231],
         ...,
         [ 0.0248],
         [-0.0547],
         [ 0.0274]],

        [[-0.1039],
         [-0.0496],
         [-0.0171],
         ...,
         [-0.0034],
         [-0.0123],
         [-0.0096]],

        ...,

        [[ 0.0363],
         [ 0.0587],
         [ 0.0028],
         ...,
         [ 0.1217],
         [-0.0344],
         [-0.0068]],

        [[-0.0244],
         [ 0.0435],
         [ 0.0159],
         ...,
         [ 0.0221],
         [ 0.0065],
         [ 0.0276]],

        [[ 0.0255],
         [ 0.0886],
         [ 0.0271],
         ...,
         [ 0.1240],
         [ 0.0383],
         [ 0.0286]]])

encoder.encoders.3.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0401, -0.0187, -0.0282,  ...,  0.0128,  0.0085, -0.0006]],

        [[ 0.0790,  0.0383,  0.0543,  ...,  0.0353,  0.0416,  0.0511]],

        [[-0.0230, -0.0106, -0.0105,  ...,  0.0065, -0.0051, -0.0012]],

        ...,

        [[-0.0020, -0.0049, -0.0014,  ...,  0.0026, -0.0046,  0.0020]],

        [[ 0.0292,  0.0093,  0.0313,  ...,  0.0213,  0.0157,  0.0293]],

        [[ 0.0006,  0.0010, -0.0069,  ..., -0.0057,  0.0071, -0.0059]]])

encoder.encoders.3.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0393, 1.0465, 0.9603,  ..., 0.9907, 0.9830, 1.0086])

encoder.encoders.3.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0965, -0.0331, -0.0681,  ..., -0.0535, -0.0286, -0.0487])

encoder.encoders.3.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0009],
         [-0.0053],
         [ 0.0170],
         ...,
         [-0.0223],
         [-0.0011],
         [ 0.0086]],

        [[-0.0018],
         [-0.0061],
         [-0.0465],
         ...,
         [-0.0613],
         [-0.0611],
         [-0.0167]],

        [[ 0.0418],
         [ 0.0224],
         [-0.0149],
         ...,
         [ 0.0273],
         [ 0.0269],
         [-0.0386]],

        ...,

        [[ 0.0537],
         [ 0.0388],
         [ 0.0246],
         ...,
         [-0.0365],
         [-0.0060],
         [ 0.0582]],

        [[ 0.0346],
         [ 0.0499],
         [-0.0048],
         ...,
         [-0.0704],
         [-0.0406],
         [-0.0794]],

        [[-0.0399],
         [-0.0625],
         [ 0.0317],
         ...,
         [-0.0206],
         [ 0.0063],
         [-0.0284]]])

encoder.encoders.3.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([0.9904, 1.0305, 0.9990,  ..., 1.0949, 1.1544, 1.0278])

encoder.encoders.3.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.0628, -0.0403,  0.0425,  ..., -0.2270, -0.2190, -0.1603])

encoder.encoders.3.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0030, -0.0307, -0.0122,  ..., -0.0650, -0.0093,  0.0133],
        [-0.0353,  0.0713,  0.0107,  ...,  0.0471, -0.0417,  0.0822],
        [ 0.0867, -0.0266, -0.0382,  ..., -0.0281, -0.0052, -0.0274],
        ...,
        [-0.0176,  0.0022, -0.0128,  ...,  0.0455, -0.0029,  0.0719],
        [-0.0869, -0.0343, -0.0462,  ..., -0.0235,  0.0557, -0.0552],
        [ 0.0943, -0.0061, -0.0854,  ...,  0.0387, -0.0251, -0.0072]])

encoder.encoders.3.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0145, -0.0107,  0.0070,  ..., -0.0287, -0.0264,  0.0181])

encoder.encoders.3.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0101,  0.0113,  0.0371,  ..., -0.0537, -0.0048, -0.0570],
        [ 0.0413, -0.0561,  0.0191,  ...,  0.0007,  0.0428,  0.0092],
        [ 0.0114,  0.0145, -0.0496,  ...,  0.0567, -0.0595, -0.0404],
        ...,
        [-0.0092,  0.0249,  0.0167,  ...,  0.0477, -0.0296, -0.0208],
        [-0.0230,  0.0006,  0.0369,  ...,  0.0051,  0.0301,  0.0368],
        [ 0.0507, -0.0332,  0.0010,  ..., -0.0629, -0.0458,  0.0860]])

encoder.encoders.3.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0078, -0.0018,  0.0011,  ..., -0.0253, -0.0404, -0.0084])

encoder.encoders.3.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.3010, 1.1892, 1.1749,  ..., 1.2198, 1.1685, 1.2503])

encoder.encoders.3.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0418, -0.0150,  0.0318,  ..., -0.1365, -0.0648, -0.1035])

encoder.encoders.4.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.8857, 0.9941, 0.9789,  ..., 1.1071, 1.0547, 0.9414])

encoder.encoders.4.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.0600, -0.0408,  0.0829,  ..., -0.2023, -0.1270, -0.0849])

encoder.encoders.4.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-2.8561e-02, -7.7462e-02,  3.5569e-02,  ...,  3.9665e-02,
          9.3022e-03,  3.6743e-02],
        [-5.9748e-02, -4.5835e-02, -7.6934e-02,  ...,  3.0558e-02,
         -6.1730e-03, -4.2336e-02],
        [-6.3206e-02, -4.2884e-02,  4.7172e-03,  ...,  6.1922e-02,
          5.2984e-04,  7.3860e-02],
        ...,
        [-1.8880e-03, -1.5727e-02,  3.1604e-02,  ...,  1.7507e-02,
          8.6378e-03, -2.4591e-02],
        [ 1.0968e-02,  5.1312e-02, -9.9414e-03,  ..., -1.4642e-02,
          2.8550e-02,  8.5325e-03],
        [ 4.4503e-02, -7.4377e-05,  2.3442e-02,  ...,  7.0472e-03,
         -2.9657e-02,  4.0622e-02]])

encoder.encoders.4.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0116, -0.0027, -0.0012,  ..., -0.0386, -0.0182, -0.0126])

encoder.encoders.4.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0235,  0.0053, -0.0159,  ...,  0.0061, -0.0082,  0.0646],
        [-0.0548, -0.0438,  0.0638,  ...,  0.0043,  0.0137, -0.0112],
        [-0.0145,  0.0375, -0.0023,  ...,  0.0104, -0.0267, -0.0080],
        ...,
        [-0.0055,  0.0197,  0.0097,  ...,  0.0179, -0.0930,  0.0076],
        [ 0.0671,  0.0084,  0.0420,  ..., -0.0635, -0.0125, -0.0136],
        [ 0.0182, -0.0021, -0.0046,  ..., -0.0201, -0.0150,  0.0267]])

encoder.encoders.4.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0197, -0.0101, -0.0020,  ..., -0.0466, -0.0207, -0.0300])

encoder.encoders.4.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.1438,  0.1017, -0.0585,  ..., -0.2271,  0.2174, -0.1404],
        [-0.0625, -0.0190,  0.0159,  ...,  0.1944,  0.2255, -0.0431],
        [-0.1570,  0.1925,  0.2472,  ...,  0.1795, -0.1182,  0.0495],
        ...,
        [ 0.0593,  0.1637, -0.1272,  ...,  0.2216, -0.0594, -0.0389],
        [ 0.1161,  0.0371,  0.1056,  ..., -0.1940,  0.0815,  0.0260],
        [-0.2250,  0.0168,  0.0415,  ...,  0.2935, -0.1347, -0.2508]])

encoder.encoders.4.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.1413, -0.2667,  0.2186,  ..., -0.0641,  0.0910, -0.1753],
        [-0.0511,  0.0221,  0.0238,  ...,  0.0905,  0.1739, -0.0957],
        [ 0.2598, -0.2572,  0.2784,  ...,  0.2326,  0.0984,  0.2267],
        ...,
        [ 0.0261,  0.1470,  0.1316,  ..., -0.2183, -0.0546,  0.0596],
        [-0.2568, -0.0911,  0.1295,  ...,  0.2179,  0.3220,  0.1862],
        [ 0.0895, -0.3124, -0.2085,  ...,  0.0178,  0.0397, -0.0505]])

encoder.encoders.4.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-4.5428e-02,  6.6453e-02, -9.4500e-05,  ...,  9.1180e-04,
         -3.0909e-02,  2.3230e-02],
        [-5.2195e-03,  1.1797e-02, -2.7637e-02,  ...,  2.8924e-02,
         -2.6104e-02, -1.4547e-03],
        [-3.0325e-02, -5.5146e-02,  1.6743e-02,  ..., -1.5566e-02,
          2.1717e-02, -8.0299e-03],
        ...,
        [ 2.7061e-02,  4.9678e-02,  3.8481e-02,  ...,  2.8696e-02,
         -1.1913e-03,  5.4362e-03],
        [-1.3696e-03, -4.7837e-02, -8.6702e-03,  ..., -2.3309e-02,
         -6.7339e-02,  1.1852e-03],
        [-9.9079e-03,  2.7548e-03,  3.4193e-02,  ..., -1.6151e-03,
          2.4675e-02, -4.8645e-02]])

encoder.encoders.4.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0143,  0.0082,  0.0844,  ...,  0.0538,  0.0080,  0.0656],
        [-0.0034,  0.0135,  0.0148,  ..., -0.0299, -0.0013, -0.0458],
        [-0.0744, -0.0051,  0.0047,  ...,  0.0612, -0.0052, -0.0056],
        ...,
        [-0.0348, -0.0072, -0.0238,  ...,  0.0119,  0.0572, -0.0454],
        [-0.0323,  0.0339,  0.0086,  ..., -0.0870,  0.0303,  0.0131],
        [ 0.0356, -0.0194, -0.0251,  ..., -0.0646, -0.0717, -0.0780]])

encoder.encoders.4.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0177, -0.0172,  0.0332,  ..., -0.0064,  0.0781,  0.0207],
        [ 0.0049,  0.0317,  0.0156,  ..., -0.0020,  0.0121, -0.0315],
        [-0.0351,  0.0709,  0.0219,  ..., -0.0711,  0.0107,  0.0328],
        ...,
        [ 0.0101,  0.0219, -0.0506,  ...,  0.0129,  0.0161, -0.0178],
        [-0.0212, -0.0132, -0.0216,  ..., -0.0045,  0.0268,  0.0232],
        [-0.0398, -0.0462, -0.0113,  ...,  0.0218, -0.0211, -0.0004]])

encoder.encoders.4.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.4676, 0.4717, 0.5007,  ..., 0.5496, 0.5141, 0.4676])

encoder.encoders.4.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0100,  0.0278, -0.0245,  ...,  0.0695, -0.0148,  0.1723])

encoder.encoders.4.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.6073, 0.6637, 0.6151,  ..., 0.6546, 0.6631, 0.6532])

encoder.encoders.4.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0186,  0.0090, -0.0201,  ..., -0.0089, -0.0140, -0.0101])

encoder.encoders.4.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6183, 0.7016, 0.6641,  ..., 0.6813, 0.6613, 0.6356])

encoder.encoders.4.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0429,  0.0292, -0.0650,  ...,  0.1398,  0.0444,  0.2169])

encoder.encoders.4.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0363,  0.0457, -0.0046,  ..., -0.0002, -0.0257,  0.0023],
        [-0.0625,  0.0146,  0.0090,  ...,  0.0143,  0.0551, -0.0055],
        [-0.0237,  0.0042, -0.0009,  ..., -0.0022,  0.0453, -0.0163],
        ...,
        [ 0.0454,  0.0152, -0.0136,  ...,  0.0442,  0.0166,  0.0065],
        [-0.0517, -0.0196, -0.0293,  ...,  0.0063,  0.0040,  0.0378],
        [-0.0435, -0.0127,  0.0409,  ...,  0.0055, -0.0756, -0.0447]])

encoder.encoders.4.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0586, -0.0005,  0.0094,  ...,  0.0116, -0.0482, -0.0236],
        [ 0.0579,  0.0619,  0.0610,  ..., -0.0134, -0.0226, -0.0227],
        [ 0.0477,  0.0702, -0.0008,  ..., -0.0471,  0.0353,  0.0024],
        ...,
        [-0.0825, -0.0446, -0.0684,  ..., -0.0388,  0.0409,  0.0067],
        [ 0.0749,  0.0341,  0.0521,  ..., -0.0075, -0.0424,  0.0253],
        [ 0.0146,  0.0125, -0.0021,  ..., -0.0052, -0.0401, -0.0269]])

encoder.encoders.4.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([0.8694, 1.0522, 1.0040,  ..., 1.0729, 1.0653, 1.0102])

encoder.encoders.4.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([ 0.0879, -0.0685,  0.0322,  ..., -0.0896, -0.1308, -0.1090])

encoder.encoders.4.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-6.7998e-02],
         [ 5.9916e-03],
         [-6.4826e-02],
         ...,
         [-2.0414e-02],
         [-2.8131e-02],
         [ 1.0885e-02]],

        [[-1.0200e-01],
         [-2.6272e-02],
         [ 2.0708e-02],
         ...,
         [ 5.3913e-02],
         [-2.2960e-02],
         [ 2.4946e-02]],

        [[-5.3673e-02],
         [-1.7854e-02],
         [-5.0842e-02],
         ...,
         [-3.3155e-02],
         [ 5.7740e-02],
         [ 5.2804e-02]],

        ...,

        [[ 1.1431e-01],
         [ 8.8312e-03],
         [-5.3641e-03],
         ...,
         [-7.0807e-03],
         [ 2.9641e-02],
         [ 2.4909e-02]],

        [[ 1.6968e-02],
         [ 1.3085e-02],
         [ 3.1315e-02],
         ...,
         [-2.0379e-02],
         [-5.1465e-02],
         [-6.9408e-03]],

        [[ 5.3210e-03],
         [ 6.6443e-02],
         [ 2.8190e-02],
         ...,
         [ 5.7821e-05],
         [ 9.1753e-03],
         [ 3.8991e-02]]])

encoder.encoders.4.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[ 0.0335,  0.0127,  0.0042,  ...,  0.0038, -0.0087, -0.0268]],

        [[ 0.0983,  0.0885,  0.0822,  ...,  0.0491,  0.0575,  0.1003]],

        [[ 0.0704,  0.0221,  0.0312,  ...,  0.0425,  0.0258,  0.0558]],

        ...,

        [[ 0.0068,  0.0013,  0.0028,  ...,  0.0026, -0.0068, -0.0012]],

        [[-0.0049,  0.0048,  0.0016,  ...,  0.0090, -0.0100,  0.0023]],

        [[-0.0129, -0.0141, -0.0023,  ...,  0.0250,  0.0294,  0.0455]]])

encoder.encoders.4.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0063, 1.0686, 1.0125,  ..., 1.0415, 1.0055, 0.9484])

encoder.encoders.4.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0391, -0.0373, -0.0330,  ..., -0.0444, -0.0619, -0.0523])

encoder.encoders.4.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0045],
         [-0.0926],
         [ 0.0008],
         ...,
         [-0.0328],
         [-0.0106],
         [-0.0463]],

        [[ 0.0438],
         [-0.0275],
         [ 0.0215],
         ...,
         [ 0.0487],
         [ 0.0069],
         [-0.0367]],

        [[ 0.0184],
         [-0.0377],
         [-0.0234],
         ...,
         [-0.0316],
         [ 0.0337],
         [ 0.0904]],

        ...,

        [[-0.0362],
         [ 0.0040],
         [-0.0241],
         ...,
         [-0.0192],
         [ 0.0929],
         [ 0.0115]],

        [[ 0.0486],
         [ 0.0589],
         [-0.0766],
         ...,
         [-0.0151],
         [-0.0288],
         [-0.0087]],

        [[ 0.0493],
         [ 0.0254],
         [ 0.0811],
         ...,
         [-0.0171],
         [-0.0245],
         [-0.0063]]])

encoder.encoders.4.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([0.8947, 0.9943, 1.0051,  ..., 1.1279, 1.0389, 1.0801])

encoder.encoders.4.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.1457,  0.0096,  0.1179,  ..., -0.2026, -0.0713, -0.1739])

encoder.encoders.4.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0602,  0.0059,  0.0092,  ..., -0.0304, -0.0704,  0.0246],
        [-0.0367,  0.0622,  0.0424,  ..., -0.0454, -0.0166,  0.0171],
        [ 0.0374, -0.0517, -0.0278,  ..., -0.0052,  0.0587,  0.0193],
        ...,
        [-0.0364, -0.0643, -0.0094,  ..., -0.0211, -0.0854,  0.0632],
        [ 0.0122,  0.0035,  0.0011,  ...,  0.0469,  0.0219,  0.0295],
        [ 0.0238, -0.0330, -0.0394,  ..., -0.0391,  0.0924,  0.0294]])

encoder.encoders.4.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0047, -0.0119, -0.0216,  ...,  0.0130, -0.0087, -0.0376])

encoder.encoders.4.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0455, -0.0479,  0.0699,  ...,  0.0721, -0.0224,  0.0179],
        [ 0.0303,  0.0179, -0.0464,  ...,  0.0120, -0.0219,  0.0247],
        [ 0.0455, -0.0483, -0.0432,  ...,  0.0259, -0.0035,  0.0110],
        ...,
        [-0.0527,  0.0464,  0.0436,  ..., -0.0197,  0.0078,  0.0127],
        [ 0.0620,  0.0275,  0.0177,  ...,  0.0362,  0.0370, -0.0032],
        [ 0.1242, -0.0056, -0.0901,  ..., -0.0526, -0.0039,  0.0082]])

encoder.encoders.4.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0023, -0.0037,  0.0115,  ..., -0.0536, -0.0006, -0.0165])

encoder.encoders.4.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2954, 1.2098, 1.1737,  ..., 1.2360, 1.1793, 1.1898])

encoder.encoders.4.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0437, -0.0077,  0.0447,  ..., -0.1756, -0.0484, -0.0423])

encoder.encoders.5.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.7890, 0.9471, 0.9381,  ..., 1.0962, 0.9624, 0.9787])

encoder.encoders.5.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.1010, -0.0012,  0.0765,  ..., -0.2034, -0.0879, -0.1308])

encoder.encoders.5.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0194, -0.0701,  0.0559,  ...,  0.0074, -0.0174,  0.0032],
        [ 0.0212,  0.0083,  0.0027,  ...,  0.0224,  0.0375,  0.0816],
        [ 0.0116, -0.0622,  0.0702,  ..., -0.0197,  0.0102,  0.0077],
        ...,
        [ 0.0020,  0.0741, -0.0497,  ...,  0.0886, -0.0495,  0.0596],
        [ 0.0443,  0.0043, -0.0184,  ..., -0.0006, -0.0333, -0.0109],
        [-0.0028,  0.0598, -0.1250,  ..., -0.0531,  0.0304, -0.0009]])

encoder.encoders.5.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0568, -0.0279, -0.0006,  ..., -0.0173, -0.0480,  0.0028])

encoder.encoders.5.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0403, -0.0015,  0.0090,  ..., -0.0310, -0.0147, -0.0173],
        [ 0.0335, -0.0528, -0.0134,  ..., -0.0019, -0.0045,  0.0713],
        [-0.0300, -0.0106,  0.0023,  ..., -0.0603,  0.0037, -0.0248],
        ...,
        [ 0.0364,  0.0097, -0.0182,  ...,  0.0173, -0.0161, -0.0254],
        [-0.0065,  0.0725,  0.0352,  ...,  0.0519, -0.0054,  0.0195],
        [-0.0476,  0.0198,  0.0194,  ..., -0.0524,  0.0383,  0.0226]])

encoder.encoders.5.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0006, -0.0074,  0.0212,  ..., -0.0550, -0.0296, -0.0098])

encoder.encoders.5.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.1602,  0.0717,  0.0137,  ..., -0.2305,  0.2217,  0.1017],
        [-0.3227, -0.1927,  0.0273,  ..., -0.0156, -0.1325, -0.0930],
        [ 0.1675, -0.2063, -0.1607,  ...,  0.1601,  0.0192,  0.0241],
        ...,
        [ 0.1531,  0.1029, -0.2599,  ...,  0.1251, -0.0466,  0.1195],
        [ 0.2143, -0.1026, -0.1698,  ...,  0.1458, -0.1619, -0.1827],
        [ 0.2396, -0.1063,  0.0088,  ..., -0.2766, -0.0326, -0.2489]])

encoder.encoders.5.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 0.0868, -0.3998,  0.2810,  ...,  0.0733, -0.3159, -0.4947],
        [ 0.0361,  0.1768, -0.0924,  ...,  0.1306,  0.0490,  0.2484],
        [ 0.0626,  0.0242, -0.2813,  ..., -0.0170, -0.0245, -0.3562],
        ...,
        [-0.4252, -0.2466, -0.0358,  ...,  0.2910, -0.1755, -0.0059],
        [-0.2778,  0.2259,  0.2264,  ...,  0.1231,  0.2206, -0.3134],
        [ 0.1348,  0.2773, -0.2409,  ...,  0.3349, -0.1556,  0.3041]])

encoder.encoders.5.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0505, -0.0062,  0.0484,  ...,  0.0450,  0.0037,  0.0745],
        [ 0.0154, -0.0652, -0.0417,  ...,  0.0432, -0.0505,  0.0340],
        [-0.0390,  0.0187, -0.0616,  ...,  0.0169, -0.0571,  0.0274],
        ...,
        [-0.0699, -0.0183, -0.0052,  ...,  0.0462, -0.0808,  0.0219],
        [-0.0188, -0.0858, -0.0057,  ...,  0.0429, -0.0391,  0.0353],
        [-0.0391,  0.0129, -0.0520,  ..., -0.0277, -0.0372, -0.0302]])

encoder.encoders.5.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0086, -0.0182,  0.0627,  ..., -0.0311,  0.0016,  0.0082],
        [-0.0673,  0.0392,  0.0510,  ..., -0.0097,  0.0356,  0.0015],
        [ 0.0261, -0.0178,  0.0103,  ..., -0.0096, -0.0179, -0.0036],
        ...,
        [-0.0301, -0.0190,  0.0142,  ...,  0.0286,  0.0437,  0.0165],
        [ 0.0102, -0.0416, -0.0143,  ...,  0.0289, -0.0193, -0.0261],
        [-0.0061,  0.0538,  0.0600,  ..., -0.0253, -0.0265,  0.0320]])

encoder.encoders.5.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0588, -0.0442,  0.0036,  ..., -0.0308,  0.0327, -0.0472],
        [ 0.0114,  0.0344,  0.0031,  ..., -0.0322, -0.0165, -0.0094],
        [ 0.0325,  0.0391, -0.0345,  ..., -0.0106,  0.0213, -0.0506],
        ...,
        [ 0.0061,  0.0702, -0.0086,  ...,  0.0108,  0.0108, -0.0034],
        [ 0.0095,  0.0419, -0.0265,  ...,  0.0083, -0.0315,  0.0485],
        [-0.0084, -0.0204,  0.0310,  ...,  0.0164,  0.0400, -0.0050]])

encoder.encoders.5.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.6888, 0.8184, 0.7220,  ..., 0.7105, 0.7386, 0.7453])

encoder.encoders.5.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0600,  0.0006, -0.0434,  ...,  0.0485,  0.0153,  0.0341])

encoder.encoders.5.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.7155, 0.7667, 0.7494,  ..., 0.7500, 0.7152, 0.8372])

encoder.encoders.5.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0377,  0.0251,  0.0214,  ...,  0.0323, -0.0192,  0.0394])

encoder.encoders.5.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.7228, 0.6922, 0.7084,  ..., 0.6627, 0.6804, 0.7303])

encoder.encoders.5.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0706,  0.0167, -0.0496,  ...,  0.1151,  0.0261,  0.0415])

encoder.encoders.5.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0239, -0.0186, -0.0057,  ...,  0.0073,  0.0216, -0.0164],
        [ 0.0147,  0.0322,  0.0027,  ...,  0.0497,  0.0039,  0.0080],
        [ 0.0044, -0.0047, -0.0175,  ...,  0.0146, -0.0124, -0.0232],
        ...,
        [ 0.0383, -0.0395, -0.0419,  ..., -0.0144, -0.0421, -0.0130],
        [ 0.0130, -0.0481,  0.0389,  ...,  0.0777,  0.0332,  0.0315],
        [ 0.0478, -0.0353,  0.0353,  ..., -0.0242, -0.0182,  0.0304]])

encoder.encoders.5.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0179,  0.0175,  0.0145,  ...,  0.0255,  0.0150,  0.0400],
        [ 0.0976, -0.0397,  0.1044,  ...,  0.0249, -0.0229, -0.0145],
        [ 0.0096,  0.1007, -0.0627,  ...,  0.0335, -0.0085,  0.0349],
        ...,
        [-0.0321,  0.0387, -0.0863,  ...,  0.0014,  0.0305, -0.0408],
        [-0.0570,  0.0021, -0.0016,  ...,  0.0046, -0.0249,  0.0205],
        [ 0.0238,  0.0521,  0.0007,  ...,  0.0047, -0.0224, -0.0141]])

encoder.encoders.5.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([0.8060, 1.0733, 1.1326,  ..., 1.1464, 1.0557, 1.1293])

encoder.encoders.5.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([ 0.0184, -0.0437,  0.0901,  ..., -0.1292, -0.1024,  0.0171])

encoder.encoders.5.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.0942],
         [ 0.0607],
         [-0.0101],
         ...,
         [-0.0075],
         [-0.0554],
         [ 0.0464]],

        [[ 0.0328],
         [ 0.0246],
         [ 0.0170],
         ...,
         [ 0.0166],
         [ 0.0264],
         [ 0.0357]],

        [[-0.0160],
         [-0.0306],
         [-0.0344],
         ...,
         [-0.0543],
         [-0.0018],
         [ 0.0532]],

        ...,

        [[-0.0100],
         [-0.0092],
         [ 0.0689],
         ...,
         [ 0.0950],
         [-0.0154],
         [ 0.0131]],

        [[-0.0290],
         [-0.0710],
         [-0.0445],
         ...,
         [ 0.0092],
         [ 0.0422],
         [ 0.0670]],

        [[-0.0016],
         [-0.0175],
         [-0.0251],
         ...,
         [ 0.0554],
         [-0.0658],
         [ 0.0412]]])

encoder.encoders.5.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0226, -0.0093, -0.0147,  ...,  0.0051,  0.0057,  0.0020]],

        [[-0.0125,  0.0016,  0.0053,  ...,  0.0105,  0.0063,  0.0103]],

        [[-0.0150, -0.0006, -0.0172,  ..., -0.0193, -0.0013, -0.0120]],

        ...,

        [[-0.0114,  0.0112,  0.0035,  ...,  0.0051, -0.0068,  0.0130]],

        [[-0.0248, -0.0224,  0.0046,  ..., -0.0127, -0.0036,  0.0098]],

        [[ 0.0015, -0.0037, -0.0039,  ...,  0.0103,  0.0075,  0.0037]]])

encoder.encoders.5.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.1307, 1.0060, 1.0552,  ..., 1.0292, 0.9950, 1.0032])

encoder.encoders.5.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0468, -0.0620, -0.0465,  ..., -0.0525, -0.0622, -0.0746])

encoder.encoders.5.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0163],
         [ 0.0144],
         [ 0.0263],
         ...,
         [ 0.0173],
         [ 0.0602],
         [ 0.0200]],

        [[-0.1342],
         [-0.0228],
         [-0.0326],
         ...,
         [ 0.0557],
         [ 0.0142],
         [-0.0076]],

        [[-0.0184],
         [-0.0072],
         [ 0.0408],
         ...,
         [ 0.0425],
         [ 0.0130],
         [ 0.0495]],

        ...,

        [[ 0.0946],
         [ 0.0160],
         [ 0.0010],
         ...,
         [-0.0343],
         [-0.0646],
         [-0.0106]],

        [[ 0.0014],
         [-0.0850],
         [-0.0563],
         ...,
         [ 0.0166],
         [-0.0129],
         [ 0.0017]],

        [[ 0.0749],
         [-0.0171],
         [ 0.0191],
         ...,
         [-0.0066],
         [ 0.0324],
         [-0.0083]]])

encoder.encoders.5.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([0.9306, 1.0805, 1.0824,  ..., 1.2826, 1.0331, 1.1647])

encoder.encoders.5.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.1615, -0.0156,  0.0462,  ..., -0.3028,  0.0232,  0.1970])

encoder.encoders.5.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-8.3384e-03,  6.3777e-02,  2.7431e-02,  ...,  3.2912e-02,
          4.6297e-02,  9.3201e-02],
        [-3.0668e-02, -1.8968e-02,  9.4172e-02,  ..., -1.2779e-02,
         -3.8621e-02, -9.0946e-03],
        [-8.0138e-03, -1.5567e-02, -2.1050e-02,  ..., -5.3078e-03,
         -5.7508e-02,  7.8514e-05],
        ...,
        [-3.0519e-02,  1.3942e-03,  2.0201e-02,  ..., -2.1278e-03,
         -3.2498e-03, -2.3055e-02],
        [-3.6345e-02, -1.8665e-02,  5.1156e-03,  ...,  6.5967e-02,
          5.2816e-02, -4.2396e-02],
        [ 2.8045e-03, -4.1249e-02, -7.2088e-02,  ..., -4.8894e-02,
          8.9065e-02, -5.7806e-02]])

encoder.encoders.5.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0295, -0.0129, -0.0044,  ..., -0.0188, -0.0310, -0.0348])

encoder.encoders.5.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 2.4040e-02,  9.9507e-04, -4.6140e-02,  ..., -2.9149e-02,
          1.7255e-02,  2.8045e-02],
        [-3.2807e-02,  1.3596e-02,  8.0372e-03,  ..., -3.2356e-03,
          7.1024e-04,  3.0076e-02],
        [ 2.9596e-02,  1.2661e-01,  1.0709e-02,  ..., -6.2009e-03,
          1.2627e-02,  1.7537e-02],
        ...,
        [ 1.7232e-03, -3.2427e-02, -3.6277e-03,  ...,  3.4784e-02,
         -2.8578e-02, -2.6528e-02],
        [-8.7781e-03,  9.7377e-03,  2.8768e-05,  ...,  2.7116e-02,
          5.2201e-02,  1.3775e-02],
        [ 1.8667e-02,  2.3006e-02,  2.3724e-02,  ..., -6.1115e-02,
          3.1482e-03, -6.9027e-03]])

encoder.encoders.5.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0075, -0.0033, -0.0063,  ..., -0.0398,  0.0007,  0.0154])

encoder.encoders.5.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2843, 1.2432, 1.2180,  ..., 1.2473, 1.2343, 1.2189])

encoder.encoders.5.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0115, -0.0173,  0.0249,  ..., -0.1204, -0.0208,  0.0654])

encoder.encoders.6.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.8236, 0.9522, 0.9999,  ..., 1.1181, 1.0002, 1.0226])

encoder.encoders.6.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.0769, -0.0254,  0.0903,  ..., -0.2261, -0.0559,  0.1224])

encoder.encoders.6.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0063, -0.0914, -0.0691,  ...,  0.0505,  0.0138,  0.0297],
        [-0.0009,  0.0579, -0.0046,  ...,  0.0114, -0.0657, -0.0110],
        [-0.0315,  0.0417, -0.0077,  ...,  0.0035,  0.0420,  0.0193],
        ...,
        [ 0.0134,  0.0731, -0.0006,  ...,  0.0295,  0.0261,  0.0096],
        [ 0.0640, -0.0592,  0.0015,  ...,  0.1202, -0.0702, -0.0760],
        [-0.0735,  0.0597, -0.1266,  ...,  0.0357,  0.0095, -0.0873]])

encoder.encoders.6.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0193, -0.0290, -0.0070,  ..., -0.0139, -0.0012, -0.0335])

encoder.encoders.6.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 2.1512e-02,  2.5546e-02,  1.7914e-02,  ...,  5.2683e-02,
          5.0032e-02, -6.0547e-03],
        [ 3.5361e-03, -2.6890e-02, -2.9723e-02,  ..., -1.9580e-02,
         -4.4008e-05,  6.6268e-02],
        [ 5.4220e-03, -3.5111e-02,  5.0662e-02,  ...,  2.6064e-02,
         -2.9627e-03,  4.5853e-02],
        ...,
        [-2.5406e-02,  8.2220e-03, -3.4233e-03,  ...,  5.9584e-02,
         -2.4098e-03,  3.5403e-04],
        [-3.7952e-02, -7.5463e-02,  1.3208e-02,  ..., -2.0078e-02,
          5.7802e-02,  4.1504e-02],
        [ 4.2731e-02,  1.2551e-02,  7.7939e-02,  ..., -5.0033e-02,
          4.2192e-02, -3.2392e-02]])

encoder.encoders.6.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0261, -0.0142, -0.0040,  ..., -0.0247, -0.0151,  0.0188])

encoder.encoders.6.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.1933, -0.1202,  0.0933,  ...,  0.0345,  0.0965,  0.2293],
        [ 0.2439, -0.1396, -0.0843,  ...,  0.1000,  0.2125,  0.2148],
        [-0.2144, -0.1005, -0.0122,  ...,  0.0251,  0.2361, -0.1584],
        ...,
        [-0.1586,  0.0514,  0.1450,  ...,  0.2159,  0.2933, -0.2566],
        [-0.1920,  0.2327, -0.3225,  ...,  0.1310, -0.0261, -0.1322],
        [ 0.0578,  0.0493,  0.2571,  ...,  0.0282, -0.2007,  0.1557]])

encoder.encoders.6.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-2.8919e-01, -2.8888e-01, -6.7176e-02,  ...,  1.8242e-01,
         -1.9633e-02,  6.7377e-02],
        [ 5.4125e-02, -2.1259e-01,  2.6959e-01,  ..., -9.3329e-03,
          1.7872e-01, -1.5649e-01],
        [-1.1693e-01, -1.8646e-01,  1.9682e-01,  ..., -5.9425e-02,
          2.3305e-02, -3.4704e-01],
        ...,
        [ 1.4427e-01,  1.7378e-01,  1.7529e-04,  ..., -1.9693e-01,
         -1.3678e-01,  2.1612e-01],
        [ 1.3085e-01,  1.1773e-01, -1.0512e-01,  ...,  1.1953e-02,
         -4.6998e-02, -1.2366e-01],
        [ 3.0752e-02,  1.1825e-01, -2.2164e-01,  ...,  2.0618e-01,
          3.3997e-01, -6.9637e-02]])

encoder.encoders.6.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0844, -0.0219, -0.0283,  ..., -0.0240,  0.0905,  0.0073],
        [ 0.0407, -0.0253, -0.0031,  ..., -0.0530,  0.0073,  0.0167],
        [ 0.0481,  0.0184, -0.0408,  ..., -0.0317, -0.0195,  0.0574],
        ...,
        [ 0.0434, -0.0204, -0.0119,  ...,  0.0052, -0.0252,  0.0442],
        [-0.0670,  0.0032,  0.0588,  ...,  0.0111,  0.0303, -0.0023],
        [-0.0200, -0.0594, -0.0205,  ..., -0.0142,  0.0039,  0.0075]])

encoder.encoders.6.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0367, -0.0130, -0.0353,  ...,  0.0270, -0.0029, -0.0564],
        [-0.0157, -0.0076, -0.0013,  ..., -0.0445,  0.0215, -0.0175],
        [-0.0079,  0.0348, -0.0214,  ..., -0.0414, -0.0261,  0.0506],
        ...,
        [ 0.0540, -0.0183, -0.0088,  ...,  0.0331, -0.0196,  0.0188],
        [ 0.0581,  0.0493, -0.0286,  ...,  0.0120,  0.0224,  0.0681],
        [ 0.0399,  0.0165,  0.0401,  ..., -0.0026, -0.0308,  0.0862]])

encoder.encoders.6.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0572, -0.0712,  0.0341,  ...,  0.0074,  0.0302, -0.0197],
        [-0.0518, -0.0178,  0.0196,  ..., -0.0374,  0.0252,  0.0046],
        [-0.0113,  0.1239, -0.0396,  ..., -0.0004,  0.0473, -0.0699],
        ...,
        [ 0.0391,  0.0073, -0.0010,  ..., -0.0039,  0.0339, -0.0545],
        [ 0.0314, -0.0377, -0.0259,  ...,  0.0240, -0.0683, -0.0287],
        [-0.0104, -0.0272, -0.0025,  ..., -0.0485,  0.0576, -0.0269]])

encoder.encoders.6.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.7315, 0.7286, 0.7237,  ..., 0.6717, 0.6809, 0.7033])

encoder.encoders.6.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0695, -0.0371, -0.0172,  ...,  0.0163,  0.0010, -0.0166])

encoder.encoders.6.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.7979, 0.8208, 0.7741,  ..., 0.8260, 0.8032, 0.7907])

encoder.encoders.6.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([0.0567, 0.0005, 0.0376,  ..., 0.0174, 0.0012, 0.0302])

encoder.encoders.6.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.7629, 0.7486, 0.7183,  ..., 0.6794, 0.6823, 0.7445])

encoder.encoders.6.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0633, -0.0189, -0.0296,  ...,  0.1201,  0.0122, -0.0460])

encoder.encoders.6.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0194,  0.0271,  0.0550,  ..., -0.0475,  0.0063,  0.0440],
        [ 0.0573, -0.0517, -0.0507,  ...,  0.0169, -0.0427,  0.0339],
        [-0.0417,  0.0230, -0.0082,  ..., -0.0120, -0.0124,  0.0333],
        ...,
        [-0.0574, -0.0041, -0.0510,  ...,  0.0190,  0.0321,  0.0148],
        [ 0.0118,  0.0776,  0.0357,  ...,  0.0158,  0.0552,  0.0099],
        [-0.0346,  0.0508,  0.0903,  ..., -0.0250, -0.0078, -0.0090]])

encoder.encoders.6.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0375, -0.0455, -0.0767,  ..., -0.0222, -0.0341,  0.0417],
        [-0.0297,  0.0300, -0.0147,  ...,  0.0142, -0.0334, -0.0223],
        [ 0.0353,  0.0310,  0.0042,  ..., -0.0188, -0.0081, -0.0444],
        ...,
        [-0.0730, -0.0587, -0.0399,  ...,  0.0348,  0.0568,  0.0387],
        [-0.0878,  0.0072, -0.0928,  ...,  0.0140, -0.0284,  0.0237],
        [ 0.0543,  0.0346,  0.0437,  ..., -0.0044, -0.0325, -0.0148]])

encoder.encoders.6.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([0.9172, 1.1115, 1.0746,  ..., 1.1327, 1.0357, 1.0902])

encoder.encoders.6.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0306,  0.0489, -0.0464,  ..., -0.0843, -0.0008,  0.0988])

encoder.encoders.6.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0573],
         [-0.1199],
         [-0.0825],
         ...,
         [-0.0376],
         [ 0.0121],
         [ 0.0022]],

        [[ 0.0594],
         [ 0.1142],
         [ 0.0666],
         ...,
         [-0.0567],
         [-0.0269],
         [ 0.0783]],

        [[ 0.0726],
         [ 0.0496],
         [ 0.0134],
         ...,
         [ 0.0128],
         [-0.0034],
         [ 0.0443]],

        ...,

        [[-0.0341],
         [ 0.0596],
         [-0.0144],
         ...,
         [ 0.0536],
         [-0.1091],
         [-0.0207]],

        [[-0.0613],
         [ 0.0123],
         [-0.0200],
         ...,
         [-0.0514],
         [ 0.0110],
         [ 0.0543]],

        [[ 0.0209],
         [ 0.0066],
         [ 0.0504],
         ...,
         [-0.0263],
         [ 0.1199],
         [-0.0635]]])

encoder.encoders.6.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-8.8500e-03, -2.4868e-03,  4.2393e-03,  ..., -9.4015e-03,
           1.0960e-02,  7.3625e-03]],

        [[ 8.6205e-03, -4.9069e-03,  1.6492e-05,  ..., -1.3809e-03,
          -3.2164e-03,  2.0534e-02]],

        [[-2.2845e-03,  6.7755e-03, -3.7139e-02,  ..., -6.0706e-03,
           1.0802e-02,  2.0979e-02]],

        ...,

        [[ 6.3178e-03,  2.0540e-02,  9.4596e-03,  ..., -1.9649e-02,
          -6.7136e-03, -2.3115e-02]],

        [[ 6.0282e-02,  3.1015e-02,  2.6853e-02,  ..., -1.0164e-04,
           1.8289e-03,  1.9431e-02]],

        [[ 1.9207e-03,  4.0719e-03, -7.4867e-05,  ...,  1.4648e-02,
           5.5926e-03,  2.2744e-02]]])

encoder.encoders.6.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0283, 1.0095, 1.0041,  ..., 0.9742, 0.9992, 0.9774])

encoder.encoders.6.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0525, -0.0458, -0.0332,  ..., -0.0565, -0.0461, -0.0573])

encoder.encoders.6.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0078],
         [-0.0013],
         [ 0.0856],
         ...,
         [-0.0937],
         [-0.0607],
         [ 0.0343]],

        [[ 0.0412],
         [-0.1012],
         [ 0.0339],
         ...,
         [-0.0870],
         [-0.0078],
         [ 0.0072]],

        [[-0.0210],
         [ 0.0637],
         [-0.0429],
         ...,
         [-0.0253],
         [-0.0161],
         [ 0.0191]],

        ...,

        [[ 0.0299],
         [-0.0020],
         [ 0.0173],
         ...,
         [ 0.0425],
         [-0.0022],
         [-0.0559]],

        [[ 0.0237],
         [ 0.0515],
         [ 0.0240],
         ...,
         [ 0.0462],
         [ 0.0060],
         [ 0.0385]],

        [[-0.0229],
         [-0.0249],
         [ 0.0837],
         ...,
         [-0.0322],
         [-0.1170],
         [-0.0211]]])

encoder.encoders.6.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.0207, 1.0095, 1.0886,  ..., 1.0482, 1.0354, 1.2011])

encoder.encoders.6.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.2019, -0.0382,  0.0983,  ..., -0.1134, -0.0774,  0.1630])

encoder.encoders.6.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0372,  0.0297, -0.0741,  ...,  0.0282, -0.0251,  0.0111],
        [-0.0500,  0.0155, -0.0221,  ..., -0.0210,  0.1015,  0.0331],
        [-0.0532, -0.0238,  0.0007,  ..., -0.0663, -0.0779, -0.0589],
        ...,
        [-0.0163, -0.0117,  0.0265,  ...,  0.0378, -0.0249,  0.0628],
        [-0.0413, -0.0090,  0.0087,  ...,  0.0666,  0.0161, -0.0114],
        [-0.0337, -0.0048,  0.0375,  ...,  0.0200, -0.0207,  0.0012]])

encoder.encoders.6.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0332,  0.0016, -0.0152,  ..., -0.0346, -0.0266, -0.0413])

encoder.encoders.6.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0275, -0.0233,  0.0049,  ..., -0.0779,  0.0456,  0.0235],
        [ 0.0615,  0.0085,  0.0284,  ..., -0.0057, -0.0022, -0.0352],
        [-0.0398,  0.0181, -0.0864,  ...,  0.0617, -0.0210,  0.0098],
        ...,
        [ 0.0409, -0.0390,  0.0031,  ..., -0.0043, -0.0531,  0.0022],
        [ 0.0547,  0.0158,  0.0194,  ..., -0.0459, -0.0061, -0.0202],
        [ 0.0002,  0.0600,  0.0298,  ...,  0.0109, -0.0469,  0.0577]])

encoder.encoders.6.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0085, -0.0186, -0.0033,  ..., -0.0098, -0.0173, -0.0034])

encoder.encoders.6.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2257, 1.2350, 1.2008,  ..., 1.2380, 1.2387, 1.2130])

encoder.encoders.6.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0432, -0.0041,  0.0305,  ..., -0.0582, -0.0232,  0.0712])

encoder.encoders.7.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.9595, 0.9737, 0.9785,  ..., 0.9655, 0.9523, 1.0621])

encoder.encoders.7.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.1475, -0.0187,  0.0585,  ..., -0.0589, -0.0273,  0.1550])

encoder.encoders.7.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0132, -0.0385, -0.0032,  ...,  0.0452,  0.0456, -0.0311],
        [ 0.0085,  0.0458,  0.0525,  ...,  0.0183, -0.0133,  0.0285],
        [-0.0703, -0.0612, -0.0072,  ...,  0.0161,  0.0148, -0.0350],
        ...,
        [-0.0004, -0.0417, -0.0510,  ...,  0.0623,  0.0621, -0.0232],
        [ 0.0122, -0.0574,  0.0086,  ..., -0.0066, -0.0097,  0.0347],
        [ 0.0182, -0.0568, -0.0687,  ...,  0.1054, -0.0130, -0.0188]])

encoder.encoders.7.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0230, -0.0483, -0.0113,  ..., -0.0008, -0.0251, -0.0047])

encoder.encoders.7.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0075, -0.0023,  0.0088,  ..., -0.0036,  0.0186,  0.0629],
        [ 0.0300, -0.0173, -0.0072,  ..., -0.0270,  0.0310, -0.0382],
        [-0.0149,  0.0099, -0.0258,  ..., -0.0253,  0.0066, -0.0541],
        ...,
        [ 0.0138, -0.0073, -0.0380,  ..., -0.0301,  0.0076,  0.0404],
        [-0.0184,  0.0147, -0.0481,  ..., -0.0056,  0.0085, -0.0667],
        [ 0.0382, -0.0551, -0.0622,  ..., -0.0219,  0.0270, -0.0322]])

encoder.encoders.7.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0127,  0.0177,  0.0255,  ..., -0.0277, -0.0208,  0.0006])

encoder.encoders.7.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.0725,  0.0973, -0.1124,  ...,  0.1524,  0.1053, -0.0880],
        [ 0.1258,  0.1457, -0.2178,  ..., -0.2483,  0.1990, -0.3778],
        [-0.2807, -0.2174,  0.1315,  ..., -0.0337,  0.1723,  0.0338],
        ...,
        [ 0.0206,  0.2194,  0.0033,  ...,  0.1435,  0.2555,  0.0807],
        [ 0.1684,  0.1773,  0.2273,  ...,  0.2362, -0.1250, -0.1742],
        [ 0.0709, -0.1764,  0.1999,  ..., -0.0039,  0.1705,  0.0537]])

encoder.encoders.7.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.3808, -0.0011, -0.0977,  ..., -0.0273,  0.1056,  0.1083],
        [-0.1086, -0.3441,  0.1352,  ..., -0.0728,  0.0068,  0.2511],
        [ 0.3097, -0.1054,  0.3877,  ...,  0.1606, -0.2165, -0.0621],
        ...,
        [-0.0547,  0.0223, -0.1920,  ..., -0.3267, -0.1546,  0.2222],
        [-0.3364, -0.0437, -0.0531,  ...,  0.0419, -0.1918,  0.0932],
        [ 0.0358,  0.1624,  0.0710,  ..., -0.1963, -0.0768, -0.1324]])

encoder.encoders.7.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0117, -0.0199, -0.0205,  ..., -0.0894,  0.0469,  0.0150],
        [-0.0392, -0.0038, -0.0048,  ..., -0.0039,  0.0086,  0.0260],
        [-0.0643, -0.0207, -0.0812,  ..., -0.0065,  0.0346,  0.0312],
        ...,
        [-0.0387, -0.0137, -0.0113,  ..., -0.0011, -0.0324,  0.0144],
        [ 0.0149,  0.0103, -0.0168,  ...,  0.0151, -0.0369, -0.0386],
        [-0.0846, -0.0299, -0.0235,  ..., -0.0119, -0.0287,  0.0534]])

encoder.encoders.7.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-5.2695e-02, -6.1644e-02, -1.1210e-02,  ...,  6.0902e-02,
          1.7661e-02,  7.0567e-02],
        [-4.7457e-02, -4.2750e-02, -1.0050e-01,  ..., -2.7872e-02,
         -1.9251e-02,  2.6219e-02],
        [ 2.0414e-02, -1.1940e-01, -9.7908e-03,  ..., -3.8470e-02,
          2.0766e-02,  6.9878e-02],
        ...,
        [-2.5621e-02, -1.1178e-01, -2.7910e-02,  ...,  6.6702e-03,
         -2.1877e-02, -4.4908e-02],
        [ 5.8415e-02, -4.1974e-02,  8.8986e-03,  ...,  1.3834e-02,
         -1.6990e-02, -5.2910e-03],
        [-7.9208e-02, -6.0716e-02, -6.2074e-05,  ...,  1.2622e-02,
         -3.6896e-02,  7.7058e-02]])

encoder.encoders.7.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0092,  0.0372,  0.0129,  ..., -0.0211, -0.0095, -0.0521],
        [ 0.0150, -0.0512,  0.0145,  ..., -0.0454, -0.0214, -0.0653],
        [-0.0840,  0.0576, -0.0296,  ..., -0.0091,  0.0225,  0.0657],
        ...,
        [-0.0438,  0.0025,  0.0095,  ..., -0.0208, -0.0357,  0.0947],
        [ 0.0153,  0.0429, -0.0240,  ..., -0.0026, -0.0597,  0.0185],
        [-0.0314, -0.0354,  0.0264,  ..., -0.0317,  0.0436,  0.0003]])

encoder.encoders.7.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.7364, 0.7510, 0.7290,  ..., 0.7903, 0.7286, 0.7546])

encoder.encoders.7.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0225,  0.0010, -0.0195,  ...,  0.0349,  0.0368, -0.0376])

encoder.encoders.7.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8258, 0.8399, 0.7911,  ..., 0.8082, 0.7759, 0.8044])

encoder.encoders.7.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0040,  0.0131,  0.0054,  ...,  0.0208, -0.0249, -0.0008])

encoder.encoders.7.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.7495, 0.7101, 0.6950,  ..., 0.6865, 0.7043, 0.7273])

encoder.encoders.7.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0221, -0.0055, -0.0248,  ...,  0.0543,  0.0289, -0.0878])

encoder.encoders.7.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0233, -0.0467,  0.0223,  ...,  0.0127, -0.0214, -0.0740],
        [ 0.0020, -0.0156, -0.0094,  ..., -0.0888, -0.0056,  0.0263],
        [-0.0080,  0.0508,  0.0296,  ..., -0.0811,  0.0087,  0.0491],
        ...,
        [ 0.0057, -0.0260, -0.0092,  ..., -0.0601, -0.0032,  0.0294],
        [ 0.0036, -0.0156, -0.0088,  ..., -0.0571,  0.0273, -0.0416],
        [-0.0188, -0.0420, -0.0158,  ..., -0.0703,  0.0025, -0.0153]])

encoder.encoders.7.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0743,  0.0385,  0.0353,  ..., -0.0569, -0.0261,  0.0203],
        [-0.0584, -0.0120, -0.0622,  ..., -0.0565,  0.0209, -0.0224],
        [ 0.0236,  0.0070, -0.0185,  ...,  0.0721,  0.0081,  0.0109],
        ...,
        [ 0.0140,  0.0200, -0.0181,  ..., -0.0118,  0.0152,  0.0071],
        [-0.0098, -0.0154,  0.0025,  ..., -0.0006, -0.0017, -0.0408],
        [-0.0072, -0.0386,  0.0262,  ..., -0.0050,  0.0088,  0.0525]])

encoder.encoders.7.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.0848, 1.1187, 1.0824,  ..., 1.1748, 1.0923, 1.1524])

encoder.encoders.7.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0334,  0.0778,  0.0613,  ..., -0.0730, -0.0392,  0.1066])

encoder.encoders.7.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0301],
         [ 0.0236],
         [ 0.0082],
         ...,
         [ 0.0075],
         [-0.0263],
         [ 0.0306]],

        [[ 0.0509],
         [-0.0040],
         [-0.0055],
         ...,
         [ 0.0144],
         [-0.0411],
         [ 0.0576]],

        [[ 0.0388],
         [-0.0203],
         [-0.0358],
         ...,
         [-0.0210],
         [-0.0439],
         [ 0.0105]],

        ...,

        [[ 0.0654],
         [ 0.0592],
         [-0.0182],
         ...,
         [ 0.0178],
         [-0.0746],
         [ 0.0196]],

        [[-0.0151],
         [-0.0953],
         [-0.0894],
         ...,
         [ 0.0073],
         [ 0.0079],
         [-0.0662]],

        [[ 0.0200],
         [ 0.0162],
         [ 0.0074],
         ...,
         [-0.0226],
         [-0.0003],
         [ 0.0011]]])

encoder.encoders.7.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0403, -0.0145, -0.0075,  ..., -0.0259, -0.0012, -0.0151]],

        [[-0.0375, -0.0020, -0.0111,  ...,  0.0014, -0.0052, -0.0125]],

        [[-0.0436, -0.0601, -0.0165,  ..., -0.0271, -0.0038,  0.0232]],

        ...,

        [[ 0.0278, -0.0042,  0.0092,  ...,  0.0332,  0.0056,  0.0436]],

        [[ 0.0180,  0.0124, -0.0046,  ...,  0.0034, -0.0015,  0.0230]],

        [[ 0.0205,  0.0173, -0.0065,  ...,  0.0055,  0.0107, -0.0034]]])

encoder.encoders.7.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9848, 1.0016, 0.9962,  ..., 1.0234, 1.0132, 1.0144])

encoder.encoders.7.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0262, -0.0148, -0.0029,  ..., -0.0156, -0.0402, -0.0322])

encoder.encoders.7.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0545],
         [-0.0190],
         [-0.0231],
         ...,
         [-0.0321],
         [-0.0565],
         [ 0.0330]],

        [[-0.0049],
         [ 0.0249],
         [-0.0362],
         ...,
         [-0.0033],
         [-0.0210],
         [ 0.0211]],

        [[-0.0491],
         [ 0.1001],
         [-0.0270],
         ...,
         [-0.0205],
         [-0.0493],
         [ 0.0317]],

        ...,

        [[-0.0474],
         [-0.0403],
         [-0.0141],
         ...,
         [-0.0014],
         [ 0.0516],
         [-0.0341]],

        [[ 0.0041],
         [-0.0304],
         [ 0.0179],
         ...,
         [-0.0488],
         [-0.0030],
         [-0.0173]],

        [[ 0.0213],
         [ 0.0280],
         [-0.0215],
         ...,
         [-0.0120],
         [-0.0225],
         [ 0.0661]]])

encoder.encoders.7.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.0667, 1.0466, 1.0518,  ..., 1.1610, 1.0461, 1.1245])

encoder.encoders.7.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.0513,  0.0061,  0.0543,  ..., -0.2246, -0.1293,  0.1502])

encoder.encoders.7.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-4.2632e-02,  1.2024e-02,  1.2835e-02,  ..., -5.0938e-03,
          1.5091e-02,  2.4767e-02],
        [ 5.0043e-02, -4.1360e-02,  7.1690e-03,  ...,  4.8440e-02,
          3.2668e-02, -6.7402e-02],
        [-5.7145e-02,  3.1407e-02,  4.1360e-02,  ...,  4.6693e-03,
          3.2989e-02, -5.4447e-02],
        ...,
        [-6.4922e-03,  9.4877e-03,  6.6340e-03,  ...,  1.0542e-02,
          2.1543e-06,  1.0277e-02],
        [-4.5422e-02,  4.1897e-02,  9.2376e-02,  ...,  1.8512e-02,
         -4.2710e-02,  1.2197e-02],
        [-4.9295e-02,  3.5269e-02,  1.0181e-01,  ...,  1.7370e-02,
          3.9149e-02,  2.8151e-02]])

encoder.encoders.7.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0369, -0.0018,  0.0039,  ..., -0.0066,  0.0012,  0.0112])

encoder.encoders.7.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0264,  0.0071, -0.0101,  ...,  0.0592, -0.0524,  0.0025],
        [ 0.0138, -0.0326, -0.0026,  ...,  0.0385, -0.0364,  0.0161],
        [ 0.0175, -0.0192, -0.0533,  ...,  0.0265,  0.0227,  0.0253],
        ...,
        [-0.0523, -0.0286, -0.0848,  ...,  0.0503, -0.0273, -0.0074],
        [ 0.0183, -0.0063,  0.0162,  ...,  0.0082, -0.0400, -0.0725],
        [-0.0178, -0.0042, -0.0014,  ...,  0.0012, -0.0169, -0.0307]])

encoder.encoders.7.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0061, -0.0033,  0.0028,  ...,  0.0018, -0.0232,  0.0065])

encoder.encoders.7.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2231, 1.2283, 1.2721,  ..., 1.2544, 1.2752, 1.2373])

encoder.encoders.7.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0158,  0.0443,  0.0903,  ..., -0.0949, -0.0867,  0.0649])

encoder.encoders.8.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.9700, 0.9687, 0.9658,  ..., 1.0490, 0.8994, 1.0009])

encoder.encoders.8.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.0385,  0.1079,  0.0186,  ..., -0.1881, -0.0908,  0.1236])

encoder.encoders.8.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0314, -0.0526,  0.0126,  ...,  0.0360, -0.0155, -0.0774],
        [-0.0364,  0.0164,  0.0321,  ...,  0.0449,  0.0673, -0.0106],
        [-0.0612, -0.0560, -0.0447,  ..., -0.0260,  0.0204,  0.0360],
        ...,
        [-0.0776, -0.0674,  0.0135,  ..., -0.0487,  0.0379, -0.0074],
        [-0.0500,  0.0132,  0.0490,  ...,  0.0644, -0.0186, -0.0300],
        [-0.0057,  0.0080,  0.0087,  ..., -0.0449, -0.0319,  0.0283]])

encoder.encoders.8.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0420, -0.0068,  0.0113,  ..., -0.0085, -0.0090, -0.0457])

encoder.encoders.8.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.1107,  0.0008, -0.0121,  ...,  0.0609, -0.0435, -0.0450],
        [-0.0163,  0.0194, -0.0346,  ...,  0.0166, -0.0605,  0.0007],
        [ 0.0141,  0.0112,  0.0492,  ...,  0.0156,  0.0105,  0.0031],
        ...,
        [-0.0279,  0.0175,  0.0567,  ...,  0.0013,  0.0264, -0.0516],
        [ 0.0139,  0.0062,  0.0284,  ...,  0.0470,  0.0445,  0.0312],
        [-0.0142,  0.0348, -0.0050,  ...,  0.0328,  0.0079,  0.0239]])

encoder.encoders.8.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0048,  0.0225,  0.0348,  ..., -0.0127, -0.0436,  0.0343])

encoder.encoders.8.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.0493, -0.0685,  0.1214,  ...,  0.1882,  0.2427,  0.0718],
        [ 0.1944, -0.0337, -0.2293,  ..., -0.1033, -0.1172, -0.0900],
        [-0.1974, -0.1446, -0.1476,  ..., -0.0337,  0.0060, -0.1593],
        ...,
        [ 0.0863,  0.1188, -0.2643,  ..., -0.3197,  0.1181, -0.1487],
        [ 0.2808, -0.1894, -0.0234,  ...,  0.0605,  0.1440,  0.1637],
        [ 0.0059, -0.0897, -0.0432,  ...,  0.0280, -0.1817, -0.1018]])

encoder.encoders.8.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.1659, -0.0412, -0.1119,  ..., -0.1076,  0.1651, -0.2809],
        [-0.2384, -0.1389, -0.2016,  ...,  0.3483,  0.2303,  0.0376],
        [ 0.0767, -0.1529, -0.3050,  ..., -0.2774, -0.1325,  0.1155],
        ...,
        [ 0.0925,  0.1954, -0.1225,  ...,  0.3454,  0.3573,  0.3324],
        [ 0.1840,  0.0293, -0.1164,  ...,  0.2656,  0.1419, -0.1196],
        [ 0.2119, -0.1642, -0.2305,  ..., -0.0618, -0.3051, -0.2757]])

encoder.encoders.8.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0277, -0.0036,  0.0019,  ...,  0.0019,  0.0889,  0.0283],
        [-0.0057,  0.0285,  0.0713,  ..., -0.0231, -0.0150, -0.0021],
        [ 0.0576, -0.0473,  0.0878,  ..., -0.0514,  0.0230, -0.0624],
        ...,
        [-0.0003,  0.0367,  0.0401,  ...,  0.0885,  0.0564, -0.0443],
        [ 0.0658,  0.0618,  0.0356,  ...,  0.1036, -0.0052, -0.0344],
        [ 0.0601,  0.0841,  0.0512,  ...,  0.0113, -0.0480, -0.0524]])

encoder.encoders.8.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.1115, -0.0156, -0.1044,  ..., -0.0431,  0.0116, -0.0208],
        [ 0.0046, -0.0598, -0.0091,  ...,  0.0109, -0.0199, -0.0587],
        [ 0.0429,  0.0394, -0.0476,  ..., -0.1293,  0.0269,  0.0848],
        ...,
        [-0.0210,  0.0291, -0.0322,  ..., -0.0630,  0.0379, -0.0231],
        [-0.0009,  0.0328, -0.0023,  ..., -0.0478, -0.0440, -0.0248],
        [-0.0330,  0.0226, -0.0106,  ...,  0.0606,  0.0401, -0.0348]])

encoder.encoders.8.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0050,  0.0005,  0.0256,  ..., -0.0528, -0.0002,  0.0279],
        [-0.0085,  0.0651,  0.0252,  ...,  0.0301, -0.0204,  0.0442],
        [-0.0321,  0.0717,  0.0537,  ..., -0.0350, -0.0197,  0.0257],
        ...,
        [ 0.0215,  0.0418, -0.0050,  ..., -0.0409, -0.0232,  0.0444],
        [-0.0507,  0.0566,  0.0432,  ...,  0.0266, -0.0312, -0.0024],
        [ 0.0369,  0.0091, -0.0066,  ..., -0.0031,  0.0013, -0.0041]])

encoder.encoders.8.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.8410, 0.8053, 0.7764,  ..., 0.8677, 0.8325, 0.8458])

encoder.encoders.8.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0161, -0.0451, -0.1341,  ...,  0.0105,  0.0376,  0.0155])

encoder.encoders.8.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8856, 0.8448, 0.8208,  ..., 0.8654, 0.8622, 0.8561])

encoder.encoders.8.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0147, -0.0162,  0.0135,  ..., -0.0072,  0.0090,  0.0104])

encoder.encoders.8.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6366, 0.6077, 0.5585,  ..., 0.5673, 0.5784, 0.6170])

encoder.encoders.8.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0034, -0.0132, -0.1366,  ...,  0.0660,  0.0798, -0.0567])

encoder.encoders.8.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0359,  0.0427,  0.0332,  ...,  0.0236, -0.0259, -0.0710],
        [-0.0117,  0.0031, -0.0139,  ...,  0.0335, -0.0327, -0.0310],
        [-0.0556, -0.0217,  0.0374,  ..., -0.0328,  0.0077, -0.0762],
        ...,
        [ 0.0266,  0.0294,  0.0236,  ..., -0.0277,  0.0299,  0.0105],
        [-0.0704,  0.0549,  0.0092,  ..., -0.0148, -0.0237, -0.0308],
        [-0.0168, -0.0407,  0.0095,  ..., -0.0059, -0.0233,  0.0171]])

encoder.encoders.8.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0647, -0.0350, -0.0572,  ..., -0.0043, -0.0073,  0.0069],
        [-0.0088,  0.0379, -0.0261,  ..., -0.0034, -0.0273,  0.0263],
        [-0.0265,  0.0171,  0.0119,  ...,  0.0173,  0.0190, -0.0110],
        ...,
        [-0.0096, -0.0792, -0.0418,  ..., -0.0238, -0.0269,  0.0021],
        [-0.0763, -0.0295, -0.0857,  ...,  0.0276,  0.0288, -0.0334],
        [-0.0762, -0.1831,  0.0034,  ...,  0.0430, -0.0066,  0.0323]])

encoder.encoders.8.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.2399, 1.0571, 1.0549,  ..., 1.1525, 1.1244, 1.1577])

encoder.encoders.8.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0570,  0.0599,  0.0271,  ..., -0.0157, -0.1221,  0.0086])

encoder.encoders.8.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.0826],
         [-0.0079],
         [ 0.0386],
         ...,
         [-0.0398],
         [-0.0418],
         [ 0.0125]],

        [[ 0.0179],
         [-0.0388],
         [-0.0078],
         ...,
         [ 0.0057],
         [ 0.0226],
         [-0.0447]],

        [[-0.0532],
         [-0.0554],
         [ 0.0077],
         ...,
         [ 0.0143],
         [-0.0003],
         [ 0.0325]],

        ...,

        [[ 0.0834],
         [-0.0162],
         [ 0.0167],
         ...,
         [ 0.0104],
         [ 0.0864],
         [ 0.0278]],

        [[ 0.0749],
         [-0.0115],
         [-0.0167],
         ...,
         [ 0.0348],
         [ 0.0669],
         [ 0.0017]],

        [[-0.0759],
         [-0.0226],
         [-0.0132],
         ...,
         [-0.0690],
         [-0.0374],
         [ 0.0158]]])

encoder.encoders.8.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[ 0.0185, -0.0053, -0.0025,  ..., -0.0068,  0.0106, -0.0065]],

        [[ 0.0119,  0.0060,  0.0183,  ...,  0.0083, -0.0116,  0.0138]],

        [[-0.0053,  0.0048,  0.0006,  ...,  0.0117,  0.0055,  0.0233]],

        ...,

        [[ 0.0091,  0.0008,  0.0077,  ..., -0.0073, -0.0219,  0.0013]],

        [[-0.0159, -0.0225, -0.0159,  ..., -0.0029, -0.0066, -0.0325]],

        [[ 0.0279, -0.0090,  0.0122,  ...,  0.0106,  0.0112, -0.0075]]])

encoder.encoders.8.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9925, 1.0346, 1.0291,  ..., 1.0326, 0.9714, 1.0258])

encoder.encoders.8.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0240, -0.0162, -0.0182,  ..., -0.0501, -0.0214, -0.0124])

encoder.encoders.8.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 8.0247e-02],
         [-2.4402e-02],
         [ 6.1868e-02],
         ...,
         [-2.4966e-02],
         [ 2.3694e-02],
         [-3.4829e-02]],

        [[ 6.8538e-02],
         [ 1.9371e-02],
         [ 4.3052e-02],
         ...,
         [ 6.7556e-02],
         [ 1.7291e-02],
         [-3.3007e-02]],

        [[ 9.8911e-03],
         [ 5.8798e-02],
         [-4.0883e-02],
         ...,
         [ 1.7399e-02],
         [ 3.7556e-05],
         [ 4.9581e-03]],

        ...,

        [[-6.4004e-02],
         [ 3.7918e-02],
         [ 2.7692e-02],
         ...,
         [ 1.4962e-02],
         [ 2.1927e-02],
         [-1.0178e-01]],

        [[ 2.1868e-02],
         [ 4.0338e-02],
         [ 9.9663e-03],
         ...,
         [ 3.7797e-02],
         [-4.4606e-03],
         [ 3.1104e-02]],

        [[ 8.5174e-02],
         [ 9.9871e-03],
         [ 1.5953e-02],
         ...,
         [-7.5021e-02],
         [-3.0196e-02],
         [-5.7491e-02]]])

encoder.encoders.8.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.1347, 1.0471, 1.4219,  ..., 1.1021, 1.2705, 1.1993])

encoder.encoders.8.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([ 0.1804, -0.0648,  0.5051,  ..., -0.1176, -0.4101,  0.2867])

encoder.encoders.8.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0102,  0.0178,  0.0080,  ...,  0.0827,  0.0807,  0.0414],
        [-0.0156,  0.0496, -0.0086,  ..., -0.0461,  0.0202, -0.0548],
        [-0.0188,  0.0114,  0.0087,  ...,  0.0257,  0.0020, -0.0501],
        ...,
        [-0.0500, -0.0397, -0.0021,  ...,  0.0221,  0.0131, -0.0034],
        [ 0.0490, -0.0313, -0.0335,  ...,  0.0575,  0.0393, -0.0320],
        [-0.0554,  0.0341, -0.0428,  ...,  0.0558,  0.0490,  0.0037]])

encoder.encoders.8.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0102, -0.0379, -0.0071,  ..., -0.0272,  0.0162,  0.0088])

encoder.encoders.8.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 5.6833e-03, -7.7231e-03, -1.2663e-02,  ...,  3.0512e-03,
          2.1523e-06,  2.7242e-02],
        [-1.1580e-02, -6.9692e-03, -4.0378e-02,  ...,  3.2335e-02,
          2.5782e-02, -1.7267e-02],
        [ 1.7040e-02,  3.0208e-02, -1.5794e-02,  ..., -8.8221e-02,
          2.5007e-02,  1.9126e-02],
        ...,
        [-2.4492e-02, -2.4164e-02, -1.1181e-02,  ...,  3.3419e-02,
          8.1487e-02,  4.0197e-02],
        [-1.0717e-02, -1.5822e-02, -2.4416e-02,  ...,  1.6620e-02,
          2.6939e-02, -9.4816e-03],
        [ 4.6066e-02, -4.4111e-02,  4.9876e-03,  ...,  2.3437e-02,
         -1.8408e-02,  9.3248e-03]])

encoder.encoders.8.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0251,  0.0054,  0.0388,  ...,  0.0078, -0.0013,  0.0030])

encoder.encoders.8.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.1523, 1.2346, 1.4056,  ..., 1.2351, 1.2755, 1.2211])

encoder.encoders.8.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0008,  0.0409,  0.3218,  ..., -0.0835, -0.1290,  0.0545])

encoder.encoders.9.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.0665, 0.9327, 1.1634,  ..., 1.0743, 1.0439, 0.9719])

encoder.encoders.9.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.1335,  0.0258,  0.3201,  ..., -0.2154, -0.2689,  0.1429])

encoder.encoders.9.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0436, -0.0050, -0.0744,  ...,  0.0318, -0.0180, -0.0711],
        [ 0.0710,  0.0187, -0.0030,  ...,  0.0220,  0.0033,  0.0009],
        [ 0.0053,  0.0241, -0.0316,  ...,  0.0240,  0.0207,  0.0018],
        ...,
        [-0.0426, -0.0107,  0.0794,  ...,  0.0386, -0.0426,  0.0152],
        [-0.0947, -0.0266, -0.0663,  ..., -0.0340,  0.0643,  0.0188],
        [ 0.0281, -0.0446, -0.0111,  ...,  0.0594, -0.0600,  0.0514]])

encoder.encoders.9.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0339, -0.0142, -0.0219,  ..., -0.0093, -0.0026,  0.0090])

encoder.encoders.9.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0531, -0.0448, -0.0047,  ...,  0.0438, -0.0260, -0.0262],
        [ 0.0187, -0.0218,  0.0482,  ...,  0.0095, -0.0258,  0.0240],
        [-0.0075, -0.0037, -0.0451,  ...,  0.0098, -0.0144,  0.0109],
        ...,
        [-0.0332, -0.0609, -0.0301,  ...,  0.0583, -0.0279, -0.0538],
        [ 0.0065,  0.0078, -0.0037,  ..., -0.0446, -0.0306, -0.0315],
        [ 0.0037,  0.0247,  0.0107,  ...,  0.0368,  0.0321,  0.0300]])

encoder.encoders.9.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0339,  0.0343,  0.0632,  ..., -0.0325, -0.0236,  0.0178])

encoder.encoders.9.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.2433, -0.0242,  0.1101,  ..., -0.0298,  0.0130,  0.0693],
        [ 0.1665, -0.1103,  0.1541,  ...,  0.0222, -0.1085, -0.2821],
        [-0.2454, -0.3158,  0.2386,  ..., -0.1174, -0.0345, -0.2603],
        ...,
        [-0.1550, -0.2632,  0.1335,  ..., -0.2719, -0.1654, -0.1174],
        [ 0.0585, -0.2099, -0.1182,  ...,  0.1614,  0.0688, -0.0162],
        [ 0.0535,  0.0750, -0.1133,  ...,  0.0376, -0.1864,  0.1401]])

encoder.encoders.9.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 0.1735, -0.0786,  0.0297,  ..., -0.0936, -0.0288,  0.1406],
        [ 0.0946,  0.1366, -0.0336,  ...,  0.2427,  0.2956,  0.2565],
        [ 0.0640,  0.2735, -0.2271,  ..., -0.2453,  0.0809,  0.1696],
        ...,
        [-0.0996,  0.2834, -0.2010,  ...,  0.3864,  0.0043,  0.0881],
        [-0.0133, -0.0362, -0.1852,  ...,  0.0827, -0.0929,  0.2154],
        [ 0.1365,  0.1600,  0.0511,  ..., -0.2413,  0.1344,  0.0137]])

encoder.encoders.9.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0014, -0.0310,  0.0087,  ...,  0.0474,  0.0485,  0.0426],
        [-0.0113,  0.0404,  0.0199,  ..., -0.0083, -0.0262, -0.0514],
        [-0.0973,  0.0388,  0.0157,  ...,  0.0375,  0.0163, -0.0263],
        ...,
        [ 0.0267,  0.0038,  0.0193,  ..., -0.0260, -0.0222, -0.0236],
        [-0.0188,  0.0106,  0.0185,  ..., -0.0041, -0.0180,  0.0496],
        [ 0.0456,  0.0103, -0.0200,  ..., -0.0363,  0.0788,  0.0003]])

encoder.encoders.9.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0323, -0.0326, -0.0096,  ...,  0.0419,  0.0300, -0.0097],
        [ 0.0361,  0.0329, -0.0094,  ..., -0.0260, -0.0140, -0.0427],
        [ 0.0288,  0.0040,  0.0156,  ..., -0.0360,  0.0445, -0.0129],
        ...,
        [-0.0235, -0.0230, -0.0204,  ..., -0.0075,  0.0449, -0.0571],
        [ 0.0364,  0.0381, -0.0477,  ...,  0.0195, -0.0404, -0.0139],
        [ 0.0698, -0.0014,  0.0136,  ...,  0.0694, -0.0126,  0.0020]])

encoder.encoders.9.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0062,  0.0598,  0.0111,  ..., -0.0402,  0.0403,  0.0291],
        [-0.0005,  0.0076,  0.0439,  ...,  0.0362, -0.0133, -0.0250],
        [-0.0002,  0.0657,  0.0036,  ...,  0.0450, -0.0590, -0.0017],
        ...,
        [-0.0464, -0.0268,  0.0267,  ...,  0.0047,  0.0214,  0.0264],
        [ 0.0445,  0.0155,  0.0342,  ...,  0.0094, -0.0352, -0.0224],
        [ 0.0049, -0.0406,  0.0068,  ...,  0.0384, -0.0249, -0.0208]])

encoder.encoders.9.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.8195, 0.7595, 0.7039,  ..., 0.8899, 0.8001, 0.7984])

encoder.encoders.9.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0355, -0.0213, -0.2476,  ...,  0.0549,  0.0689, -0.0060])

encoder.encoders.9.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8743, 0.8737, 0.7610,  ..., 0.8815, 0.8625, 0.8420])

encoder.encoders.9.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-0.0079, -0.0253, -0.0237,  ...,  0.0119,  0.0057, -0.0224])

encoder.encoders.9.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6272, 0.5790, 0.5309,  ..., 0.5686, 0.5752, 0.5342])

encoder.encoders.9.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0032, -0.0274, -0.2982,  ...,  0.0466,  0.1065, -0.0320])

encoder.encoders.9.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0083, -0.0399, -0.0448,  ..., -0.0184, -0.0644,  0.0452],
        [-0.0306,  0.0343,  0.0157,  ..., -0.0365,  0.0202, -0.0348],
        [-0.0206,  0.0432,  0.0233,  ..., -0.0189, -0.0389,  0.0130],
        ...,
        [ 0.0206,  0.0072,  0.0139,  ...,  0.0376,  0.0171, -0.0233],
        [-0.0143, -0.0319, -0.0224,  ..., -0.0015,  0.0215,  0.0165],
        [-0.0291, -0.0597, -0.0073,  ..., -0.0166, -0.0158,  0.0334]])

encoder.encoders.9.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0694,  0.0014,  0.0227,  ...,  0.0353,  0.0337,  0.0581],
        [-0.0877,  0.1115, -0.0862,  ...,  0.0674, -0.0048,  0.0273],
        [ 0.0115,  0.0456,  0.0129,  ..., -0.0129, -0.0174, -0.0060],
        ...,
        [ 0.0279, -0.0080, -0.0202,  ..., -0.0004, -0.0210, -0.0212],
        [ 0.0241, -0.0169, -0.0355,  ..., -0.0412,  0.0063,  0.0091],
        [-0.1003, -0.1162, -0.0011,  ..., -0.0331, -0.0207, -0.0541]])

encoder.encoders.9.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.2470, 1.0952, 1.0240,  ..., 1.2189, 1.0717, 1.0208])

encoder.encoders.9.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0658,  0.0427, -0.0271,  ..., -0.0393, -0.0775,  0.0181])

encoder.encoders.9.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0013],
         [-0.0346],
         [ 0.0020],
         ...,
         [ 0.0055],
         [ 0.0412],
         [ 0.0162]],

        [[-0.0195],
         [ 0.0353],
         [-0.0195],
         ...,
         [-0.0434],
         [-0.0286],
         [ 0.0226]],

        [[-0.0070],
         [ 0.0280],
         [-0.0046],
         ...,
         [-0.0056],
         [-0.0512],
         [ 0.0547]],

        ...,

        [[ 0.0223],
         [ 0.0258],
         [ 0.0335],
         ...,
         [ 0.1318],
         [-0.0392],
         [-0.0207]],

        [[ 0.0043],
         [-0.0286],
         [-0.0284],
         ...,
         [-0.0187],
         [-0.0416],
         [-0.0719]],

        [[ 0.0158],
         [ 0.0051],
         [-0.0975],
         ...,
         [ 0.0934],
         [-0.0665],
         [-0.0232]]])

encoder.encoders.9.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0205,  0.0056, -0.0038,  ...,  0.0142, -0.0004,  0.0233]],

        [[-0.0141, -0.0219, -0.0026,  ..., -0.0134,  0.0078, -0.0244]],

        [[-0.0410, -0.0145, -0.0110,  ..., -0.0144, -0.0187, -0.0414]],

        ...,

        [[-0.0363, -0.0161, -0.0314,  ..., -0.0027,  0.0062, -0.0172]],

        [[-0.0253, -0.0129, -0.0151,  ..., -0.0249,  0.0015, -0.0089]],

        [[-0.0226, -0.0029, -0.0011,  ...,  0.0091, -0.0216, -0.0030]]])

encoder.encoders.9.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0194, 0.9944, 0.9992,  ..., 0.9855, 1.0137, 1.0011])

encoder.encoders.9.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0669, -0.0154, -0.0416,  ..., -0.0336, -0.0338, -0.0653])

encoder.encoders.9.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0712],
         [ 0.0113],
         [-0.0558],
         ...,
         [ 0.0030],
         [ 0.0372],
         [ 0.0258]],

        [[-0.0365],
         [ 0.0301],
         [-0.0296],
         ...,
         [ 0.0427],
         [-0.0127],
         [-0.0178]],

        [[ 0.0087],
         [ 0.0193],
         [-0.0689],
         ...,
         [-0.0284],
         [-0.0065],
         [-0.0092]],

        ...,

        [[-0.0624],
         [-0.0083],
         [ 0.0235],
         ...,
         [-0.0427],
         [ 0.0527],
         [ 0.0918]],

        [[-0.0362],
         [-0.0036],
         [ 0.0043],
         ...,
         [-0.0236],
         [-0.0486],
         [-0.0702]],

        [[ 0.0045],
         [ 0.0948],
         [ 0.0222],
         ...,
         [-0.0711],
         [ 0.0251],
         [ 0.0447]]])

encoder.encoders.9.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.2772, 1.1480, 1.2419,  ..., 1.1164, 1.2606, 1.0595])

encoder.encoders.9.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.2221,  0.1417,  0.2582,  ..., -0.0370, -0.3919,  0.0566])

encoder.encoders.9.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0310, -0.0511,  0.0403,  ...,  0.0036, -0.0346, -0.0359],
        [ 0.0770,  0.0250, -0.0825,  ...,  0.0397,  0.0762, -0.0180],
        [ 0.0265,  0.1138, -0.0396,  ...,  0.0365,  0.0380,  0.0278],
        ...,
        [-0.0558, -0.0782, -0.0064,  ..., -0.0160,  0.0448,  0.0011],
        [ 0.0026, -0.0402, -0.0233,  ..., -0.0452,  0.0293,  0.0117],
        [ 0.0693, -0.0074,  0.0369,  ...,  0.0377,  0.0359, -0.0073]])

encoder.encoders.9.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0072, -0.0211, -0.0277,  ..., -0.0448, -0.0148, -0.0148])

encoder.encoders.9.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0275,  0.0408, -0.0413,  ...,  0.0200, -0.0381,  0.0319],
        [-0.0040, -0.0102, -0.0832,  ...,  0.0426, -0.0151, -0.0080],
        [ 0.0039, -0.0054,  0.0255,  ...,  0.0215,  0.0075,  0.0462],
        ...,
        [ 0.0043,  0.0592,  0.0137,  ...,  0.0044, -0.0211, -0.0208],
        [ 0.0228,  0.0259,  0.0489,  ...,  0.0248,  0.0089, -0.0126],
        [-0.0095, -0.0088,  0.0092,  ..., -0.0583, -0.0032,  0.0467]])

encoder.encoders.9.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0379,  0.0053,  0.0563,  ...,  0.0003,  0.0047, -0.0029])

encoder.encoders.9.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.1480, 1.1855, 1.1631,  ..., 1.1764, 1.2299, 1.2143])

encoder.encoders.9.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.1151,  0.0712,  0.1286,  ..., -0.0006, -0.0727, -0.0336])

encoder.encoders.10.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.2371, 1.0258, 1.0858,  ..., 1.0753, 1.0362, 0.9316])

encoder.encoders.10.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.2704,  0.1040,  0.2686,  ..., -0.1218, -0.2158, -0.0661])

encoder.encoders.10.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0227, -0.0145,  0.0454,  ...,  0.0637,  0.0428,  0.0283],
        [ 0.0755,  0.0586, -0.0166,  ...,  0.0065, -0.0165, -0.0141],
        [-0.0343,  0.0177,  0.0166,  ..., -0.0198,  0.0740, -0.0270],
        ...,
        [ 0.0220, -0.0271, -0.0579,  ...,  0.0405,  0.0267, -0.0310],
        [ 0.0297, -0.0033,  0.0034,  ..., -0.0559, -0.0353,  0.0049],
        [-0.0015, -0.0862,  0.0144,  ...,  0.0483,  0.0430,  0.1003]])

encoder.encoders.10.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0489, -0.0232, -0.0031,  ..., -0.0281, -0.0394, -0.0062])

encoder.encoders.10.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0054,  0.0503,  0.0014,  ...,  0.0334,  0.0313,  0.0729],
        [ 0.0070,  0.0053, -0.0092,  ...,  0.0364,  0.0059,  0.0138],
        [ 0.0395, -0.0061,  0.0352,  ...,  0.0045,  0.0026, -0.0174],
        ...,
        [ 0.0476,  0.0328,  0.0666,  ...,  0.0325, -0.0300, -0.0123],
        [-0.0041,  0.0375, -0.0018,  ..., -0.0187,  0.0029,  0.0289],
        [ 0.0020,  0.0060, -0.0045,  ..., -0.0163,  0.0029,  0.0113]])

encoder.encoders.10.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0203,  0.0226,  0.0368,  ...,  0.0135, -0.0126, -0.0163])

encoder.encoders.10.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.0515, -0.0827,  0.1412,  ...,  0.1188,  0.1261, -0.2573],
        [-0.1799,  0.2744, -0.2342,  ...,  0.0146, -0.0302, -0.0982],
        [-0.1017, -0.1779, -0.2475,  ..., -0.1133, -0.0559,  0.0252],
        ...,
        [-0.2029,  0.1130,  0.1249,  ..., -0.2086, -0.1284,  0.0546],
        [ 0.0544,  0.1554,  0.2837,  ..., -0.1377, -0.2163,  0.0521],
        [ 0.0659,  0.0290,  0.3152,  ..., -0.0683, -0.0519,  0.0643]])

encoder.encoders.10.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 1.4935e-04, -6.7455e-02,  1.2994e-02,  ..., -2.7805e-01,
          3.4693e-01,  1.6839e-01],
        [ 1.6537e-01,  1.3771e-01,  2.1557e-01,  ..., -1.8094e-01,
         -2.1672e-01, -2.3889e-02],
        [-1.1775e-01, -3.0110e-01,  2.4860e-01,  ...,  3.5141e-01,
         -2.0751e-01,  1.3638e-02],
        ...,
        [-2.3950e-01,  1.1687e-01, -1.4652e-01,  ..., -2.7711e-01,
          1.9937e-01,  1.0989e-01],
        [-1.0456e-01, -5.0832e-02, -1.6433e-02,  ..., -3.3473e-01,
          9.9233e-02,  1.1355e-02],
        [ 2.6173e-01,  2.3386e-01, -2.9463e-01,  ...,  1.9896e-01,
         -3.0286e-03, -2.7403e-02]])

encoder.encoders.10.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0108, -0.0157,  0.0149,  ..., -0.0312, -0.0649,  0.0611],
        [ 0.0287, -0.0308,  0.0033,  ..., -0.1292,  0.0055, -0.0448],
        [ 0.0829, -0.0886,  0.0247,  ...,  0.0228, -0.0591,  0.0242],
        ...,
        [-0.0492,  0.0174, -0.0450,  ..., -0.0509, -0.0057, -0.0561],
        [ 0.0366, -0.0568,  0.0150,  ...,  0.0413,  0.0457, -0.0040],
        [-0.0012, -0.0655,  0.0278,  ...,  0.0198,  0.0594, -0.0584]])

encoder.encoders.10.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0051,  0.0024, -0.0144,  ..., -0.0339,  0.0026,  0.0551],
        [-0.0475, -0.0015, -0.0226,  ...,  0.0032,  0.0324, -0.0254],
        [-0.0310, -0.0455, -0.0965,  ..., -0.0272, -0.0315, -0.0032],
        ...,
        [-0.0293, -0.0183,  0.0364,  ...,  0.0683, -0.0145, -0.0219],
        [ 0.0615, -0.0369,  0.0500,  ...,  0.0060,  0.0649,  0.0779],
        [-0.0117,  0.0260, -0.0143,  ...,  0.0352,  0.0824, -0.0110]])

encoder.encoders.10.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0367, -0.0610, -0.0141,  ..., -0.0113, -0.0286,  0.0385],
        [ 0.0114, -0.0074,  0.0109,  ..., -0.0399, -0.0626, -0.0269],
        [-0.0352,  0.0427,  0.0460,  ..., -0.0075, -0.0673,  0.0180],
        ...,
        [ 0.0334, -0.0202, -0.0243,  ...,  0.0223, -0.0125, -0.0377],
        [ 0.0196,  0.0367, -0.0227,  ...,  0.0395, -0.0130, -0.0063],
        [ 0.0004,  0.0260, -0.0501,  ...,  0.0345, -0.0530, -0.0186]])

encoder.encoders.10.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.8255, 0.7972, 0.7446,  ..., 0.8441, 0.8313, 0.7890])

encoder.encoders.10.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0219, -0.1083, -0.1283,  ..., -0.0289,  0.0227, -0.0138])

encoder.encoders.10.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.9074, 0.8811, 0.8473,  ..., 0.8941, 0.8867, 0.8517])

encoder.encoders.10.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-0.0049, -0.0158, -0.0024,  ...,  0.0004, -0.0085, -0.0113])

encoder.encoders.10.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.5697, 0.6078, 0.5441,  ..., 0.5742, 0.6096, 0.5777])

encoder.encoders.10.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0534, -0.0985, -0.1460,  ..., -0.0544,  0.0493,  0.0060])

encoder.encoders.10.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0016,  0.0057, -0.0214,  ...,  0.0365, -0.0565,  0.0282],
        [-0.0034,  0.0428, -0.0148,  ...,  0.0070,  0.0035, -0.0150],
        [ 0.0488, -0.0178,  0.0053,  ...,  0.0663,  0.0352, -0.0327],
        ...,
        [ 0.0784, -0.0073, -0.0324,  ...,  0.0413, -0.0498,  0.0210],
        [ 0.0938,  0.0280, -0.0589,  ..., -0.0347,  0.0186,  0.0300],
        [ 0.0302,  0.0414, -0.0697,  ...,  0.0014, -0.0070,  0.0308]])

encoder.encoders.10.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0425, -0.0628, -0.0547,  ..., -0.0160, -0.0054,  0.0431],
        [ 0.0081, -0.0085,  0.0226,  ...,  0.0459, -0.0224,  0.0294],
        [ 0.0214,  0.0105,  0.0556,  ..., -0.0173,  0.0221,  0.0447],
        ...,
        [-0.0196,  0.0917, -0.0229,  ...,  0.0083, -0.0213, -0.0197],
        [-0.0665, -0.0855, -0.0855,  ..., -0.0258, -0.0695, -0.0304],
        [-0.0801, -0.1154, -0.0723,  ..., -0.0057, -0.0330, -0.0042]])

encoder.encoders.10.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.1388, 1.1239, 1.1296,  ..., 1.1756, 1.0780, 1.1543])

encoder.encoders.10.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([ 0.0132,  0.1042,  0.0833,  ...,  0.1452,  0.0110, -0.0872])

encoder.encoders.10.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0122],
         [ 0.0205],
         [-0.0914],
         ...,
         [ 0.0258],
         [ 0.0173],
         [-0.0257]],

        [[ 0.0726],
         [ 0.0513],
         [-0.0356],
         ...,
         [-0.0263],
         [-0.0262],
         [-0.0122]],

        [[-0.0440],
         [-0.0066],
         [-0.0245],
         ...,
         [ 0.0651],
         [ 0.0718],
         [-0.0085]],

        ...,

        [[-0.0146],
         [-0.0567],
         [ 0.0318],
         ...,
         [ 0.0014],
         [-0.0675],
         [-0.0453]],

        [[-0.0305],
         [-0.0061],
         [-0.0254],
         ...,
         [ 0.0882],
         [-0.0644],
         [ 0.0150]],

        [[ 0.0384],
         [-0.0097],
         [ 0.0423],
         ...,
         [ 0.0979],
         [-0.0199],
         [ 0.0753]]])

encoder.encoders.10.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[ 1.0451e-02, -1.7864e-02,  7.7097e-03,  ...,  1.0547e-02,
          -1.4982e-02,  1.8567e-03]],

        [[ 3.0615e-02, -1.2444e-02,  7.1299e-03,  ...,  2.4368e-03,
           3.0306e-04,  6.7496e-03]],

        [[ 2.8466e-04,  1.3053e-02,  4.0616e-03,  ...,  5.0645e-03,
           1.6157e-02,  8.9679e-03]],

        ...,

        [[ 6.4810e-04, -1.0848e-02, -6.5143e-03,  ...,  3.9675e-03,
           4.1820e-03,  8.9264e-03]],

        [[-8.6662e-03,  8.0686e-03,  7.4838e-03,  ..., -3.8299e-03,
           1.3075e-02, -9.0447e-03]],

        [[ 2.2063e-03, -1.7990e-05, -5.2653e-03,  ..., -4.2510e-03,
          -9.7900e-03, -3.1710e-02]]])

encoder.encoders.10.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0268, 1.0166, 1.0529,  ..., 1.0197, 1.0275, 1.0620])

encoder.encoders.10.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([ 0.0473,  0.0173, -0.0178,  ..., -0.0084, -0.0597, -0.0517])

encoder.encoders.10.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0056],
         [-0.0851],
         [-0.0123],
         ...,
         [ 0.0405],
         [ 0.0371],
         [ 0.0118]],

        [[-0.0619],
         [ 0.0478],
         [-0.0261],
         ...,
         [-0.0385],
         [-0.0044],
         [ 0.0020]],

        [[ 0.0707],
         [ 0.0136],
         [ 0.0384],
         ...,
         [-0.0206],
         [ 0.0147],
         [-0.0026]],

        ...,

        [[-0.0300],
         [ 0.0312],
         [-0.0637],
         ...,
         [-0.0568],
         [-0.0445],
         [ 0.0684]],

        [[-0.0159],
         [ 0.0193],
         [-0.0004],
         ...,
         [-0.0286],
         [-0.0922],
         [-0.1067]],

        [[-0.0214],
         [ 0.0332],
         [ 0.0226],
         ...,
         [-0.0027],
         [ 0.0026],
         [-0.0525]]])

encoder.encoders.10.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.3109, 1.2752, 1.2812,  ..., 1.2707, 1.1602, 1.1357])

encoder.encoders.10.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.2299,  0.2226,  0.3468,  ...,  0.2695, -0.1893, -0.1170])

encoder.encoders.10.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0154,  0.0428, -0.0218,  ..., -0.0463,  0.0132,  0.0149],
        [ 0.0201,  0.0160, -0.0037,  ...,  0.0058,  0.0969,  0.0413],
        [ 0.0462, -0.0345, -0.0099,  ...,  0.0189, -0.0313, -0.0583],
        ...,
        [ 0.0591,  0.0038, -0.0553,  ..., -0.0450, -0.0274, -0.0377],
        [ 0.0079, -0.0282, -0.0737,  ..., -0.0795,  0.0267, -0.0136],
        [ 0.0006,  0.0274,  0.0668,  ..., -0.0545, -0.0523,  0.0634]])

encoder.encoders.10.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0050,  0.0159, -0.0334,  ...,  0.0022, -0.0203, -0.0430])

encoder.encoders.10.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0008, -0.0803,  0.0239,  ..., -0.0023,  0.0042, -0.0077],
        [-0.0077, -0.0185,  0.0025,  ...,  0.0373, -0.0147, -0.0147],
        [ 0.0043,  0.0259, -0.0058,  ..., -0.0110,  0.0063,  0.0412],
        ...,
        [ 0.1001,  0.0252,  0.0039,  ...,  0.0403, -0.0011,  0.0435],
        [ 0.0077, -0.0500,  0.0165,  ..., -0.0428,  0.1818, -0.0015],
        [-0.0245, -0.0010, -0.0472,  ...,  0.0130, -0.1289,  0.0106]])

encoder.encoders.10.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0280,  0.0038,  0.0036,  ..., -0.0200, -0.0139,  0.0076])

encoder.encoders.10.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2004, 1.2302, 1.2393,  ..., 1.2254, 1.2158, 1.2382])

encoder.encoders.10.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0784,  0.1172,  0.0674,  ...,  0.0525, -0.0339, -0.0133])

encoder.encoders.11.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.1946, 1.2096, 1.0167,  ..., 1.1391, 1.0764, 0.9996])

encoder.encoders.11.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.2203,  0.3876,  0.1770,  ...,  0.2236, -0.1539, -0.0878])

encoder.encoders.11.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0533, -0.0417,  0.0023,  ..., -0.0372,  0.0174,  0.0134],
        [-0.0340, -0.0123,  0.0251,  ..., -0.0478,  0.0490, -0.0905],
        [ 0.0538, -0.0482, -0.0188,  ..., -0.0437,  0.0410,  0.0347],
        ...,
        [ 0.0038, -0.0605,  0.0199,  ...,  0.0532, -0.0274,  0.0304],
        [ 0.0234, -0.0117,  0.0581,  ..., -0.0459,  0.0496,  0.0051],
        [ 0.0334,  0.0112,  0.0471,  ..., -0.0181, -0.0007,  0.0451]])

encoder.encoders.11.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0537,  0.0092, -0.0055,  ..., -0.0328, -0.0218, -0.0396])

encoder.encoders.11.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0594, -0.0345, -0.1042,  ..., -0.0127,  0.0303, -0.0488],
        [ 0.0105,  0.0172,  0.0386,  ...,  0.0007,  0.0317,  0.0210],
        [ 0.0358,  0.0815,  0.0052,  ...,  0.0073, -0.0226, -0.0511],
        ...,
        [-0.0390,  0.0285,  0.0336,  ..., -0.0068, -0.0230, -0.0033],
        [ 0.0402, -0.0001, -0.0490,  ...,  0.0204, -0.0154,  0.0179],
        [-0.0265, -0.0416,  0.0265,  ...,  0.0220, -0.0079,  0.0478]])

encoder.encoders.11.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0329, -0.0098,  0.0088,  ..., -0.0134, -0.0216,  0.0014])

encoder.encoders.11.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.0323, -0.1754, -0.1308,  ...,  0.0662,  0.1850, -0.0422],
        [ 0.2098, -0.1374, -0.1165,  ..., -0.1152,  0.1527,  0.3475],
        [-0.0338, -0.0738,  0.2511,  ...,  0.0401,  0.1090,  0.2867],
        ...,
        [-0.0629,  0.1918,  0.1341,  ...,  0.1163,  0.2188, -0.1858],
        [ 0.0861, -0.0372, -0.0246,  ..., -0.2994, -0.1640,  0.0408],
        [-0.0418, -0.0989,  0.2839,  ...,  0.1947,  0.3885, -0.1857]])

encoder.encoders.11.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.1297,  0.1698,  0.0502,  ..., -0.2036,  0.0535, -0.2096],
        [-0.2108, -0.0137,  0.0726,  ..., -0.2997, -0.2055, -0.0080],
        [ 0.0079,  0.2534, -0.2397,  ..., -0.0754, -0.1829, -0.0210],
        ...,
        [ 0.1446,  0.1431,  0.1117,  ...,  0.0519, -0.3526, -0.3027],
        [ 0.0044,  0.2723, -0.2635,  ...,  0.1600, -0.2419, -0.1242],
        [ 0.0619, -0.3941, -0.3669,  ...,  0.1269, -0.0955,  0.2122]])

encoder.encoders.11.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0235, -0.0393,  0.0469,  ...,  0.0132, -0.0106,  0.0600],
        [-0.0347, -0.0123,  0.0388,  ..., -0.0230, -0.0052,  0.0687],
        [-0.0446,  0.0289,  0.0345,  ...,  0.0198, -0.0007,  0.0415],
        ...,
        [ 0.0134, -0.0115,  0.0109,  ...,  0.0327,  0.0228, -0.0524],
        [-0.0220, -0.0683, -0.0853,  ...,  0.0235,  0.1114, -0.0647],
        [-0.0153, -0.0704,  0.0643,  ..., -0.0161, -0.0088,  0.0117]])

encoder.encoders.11.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0221, -0.0626, -0.0374,  ..., -0.0284,  0.0258,  0.0247],
        [ 0.0281,  0.0243, -0.0050,  ...,  0.0282, -0.0380,  0.0284],
        [-0.0263,  0.0257, -0.0352,  ...,  0.0253,  0.0159,  0.0244],
        ...,
        [-0.0966, -0.0148, -0.0320,  ..., -0.0405, -0.0147,  0.0094],
        [-0.0516, -0.0377, -0.0286,  ..., -0.0169,  0.0113, -0.0129],
        [ 0.0619, -0.0596,  0.0165,  ..., -0.0085,  0.0386, -0.0567]])

encoder.encoders.11.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 4.8837e-02, -6.8871e-03, -2.5673e-02,  ..., -8.4204e-02,
          3.2299e-02,  4.8004e-02],
        [-7.8532e-02, -3.0207e-02, -6.1169e-02,  ...,  1.5500e-02,
         -2.9710e-03, -9.0551e-02],
        [-3.9529e-02, -1.7713e-02, -1.0877e-02,  ...,  7.6999e-03,
         -1.1080e-02,  6.5694e-05],
        ...,
        [-1.2302e-02,  1.2654e-02, -1.0462e-02,  ...,  2.2831e-02,
         -1.1630e-03, -1.4457e-03],
        [-1.5542e-02,  3.4853e-02,  2.4510e-02,  ...,  5.8004e-02,
         -5.2917e-02, -1.1919e-02],
        [ 1.6511e-02,  4.7247e-02,  1.6688e-02,  ...,  4.5745e-02,
         -3.6505e-02,  1.2934e-02]])

encoder.encoders.11.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.9379, 0.8701, 0.8798,  ..., 0.9293, 0.9200, 0.8843])

encoder.encoders.11.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0189, -0.0649, -0.0403,  ..., -0.0031, -0.0515, -0.0267])

encoder.encoders.11.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.9839, 0.9738, 0.8339,  ..., 0.9433, 0.9243, 0.9848])

encoder.encoders.11.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-0.0052, -0.0243, -0.0029,  ...,  0.0019, -0.0067, -0.0069])

encoder.encoders.11.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.5401, 0.6059, 0.5596,  ..., 0.5554, 0.5984, 0.5907])

encoder.encoders.11.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0355, -0.1212, -0.1170,  ..., -0.0478, -0.0045, -0.0174])

encoder.encoders.11.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0276,  0.0352,  0.0433,  ...,  0.0252,  0.0411,  0.0083],
        [ 0.0822,  0.0269, -0.0709,  ..., -0.0161,  0.0245,  0.0359],
        [-0.0104,  0.0054, -0.0566,  ..., -0.0398, -0.0298,  0.0486],
        ...,
        [ 0.0372, -0.0317, -0.0023,  ...,  0.0190,  0.0306, -0.0363],
        [-0.0231, -0.0045,  0.0586,  ..., -0.0177,  0.0219, -0.0456],
        [-0.0511,  0.0609, -0.0227,  ...,  0.0170,  0.0254, -0.0198]])

encoder.encoders.11.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0329,  0.0132, -0.0328,  ...,  0.0134, -0.0297,  0.0051],
        [ 0.0202,  0.0157, -0.0279,  ...,  0.0099, -0.0356, -0.0484],
        [-0.0127, -0.0188, -0.0325,  ..., -0.0234, -0.0335,  0.0035],
        ...,
        [ 0.0211, -0.0138, -0.0308,  ...,  0.0203, -0.0075, -0.0237],
        [-0.0281, -0.2794, -0.0338,  ..., -0.0044,  0.0310,  0.0165],
        [ 0.0433,  0.1632,  0.0269,  ..., -0.0457,  0.0088,  0.0738]])

encoder.encoders.11.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.1663, 1.1351, 1.1464,  ..., 1.1957, 1.1188, 1.0624])

encoder.encoders.11.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([ 0.0085,  0.0590,  0.0305,  ..., -0.0725,  0.0808, -0.0411])

encoder.encoders.11.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.1015],
         [-0.0191],
         [-0.0038],
         ...,
         [ 0.0226],
         [ 0.1331],
         [ 0.0225]],

        [[ 0.0387],
         [ 0.0082],
         [-0.0173],
         ...,
         [-0.0074],
         [-0.0018],
         [-0.0265]],

        [[ 0.0024],
         [ 0.0754],
         [-0.0204],
         ...,
         [-0.0766],
         [-0.0062],
         [ 0.0813]],

        ...,

        [[-0.0244],
         [ 0.0405],
         [-0.0602],
         ...,
         [ 0.0189],
         [ 0.0499],
         [-0.0337]],

        [[-0.0809],
         [-0.0584],
         [ 0.0164],
         ...,
         [-0.0332],
         [-0.0465],
         [-0.0038]],

        [[-0.0879],
         [ 0.0191],
         [-0.0103],
         ...,
         [-0.0141],
         [ 0.0252],
         [ 0.0152]]])

encoder.encoders.11.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0139, -0.0046, -0.0215,  ..., -0.0113, -0.0160, -0.0266]],

        [[ 0.0493,  0.0246,  0.0293,  ..., -0.0599, -0.0391, -0.0723]],

        [[ 0.0031,  0.0105, -0.0077,  ..., -0.0267, -0.0199, -0.0414]],

        ...,

        [[-0.0002, -0.0142, -0.0125,  ..., -0.0066,  0.0005,  0.0329]],

        [[-0.0211, -0.0453, -0.0306,  ..., -0.0171,  0.0078,  0.0186]],

        [[ 0.0158, -0.0043,  0.0204,  ...,  0.0224, -0.0006,  0.0332]]])

encoder.encoders.11.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0193, 1.0091, 1.0187,  ..., 1.0242, 1.0287, 0.9932])

encoder.encoders.11.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0440, -0.0225, -0.0400,  ..., -0.0368, -0.0532, -0.0539])

encoder.encoders.11.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0522],
         [-0.0171],
         [ 0.0468],
         ...,
         [-0.0075],
         [-0.0157],
         [-0.0535]],

        [[-0.0055],
         [ 0.0014],
         [ 0.0539],
         ...,
         [ 0.0158],
         [-0.0087],
         [-0.0709]],

        [[-0.0114],
         [ 0.0276],
         [-0.0367],
         ...,
         [-0.0278],
         [-0.0373],
         [-0.0409]],

        ...,

        [[-0.0131],
         [ 0.0158],
         [ 0.0389],
         ...,
         [ 0.0751],
         [-0.0766],
         [-0.0477]],

        [[-0.0270],
         [ 0.0286],
         [-0.0329],
         ...,
         [-0.0290],
         [-0.0229],
         [ 0.0512]],

        [[-0.0308],
         [-0.0324],
         [-0.0427],
         ...,
         [ 0.0140],
         [-0.0486],
         [ 0.0004]]])

encoder.encoders.11.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.2655, 1.2241, 1.2356,  ..., 1.1022, 1.1131, 1.0671])

encoder.encoders.11.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.1787,  0.2526,  0.3032,  ..., -0.1104,  0.0521,  0.0387])

encoder.encoders.11.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0549,  0.0764,  0.0100,  ..., -0.0231, -0.0813,  0.0377],
        [-0.0779,  0.0604,  0.0466,  ...,  0.0224, -0.0855,  0.0406],
        [-0.0496, -0.0059, -0.0359,  ..., -0.0199,  0.0322,  0.0168],
        ...,
        [ 0.0064, -0.0181, -0.0244,  ..., -0.0552, -0.0541,  0.0422],
        [-0.0690, -0.0154,  0.0249,  ..., -0.0188, -0.0512,  0.0166],
        [-0.0218, -0.0169,  0.0459,  ...,  0.0357,  0.0103, -0.0320]])

encoder.encoders.11.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0039, -0.0370, -0.0039,  ...,  0.0191, -0.0040, -0.0010])

encoder.encoders.11.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0592, -0.0399, -0.0628,  ..., -0.0600,  0.0129,  0.0398],
        [-0.0021,  0.0312,  0.0268,  ...,  0.0936, -0.0383,  0.0978],
        [ 0.0017, -0.0164, -0.0041,  ...,  0.0266,  0.0477, -0.0522],
        ...,
        [-0.0832,  0.0301, -0.0221,  ...,  0.0137,  0.0303, -0.0593],
        [ 0.0496,  0.0105,  0.1148,  ...,  0.0038,  0.0020, -0.0153],
        [-0.0363, -0.0869,  0.0359,  ...,  0.0167, -0.0026,  0.0283]])

encoder.encoders.11.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0171, -0.0034, -0.0098,  ..., -0.0169, -0.0014, -0.0064])

encoder.encoders.11.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.1842, 1.2562, 1.2964,  ..., 1.2141, 1.2218, 1.2785])

encoder.encoders.11.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0783,  0.0375,  0.0556,  ..., -0.0178,  0.0120,  0.0205])

encoder.encoders.12.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.1244, 1.0688, 0.9730,  ..., 1.0256, 0.9983, 0.9758])

encoder.encoders.12.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.1947,  0.1211,  0.1201,  ..., -0.1784,  0.0767,  0.1015])

encoder.encoders.12.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0285,  0.0258, -0.0014,  ...,  0.0104,  0.0288,  0.0166],
        [ 0.0781, -0.0140, -0.0508,  ...,  0.0437,  0.0542, -0.0728],
        [ 0.0133, -0.0028,  0.0224,  ..., -0.0311, -0.0337, -0.0004],
        ...,
        [ 0.0552, -0.0017, -0.0034,  ...,  0.0192,  0.0254, -0.0114],
        [-0.0288, -0.0446, -0.0685,  ..., -0.0420,  0.0486, -0.0533],
        [ 0.0360,  0.0280, -0.0301,  ..., -0.0334,  0.0075, -0.0652]])

encoder.encoders.12.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0080, -0.0371,  0.0068,  ..., -0.0476, -0.0483,  0.0002])

encoder.encoders.12.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 1.2579e-02, -8.7054e-03, -4.0923e-02,  ..., -1.2169e-02,
         -4.6076e-02, -9.1391e-02],
        [ 2.3641e-02,  1.3797e-02,  4.2478e-02,  ...,  1.5705e-02,
         -2.3913e-02, -1.2961e-02],
        [ 2.1239e-02,  8.2854e-03, -1.3770e-03,  ..., -4.9286e-02,
         -3.1324e-02,  6.3493e-02],
        ...,
        [ 1.7998e-02,  4.2338e-02,  7.5109e-05,  ...,  2.5423e-03,
          7.9867e-02, -2.0486e-02],
        [ 1.4662e-02,  1.5091e-02, -6.1378e-02,  ...,  3.7917e-03,
          3.7878e-02, -4.9148e-02],
        [-4.2385e-03, -6.0035e-02, -1.1613e-02,  ..., -5.2003e-02,
          1.7571e-02, -1.2879e-02]])

encoder.encoders.12.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0359,  0.0042,  0.0309,  ...,  0.0104,  0.0165, -0.0084])

encoder.encoders.12.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.0953,  0.0361,  0.1938,  ...,  0.2103, -0.3841, -0.3116],
        [ 0.1103, -0.1962, -0.1004,  ...,  0.0436,  0.0010,  0.3177],
        [-0.1006, -0.2232, -0.2196,  ...,  0.2202,  0.0653, -0.0106],
        ...,
        [ 0.0227,  0.0238,  0.2421,  ..., -0.0743,  0.0258, -0.2428],
        [-0.1411, -0.2321, -0.2424,  ..., -0.2501,  0.0184,  0.1251],
        [ 0.2128, -0.2387, -0.3541,  ..., -0.0595,  0.0682,  0.0724]])

encoder.encoders.12.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.1399, -0.2752, -0.1638,  ..., -0.1893,  0.4776, -0.0576],
        [ 0.0653, -0.2684,  0.0671,  ...,  0.1170, -0.2272,  0.1219],
        [ 0.1900,  0.3486,  0.3636,  ...,  0.0205, -0.2347,  0.1948],
        ...,
        [ 0.0902,  0.1600, -0.4036,  ...,  0.3398,  0.1986,  0.1643],
        [-0.1014, -0.0391, -0.0252,  ...,  0.0449, -0.0018, -0.1082],
        [-0.0922,  0.4255,  0.4017,  ...,  0.1352, -0.1530,  0.0078]])

encoder.encoders.12.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0729, -0.0433,  0.0111,  ...,  0.0570,  0.0372, -0.0355],
        [ 0.0621, -0.0069, -0.0168,  ...,  0.0345,  0.0253,  0.0146],
        [ 0.0612, -0.0513,  0.0697,  ...,  0.0320,  0.0476, -0.0506],
        ...,
        [-0.0526,  0.0062, -0.0169,  ..., -0.1294,  0.0311, -0.0257],
        [-0.0188,  0.0238,  0.0174,  ..., -0.0413,  0.0510,  0.1025],
        [-0.0031,  0.0077, -0.0765,  ...,  0.0462, -0.0404,  0.0076]])

encoder.encoders.12.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0603,  0.0287, -0.0100,  ..., -0.0144, -0.0221,  0.0292],
        [-0.0292,  0.0256,  0.0616,  ...,  0.0249,  0.0067, -0.0524],
        [ 0.0133,  0.0364,  0.0187,  ...,  0.0183, -0.0085,  0.0049],
        ...,
        [ 0.0228, -0.0647,  0.0113,  ..., -0.0445, -0.0005, -0.0110],
        [ 0.0132,  0.0820,  0.0284,  ..., -0.0168,  0.0683,  0.0053],
        [-0.0200,  0.0011, -0.0326,  ..., -0.0003, -0.0417,  0.0066]])

encoder.encoders.12.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0016, -0.0276, -0.0214,  ..., -0.0100, -0.0065,  0.0491],
        [ 0.0471,  0.0669, -0.0292,  ..., -0.0336, -0.0820, -0.0553],
        [-0.0128, -0.0027,  0.0319,  ..., -0.0204,  0.0357, -0.0301],
        ...,
        [ 0.0285, -0.0093, -0.0268,  ...,  0.0419,  0.0552,  0.0371],
        [-0.0462,  0.0399, -0.0126,  ..., -0.0065, -0.0442, -0.0556],
        [ 0.0022,  0.0055,  0.0414,  ..., -0.0395,  0.0295,  0.0209]])

encoder.encoders.12.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.9086, 0.8177, 0.8579,  ..., 0.8157, 0.8497, 0.8038])

encoder.encoders.12.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0302, -0.0353, -0.0307,  ..., -0.0403, -0.0277, -0.0277])

encoder.encoders.12.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.9055, 0.8581, 0.8393,  ..., 0.9008, 0.8845, 0.8455])

encoder.encoders.12.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0176, -0.0221, -0.0098,  ..., -0.0195,  0.0179, -0.0120])

encoder.encoders.12.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6132, 0.6294, 0.6141,  ..., 0.6385, 0.6533, 0.6599])

encoder.encoders.12.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0373, -0.0666, -0.0946,  ..., -0.0400, -0.0254, -0.0375])

encoder.encoders.12.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0497, -0.0418, -0.0169,  ...,  0.0087,  0.0001, -0.0287],
        [-0.0035,  0.0268, -0.0176,  ...,  0.0346,  0.0234,  0.0026],
        [ 0.0509, -0.0444,  0.0113,  ...,  0.0193, -0.0282,  0.0147],
        ...,
        [-0.0080, -0.0059, -0.0076,  ...,  0.0157, -0.0396, -0.0578],
        [-0.0105,  0.0369, -0.1020,  ..., -0.0245, -0.0468,  0.0095],
        [-0.0011, -0.0198,  0.0563,  ...,  0.0128, -0.0154, -0.0258]])

encoder.encoders.12.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0463, -0.1303,  0.0265,  ..., -0.0407, -0.0127, -0.0726],
        [ 0.0766, -0.0835,  0.0529,  ..., -0.0217, -0.0004, -0.0456],
        [ 0.0273, -0.0587, -0.0277,  ..., -0.0147, -0.0393,  0.0252],
        ...,
        [ 0.0178,  0.2136, -0.0493,  ..., -0.0120,  0.0414, -0.0419],
        [ 0.0329, -0.2952,  0.0397,  ..., -0.0123,  0.0487,  0.0018],
        [ 0.0374,  0.3096, -0.0430,  ..., -0.0437,  0.0281, -0.0241]])

encoder.encoders.12.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.1105, 1.1024, 1.0178,  ..., 1.1343, 1.1659, 1.0792])

encoder.encoders.12.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0023, -0.0059,  0.0729,  ...,  0.0225,  0.0369, -0.0863])

encoder.encoders.12.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.0667],
         [-0.0181],
         [-0.0291],
         ...,
         [ 0.0108],
         [ 0.0803],
         [ 0.0113]],

        [[ 0.0036],
         [-0.0584],
         [ 0.0171],
         ...,
         [ 0.0401],
         [-0.0420],
         [ 0.0183]],

        [[-0.0260],
         [ 0.0169],
         [-0.0074],
         ...,
         [ 0.0490],
         [ 0.0793],
         [ 0.0066]],

        ...,

        [[ 0.0182],
         [ 0.0618],
         [ 0.0339],
         ...,
         [ 0.0041],
         [ 0.0586],
         [-0.0302]],

        [[-0.0193],
         [ 0.0725],
         [ 0.0559],
         ...,
         [ 0.0535],
         [ 0.0049],
         [-0.0229]],

        [[-0.0047],
         [ 0.0040],
         [-0.0545],
         ...,
         [ 0.0396],
         [-0.0896],
         [-0.0431]]])

encoder.encoders.12.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-2.3286e-02,  6.3420e-03, -1.8808e-02,  ..., -1.3431e-02,
          -2.8348e-02, -5.1472e-02]],

        [[-2.5413e-02, -1.1489e-02, -7.0827e-03,  ...,  2.1247e-04,
          -6.2026e-03, -2.7029e-02]],

        [[ 2.4337e-03, -7.4659e-03, -1.2646e-03,  ..., -1.1084e-02,
          -1.6539e-02, -2.8457e-02]],

        ...,

        [[ 3.9109e-03, -9.2466e-03,  1.0527e-03,  ...,  9.4922e-03,
          -6.0287e-03, -4.3456e-02]],

        [[ 4.4010e-03, -1.6570e-03,  8.0435e-05,  ..., -2.2942e-02,
           2.5315e-03, -6.9371e-02]],

        [[-4.7311e-03,  9.9826e-04,  8.4420e-03,  ..., -2.5794e-03,
          -1.4479e-02, -3.4023e-02]]])

encoder.encoders.12.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9840, 1.0148, 1.0543,  ..., 1.0169, 1.0285, 1.0452])

encoder.encoders.12.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0651, -0.0482, -0.0396,  ..., -0.0592, -0.0812, -0.0363])

encoder.encoders.12.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0491],
         [ 0.0009],
         [ 0.0630],
         ...,
         [-0.1062],
         [-0.0540],
         [-0.0753]],

        [[ 0.0124],
         [ 0.0397],
         [ 0.0450],
         ...,
         [ 0.0200],
         [ 0.0371],
         [-0.0728]],

        [[-0.0510],
         [ 0.0042],
         [ 0.0218],
         ...,
         [-0.0312],
         [ 0.0280],
         [-0.0417]],

        ...,

        [[ 0.0146],
         [-0.0402],
         [ 0.0495],
         ...,
         [-0.0259],
         [ 0.0039],
         [-0.0343]],

        [[-0.0081],
         [ 0.0061],
         [-0.0028],
         ...,
         [-0.0050],
         [ 0.0049],
         [ 0.0065]],

        [[ 0.0795],
         [-0.0543],
         [ 0.0462],
         ...,
         [ 0.0099],
         [ 0.0581],
         [-0.0291]]])

encoder.encoders.12.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.1203, 1.0697, 1.0197,  ..., 1.1724, 1.1441, 1.0886])

encoder.encoders.12.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.1493,  0.0334,  0.1536,  ...,  0.2177,  0.0121,  0.2089])

encoder.encoders.12.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0279,  0.0579,  0.0036,  ...,  0.0258, -0.0205, -0.0087],
        [-0.0530,  0.0030, -0.0175,  ...,  0.0226, -0.0696,  0.0273],
        [ 0.0139, -0.0412,  0.0499,  ...,  0.0369,  0.0864,  0.0122],
        ...,
        [ 0.0631, -0.0148,  0.0105,  ...,  0.0508, -0.0124, -0.0533],
        [ 0.0432,  0.0357, -0.0587,  ..., -0.0139,  0.0183,  0.0064],
        [ 0.0221, -0.0195, -0.0205,  ...,  0.0534,  0.0367,  0.0164]])

encoder.encoders.12.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0166,  0.0030,  0.0033,  ..., -0.0041, -0.0186, -0.0239])

encoder.encoders.12.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0144,  0.0015,  0.0529,  ...,  0.0516,  0.0145,  0.0313],
        [ 0.0770, -0.0282,  0.0154,  ...,  0.0038,  0.0049,  0.0097],
        [ 0.0114,  0.1092, -0.0825,  ..., -0.0329, -0.0198,  0.0877],
        ...,
        [-0.0142,  0.0380,  0.0180,  ...,  0.0237, -0.0249,  0.0343],
        [-0.0381,  0.0332, -0.0303,  ...,  0.0091,  0.0321,  0.0279],
        [-0.0162, -0.0403, -0.0201,  ..., -0.0604, -0.0273, -0.0009]])

encoder.encoders.12.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0040, -0.0068, -0.0045,  ...,  0.0196,  0.0121, -0.0008])

encoder.encoders.12.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2442, 1.2974, 1.3647,  ..., 1.2374, 1.2293, 1.2927])

encoder.encoders.12.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0621,  0.0050,  0.0604,  ...,  0.1025, -0.0201,  0.0472])

encoder.encoders.13.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([0.9675, 0.9206, 0.8430,  ..., 1.0496, 0.9737, 0.9913])

encoder.encoders.13.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([ 0.0084, -0.0205,  0.1310,  ...,  0.2366,  0.0389,  0.1949])

encoder.encoders.13.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0091,  0.0372,  0.0282,  ..., -0.0129,  0.0147,  0.0583],
        [ 0.0350,  0.0145,  0.0355,  ..., -0.0326, -0.0070, -0.0109],
        [-0.0356, -0.0771, -0.0028,  ..., -0.0141, -0.0207, -0.0024],
        ...,
        [-0.0429,  0.0841, -0.0043,  ..., -0.1468, -0.0426, -0.0566],
        [ 0.0545, -0.0201,  0.0397,  ..., -0.0926, -0.0395,  0.0119],
        [ 0.0653, -0.0164,  0.0174,  ...,  0.0059, -0.0072,  0.0065]])

encoder.encoders.13.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0232, -0.0176, -0.0220,  ..., -0.0374, -0.0320, -0.0350])

encoder.encoders.13.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0019,  0.0449, -0.0006,  ..., -0.0139,  0.0370, -0.0920],
        [ 0.0216, -0.0496, -0.1101,  ...,  0.0478,  0.0290, -0.0309],
        [-0.0947, -0.0035, -0.0018,  ..., -0.0193, -0.0304, -0.0129],
        ...,
        [ 0.0192,  0.0582,  0.0505,  ..., -0.0186, -0.0019, -0.0196],
        [ 0.0046,  0.0284,  0.0209,  ..., -0.0033,  0.0332,  0.0108],
        [ 0.0944, -0.0220,  0.0496,  ..., -0.0286,  0.0247,  0.0352]])

encoder.encoders.13.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0463,  0.0048,  0.0013,  ...,  0.0371, -0.0265, -0.0158])

encoder.encoders.13.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.3597, -0.1784, -0.2635,  ...,  0.0444,  0.0737,  0.2299],
        [ 0.0035,  0.0507, -0.1202,  ..., -0.0701, -0.0520, -0.0687],
        [-0.3563, -0.0710,  0.3154,  ...,  0.1909, -0.1131,  0.1818],
        ...,
        [-0.0657, -0.2159,  0.2544,  ..., -0.1706,  0.1704,  0.1615],
        [-0.0163,  0.0477,  0.1944,  ..., -0.2244,  0.0888,  0.0089],
        [-0.3061, -0.2498, -0.0354,  ...,  0.2524,  0.1663, -0.2523]])

encoder.encoders.13.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 1.0976e-01,  1.8109e-01,  2.7752e-02,  ..., -1.3368e-01,
         -2.0505e-01, -1.9809e-01],
        [-1.2526e-03,  1.0305e-01,  4.7170e-02,  ...,  3.9203e-01,
         -4.2927e-02,  1.2243e-04],
        [ 3.6539e-01, -1.7957e-01, -2.8927e-02,  ..., -3.3462e-01,
          3.5461e-01, -1.0927e-01],
        ...,
        [-1.9981e-01,  1.5923e-01,  4.0054e-02,  ..., -2.7648e-01,
          2.6856e-01,  3.0712e-01],
        [ 2.1709e-01,  4.8502e-02,  6.5629e-02,  ..., -1.4545e-02,
         -9.9673e-02,  2.0947e-01],
        [-7.8061e-02,  3.4793e-01, -3.0539e-01,  ..., -7.2135e-02,
         -2.6677e-01,  4.3064e-01]])

encoder.encoders.13.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0490,  0.0013,  0.0599,  ...,  0.0568,  0.0199,  0.0296],
        [ 0.0717,  0.0235,  0.0122,  ...,  0.0869,  0.0024,  0.0220],
        [-0.0516,  0.0118, -0.0160,  ...,  0.0081, -0.0106, -0.0634],
        ...,
        [ 0.0549, -0.0347,  0.0133,  ...,  0.0216,  0.0079, -0.0094],
        [ 0.0341, -0.0074, -0.0197,  ..., -0.1018,  0.0099, -0.0751],
        [-0.0052,  0.0087, -0.0656,  ...,  0.0124, -0.0695,  0.0564]])

encoder.encoders.13.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0889, -0.0130,  0.0091,  ..., -0.0021,  0.0106, -0.0098],
        [ 0.0048,  0.0051, -0.0929,  ..., -0.0177, -0.0306, -0.0042],
        [-0.0632,  0.0529,  0.0184,  ..., -0.0402,  0.0357, -0.0131],
        ...,
        [-0.0105, -0.0629,  0.0632,  ...,  0.0338,  0.0524, -0.0364],
        [ 0.0191,  0.0366, -0.0101,  ...,  0.0408,  0.0207, -0.0439],
        [-0.0182, -0.0329, -0.0169,  ..., -0.0219,  0.0134, -0.0439]])

encoder.encoders.13.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-3.3106e-02,  4.2594e-02,  2.5667e-02,  ..., -1.2317e-02,
         -4.9396e-02,  2.5047e-02],
        [-5.2423e-02,  6.5696e-02,  1.5856e-02,  ...,  6.0457e-05,
         -3.8484e-02, -3.2681e-02],
        [-2.7760e-02, -1.4841e-02,  8.6816e-04,  ...,  3.1908e-02,
          2.0899e-02, -4.7378e-02],
        ...,
        [-9.1858e-02, -2.8878e-02, -4.7833e-02,  ..., -4.1189e-03,
          5.4130e-03, -1.3216e-02],
        [ 6.1600e-03, -5.6370e-02, -3.1696e-02,  ..., -3.9301e-02,
          7.5121e-02,  1.3674e-02],
        [ 3.5458e-02,  2.7809e-02, -4.7364e-02,  ...,  4.0146e-03,
          3.6871e-04, -1.3515e-02]])

encoder.encoders.13.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.8816, 0.7045, 0.6718,  ..., 0.8303, 0.7981, 0.7254])

encoder.encoders.13.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0076, -0.0418, -0.1350,  ..., -0.0392, -0.0265, -0.0022])

encoder.encoders.13.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8863, 0.8183, 0.7955,  ..., 0.8067, 0.8015, 0.7680])

encoder.encoders.13.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0026, -0.0040,  0.0115,  ..., -0.0228,  0.0087,  0.0213])

encoder.encoders.13.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6174, 0.5750, 0.6089,  ..., 0.6334, 0.6074, 0.6321])

encoder.encoders.13.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0594, -0.0693, -0.1006,  ..., -0.0800, -0.0316, -0.0276])

encoder.encoders.13.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0323, -0.0112, -0.0457,  ..., -0.0137,  0.0338, -0.0269],
        [-0.0312,  0.0344, -0.0232,  ...,  0.0261, -0.0293, -0.0006],
        [-0.0081, -0.0140, -0.0037,  ..., -0.0386, -0.0151, -0.0592],
        ...,
        [ 0.0467,  0.0168, -0.0146,  ..., -0.0154,  0.0033, -0.0016],
        [-0.0113,  0.0171,  0.0294,  ...,  0.0115,  0.0204,  0.0284],
        [-0.0327, -0.0069, -0.0296,  ...,  0.0531,  0.0035, -0.0265]])

encoder.encoders.13.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0029, -0.1304,  0.0335,  ...,  0.0098, -0.0085,  0.0012],
        [-0.0342,  0.0523,  0.0115,  ..., -0.0160,  0.0353, -0.0645],
        [ 0.0421,  0.1009,  0.0181,  ..., -0.0355,  0.0486, -0.0142],
        ...,
        [-0.0041, -0.2682,  0.0024,  ..., -0.0235, -0.0494, -0.0475],
        [ 0.0122, -0.1523, -0.0134,  ..., -0.0452,  0.0157, -0.0405],
        [ 0.0009,  0.3575,  0.0353,  ..., -0.0308,  0.0090,  0.0264]])

encoder.encoders.13.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.2508, 1.0442, 0.9562,  ..., 1.1801, 1.1859, 1.0494])

encoder.encoders.13.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.1161,  0.1374, -0.0086,  ...,  0.1423,  0.0533, -0.0601])

encoder.encoders.13.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[ 0.0736],
         [-0.0542],
         [-0.0416],
         ...,
         [ 0.0148],
         [-0.0089],
         [-0.0067]],

        [[-0.0876],
         [-0.0035],
         [-0.0083],
         ...,
         [-0.0356],
         [-0.0163],
         [ 0.0909]],

        [[ 0.0331],
         [ 0.0007],
         [ 0.0183],
         ...,
         [-0.0056],
         [ 0.0762],
         [ 0.0205]],

        ...,

        [[ 0.0618],
         [-0.1039],
         [-0.0363],
         ...,
         [-0.0291],
         [ 0.0161],
         [ 0.0351]],

        [[-0.0234],
         [-0.0503],
         [-0.0274],
         ...,
         [ 0.0087],
         [ 0.1224],
         [ 0.0047]],

        [[ 0.0230],
         [-0.0466],
         [ 0.0097],
         ...,
         [-0.0122],
         [ 0.0506],
         [ 0.0416]]])

encoder.encoders.13.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0148, -0.0025, -0.0065,  ..., -0.0244, -0.0069, -0.0513]],

        [[ 0.0111,  0.0010,  0.0081,  ..., -0.0020, -0.0022,  0.0020]],

        [[-0.0368,  0.0041, -0.0105,  ...,  0.0070,  0.0050,  0.0166]],

        ...,

        [[-0.0169, -0.0002,  0.0026,  ..., -0.0154, -0.0268, -0.0341]],

        [[-0.0419, -0.0127, -0.0219,  ..., -0.0112, -0.0017, -0.0091]],

        [[ 0.0424,  0.0083,  0.0090,  ...,  0.0143,  0.0078,  0.0484]]])

encoder.encoders.13.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([1.0313, 0.9702, 0.9782,  ..., 0.9972, 0.9918, 0.9848])

encoder.encoders.13.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0799, -0.0913, -0.1047,  ..., -0.0529, -0.0092, -0.0544])

encoder.encoders.13.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0089],
         [ 0.0402],
         [-0.0220],
         ...,
         [ 0.0112],
         [ 0.0429],
         [ 0.0102]],

        [[-0.0316],
         [ 0.0394],
         [-0.0596],
         ...,
         [-0.0002],
         [-0.0671],
         [ 0.0759]],

        [[-0.0396],
         [ 0.0223],
         [ 0.0222],
         ...,
         [-0.0172],
         [ 0.0352],
         [-0.0156]],

        ...,

        [[ 0.0232],
         [ 0.0666],
         [ 0.0154],
         ...,
         [-0.0632],
         [-0.0065],
         [ 0.0134]],

        [[ 0.0689],
         [-0.0211],
         [-0.0350],
         ...,
         [ 0.0413],
         [ 0.0786],
         [-0.0143]],

        [[ 0.0637],
         [-0.0171],
         [ 0.0314],
         ...,
         [-0.0093],
         [ 0.0261],
         [-0.0631]]])

encoder.encoders.13.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.2024, 1.0892, 1.0479,  ..., 1.1442, 1.0954, 1.0173])

encoder.encoders.13.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.2089,  0.2407,  0.1896,  ...,  0.1245, -0.1411,  0.0481])

encoder.encoders.13.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0261, -0.0107,  0.0263,  ...,  0.1143,  0.0134, -0.0232],
        [-0.0175,  0.0387, -0.0608,  ...,  0.0043,  0.0098,  0.0102],
        [-0.0145, -0.0267,  0.0121,  ..., -0.0603,  0.0190,  0.0309],
        ...,
        [ 0.0410, -0.0129,  0.0211,  ...,  0.0078,  0.0424, -0.0697],
        [-0.0344,  0.0137,  0.0085,  ..., -0.0847,  0.1695,  0.0147],
        [ 0.0182,  0.0346, -0.0482,  ...,  0.0127,  0.1035,  0.0342]])

encoder.encoders.13.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0231, -0.0246, -0.0281,  ..., -0.0199, -0.0084, -0.0325])

encoder.encoders.13.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0487, -0.0278,  0.0363,  ...,  0.0112,  0.0341,  0.0220],
        [-0.0638,  0.0326,  0.0432,  ..., -0.0287,  0.0124,  0.0271],
        [ 0.0300, -0.0395, -0.0545,  ...,  0.0269,  0.1211, -0.0032],
        ...,
        [-0.0155,  0.0473, -0.0380,  ...,  0.0140, -0.0303,  0.0387],
        [-0.0310,  0.0634, -0.0708,  ...,  0.0582, -0.0165, -0.0294],
        [ 0.0651,  0.0722, -0.0272,  ..., -0.0209, -0.0041, -0.0534]])

encoder.encoders.13.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0595,  0.0031, -0.0161,  ...,  0.0034, -0.0119, -0.0318])

encoder.encoders.13.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2380, 1.3040, 1.3773,  ..., 1.2499, 1.2279, 1.3167])

encoder.encoders.13.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.1448,  0.0102,  0.0388,  ...,  0.0132, -0.0617, -0.0497])

encoder.encoders.14.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.1204, 0.9206, 0.8568,  ..., 1.0146, 1.0092, 0.9509])

encoder.encoders.14.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.1953,  0.0989,  0.0136,  ...,  0.0711,  0.0211, -0.0144])

encoder.encoders.14.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0201, -0.0214, -0.0553,  ..., -0.0030,  0.0374, -0.0548],
        [ 0.0301, -0.0236,  0.0441,  ...,  0.0190,  0.0893, -0.0408],
        [ 0.0115,  0.0241, -0.0416,  ..., -0.0039,  0.0197,  0.0456],
        ...,
        [-0.0043, -0.0239,  0.0808,  ..., -0.0384,  0.0017,  0.0041],
        [ 0.0200, -0.0052, -0.0647,  ..., -0.0531,  0.0315, -0.0552],
        [ 0.0032,  0.0280, -0.0044,  ..., -0.0118,  0.0633, -0.0851]])

encoder.encoders.14.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0289, -0.0191, -0.0252,  ..., -0.0344, -0.0184, -0.0129])

encoder.encoders.14.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0061, -0.0107, -0.0256,  ..., -0.0502,  0.0337,  0.0499],
        [ 0.0563, -0.0275,  0.0252,  ...,  0.0229, -0.0215, -0.0005],
        [ 0.0710,  0.0018,  0.0025,  ..., -0.0041,  0.0141, -0.0016],
        ...,
        [-0.0242, -0.0324, -0.0352,  ...,  0.0149, -0.0025,  0.0086],
        [-0.0231,  0.0495, -0.0317,  ..., -0.0980,  0.0731,  0.0457],
        [ 0.0462, -0.0452,  0.0088,  ..., -0.0316,  0.0158, -0.0751]])

encoder.encoders.14.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0652, -0.0193,  0.0226,  ...,  0.0033, -0.0330, -0.0261])

encoder.encoders.14.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[ 0.0227,  0.0790, -0.3059,  ...,  0.1557,  0.2783,  0.1912],
        [-0.3375,  0.0094, -0.0005,  ..., -0.1377,  0.3078, -0.2786],
        [-0.3266,  0.1905, -0.2225,  ..., -0.1109, -0.1524,  0.1019],
        ...,
        [-0.3199,  0.1463,  0.1458,  ...,  0.0668,  0.0797, -0.1588],
        [-0.1107, -0.1671, -0.1916,  ..., -0.0510,  0.0259, -0.2504],
        [-0.3054, -0.1483,  0.0593,  ...,  0.1607, -0.2174,  0.0082]])

encoder.encoders.14.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[-0.2686, -0.0776,  0.3597,  ..., -0.2777, -0.3279, -0.3259],
        [ 0.3532, -0.0234, -0.2234,  ..., -0.0979, -0.1653, -0.0524],
        [ 0.2865, -0.0643, -0.0372,  ..., -0.0717,  0.0477,  0.0635],
        ...,
        [ 0.2888,  0.2994, -0.3280,  ..., -0.0559, -0.1334,  0.3753],
        [-0.1643,  0.1767,  0.1898,  ..., -0.1110,  0.0044, -0.2324],
        [-0.1879, -0.0265,  0.2156,  ..., -0.0811,  0.0774, -0.0218]])

encoder.encoders.14.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0347,  0.0194, -0.0490,  ...,  0.0119, -0.0303, -0.0233],
        [-0.0066, -0.0029, -0.0479,  ...,  0.0146, -0.0168,  0.0675],
        [-0.0349, -0.0114, -0.0601,  ..., -0.0540,  0.0188,  0.0462],
        ...,
        [ 0.0107, -0.0309, -0.0336,  ...,  0.0420,  0.0489,  0.0669],
        [-0.0073, -0.0426, -0.0010,  ..., -0.0078,  0.0197, -0.0125],
        [ 0.0301,  0.0430, -0.0313,  ..., -0.0114,  0.0480,  0.0374]])

encoder.encoders.14.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0328, -0.0093,  0.0081,  ...,  0.0577, -0.0887,  0.0246],
        [-0.0112, -0.0391, -0.0761,  ...,  0.0569, -0.0197, -0.0226],
        [ 0.0484, -0.0195,  0.0050,  ..., -0.0039,  0.0138,  0.0266],
        ...,
        [ 0.0189,  0.0454, -0.0561,  ..., -0.0392, -0.0357,  0.0245],
        [ 0.0392,  0.0208,  0.0031,  ...,  0.0377, -0.0013, -0.0042],
        [-0.0178,  0.0509, -0.0358,  ..., -0.0016,  0.0634, -0.0668]])

encoder.encoders.14.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 1.7328e-02, -4.3883e-03,  3.7679e-05,  ..., -4.3056e-02,
          1.9536e-02,  2.6749e-02],
        [-6.1249e-03, -8.1885e-03, -2.4016e-02,  ..., -1.8001e-05,
          3.6830e-02,  1.5289e-02],
        [ 4.7450e-02,  1.0169e-02,  4.5670e-02,  ...,  2.1915e-03,
          2.1157e-02, -4.5647e-02],
        ...,
        [-2.4499e-02,  1.0685e-02,  5.9930e-02,  ..., -2.5731e-02,
          7.1963e-03, -7.7668e-02],
        [-8.7039e-03,  1.6736e-02,  4.1252e-03,  ..., -1.6438e-02,
         -3.7309e-02,  3.2893e-03],
        [ 2.3870e-02, -1.8678e-02,  1.1167e-02,  ...,  5.0060e-02,
         -2.6126e-02,  3.3408e-02]])

encoder.encoders.14.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.7415, 0.6763, 0.6273,  ..., 0.7611, 0.7504, 0.6829])

encoder.encoders.14.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0408, -0.0103, -0.0135,  ..., -0.0587,  0.0023, -0.0130])

encoder.encoders.14.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8398, 0.8193, 0.8199,  ..., 0.8412, 0.8222, 0.7848])

encoder.encoders.14.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([ 0.0075,  0.0194,  0.0013,  ...,  0.0064, -0.0124, -0.0001])

encoder.encoders.14.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6510, 0.6247, 0.6351,  ..., 0.6565, 0.6421, 0.6493])

encoder.encoders.14.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0872, -0.0315, -0.0438,  ..., -0.0210,  0.0514,  0.0217])

encoder.encoders.14.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-2.6876e-02,  9.8955e-03,  1.8018e-02,  ...,  1.1357e-02,
         -3.7075e-02,  1.7663e-02],
        [-4.6114e-02,  1.8114e-02, -1.1384e-02,  ..., -4.9045e-05,
         -1.8617e-03,  4.7094e-02],
        [ 1.3226e-02, -8.5979e-02,  2.3067e-02,  ...,  2.0938e-02,
          2.2208e-02,  1.1836e-02],
        ...,
        [ 4.1827e-02, -3.0523e-02,  3.3975e-02,  ...,  6.4673e-02,
          5.7966e-03, -2.0279e-02],
        [-1.5505e-02,  3.2166e-03,  5.1686e-03,  ..., -4.9573e-02,
         -4.7071e-02, -6.8869e-02],
        [-1.8273e-02,  9.7794e-03, -7.8886e-03,  ...,  2.9092e-02,
          2.7933e-02, -4.6037e-02]])

encoder.encoders.14.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0789,  0.0511, -0.0217,  ..., -0.0551,  0.0313,  0.0082],
        [ 0.0298, -0.0807,  0.0014,  ..., -0.0392, -0.0363,  0.0348],
        [ 0.0162,  0.1510, -0.0596,  ..., -0.0020,  0.0142, -0.0070],
        ...,
        [-0.0030,  0.0332,  0.0208,  ..., -0.0442, -0.0054,  0.0053],
        [-0.0507,  0.0304, -0.0403,  ...,  0.0377,  0.0549,  0.0203],
        [-0.0164,  0.0365, -0.0171,  ..., -0.0322,  0.0360,  0.0288]])

encoder.encoders.14.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.1784, 1.0781, 0.9857,  ..., 1.1296, 1.1593, 1.1256])

encoder.encoders.14.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.1648, -0.1116, -0.0044,  ..., -0.0350, -0.0661, -0.0802])

encoder.encoders.14.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0906],
         [ 0.0195],
         [-0.0414],
         ...,
         [-0.0196],
         [ 0.0287],
         [-0.0239]],

        [[ 0.0096],
         [ 0.0079],
         [ 0.0110],
         ...,
         [ 0.0443],
         [-0.0340],
         [-0.0836]],

        [[ 0.0528],
         [-0.0360],
         [-0.0573],
         ...,
         [-0.0057],
         [ 0.0055],
         [-0.0261]],

        ...,

        [[-0.0499],
         [-0.1139],
         [-0.0460],
         ...,
         [-0.0419],
         [ 0.1251],
         [-0.0582]],

        [[ 0.0553],
         [ 0.0531],
         [-0.0024],
         ...,
         [-0.0334],
         [ 0.0215],
         [ 0.0431]],

        [[-0.0013],
         [ 0.0050],
         [ 0.0267],
         ...,
         [ 0.0352],
         [ 0.0305],
         [ 0.0525]]])

encoder.encoders.14.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-0.0069, -0.0011, -0.0083,  ...,  0.0007,  0.0126,  0.0011]],

        [[-0.0112, -0.0136, -0.0075,  ..., -0.0084, -0.0090, -0.0330]],

        [[-0.0028, -0.0052, -0.0050,  ..., -0.0125, -0.0196, -0.0339]],

        ...,

        [[ 0.0058, -0.0050, -0.0013,  ..., -0.0092, -0.0057, -0.0035]],

        [[ 0.0139, -0.0064, -0.0007,  ..., -0.0088,  0.0077, -0.0087]],

        [[ 0.0169,  0.0013,  0.0034,  ..., -0.0286, -0.0243, -0.0471]]])

encoder.encoders.14.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9784, 1.0540, 0.9955,  ..., 1.0443, 0.9612, 0.9696])

encoder.encoders.14.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0843, -0.0735, -0.0948,  ..., -0.0510, -0.0811, -0.0563])

encoder.encoders.14.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[-0.0004],
         [ 0.0331],
         [ 0.0486],
         ...,
         [ 0.0155],
         [-0.0566],
         [-0.0407]],

        [[ 0.0510],
         [ 0.0711],
         [-0.0594],
         ...,
         [-0.0503],
         [ 0.0482],
         [ 0.0185]],

        [[ 0.0189],
         [ 0.0018],
         [-0.0136],
         ...,
         [-0.0869],
         [-0.0243],
         [ 0.0973]],

        ...,

        [[ 0.0218],
         [ 0.0118],
         [-0.0043],
         ...,
         [-0.0006],
         [-0.0343],
         [ 0.0256]],

        [[-0.0324],
         [-0.0411],
         [-0.0621],
         ...,
         [-0.0073],
         [-0.0330],
         [-0.0051]],

        [[ 0.0293],
         [ 0.0275],
         [-0.0418],
         ...,
         [-0.0564],
         [-0.0121],
         [-0.0698]]])

encoder.encoders.14.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.1745, 1.0340, 1.0823,  ..., 1.0989, 1.2289, 1.1059])

encoder.encoders.14.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.2014, -0.1670,  0.0776,  ...,  0.0187, -0.2587, -0.0682])

encoder.encoders.14.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.1029,  0.0003, -0.0256,  ..., -0.0439, -0.0052,  0.0545],
        [ 0.0446, -0.0419,  0.0859,  ...,  0.0898, -0.0446, -0.0299],
        [ 0.1122, -0.0393, -0.0597,  ...,  0.0386,  0.0231, -0.0465],
        ...,
        [ 0.0165, -0.0410,  0.0105,  ..., -0.0067,  0.0578, -0.0204],
        [-0.0174,  0.0894,  0.0167,  ...,  0.0313, -0.0431,  0.0459],
        [ 0.0320,  0.0141,  0.0505,  ..., -0.0452,  0.0312, -0.0351]])

encoder.encoders.14.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0330,  0.0031, -0.0310,  ..., -0.0304, -0.0297, -0.0472])

encoder.encoders.14.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0333,  0.0028, -0.0055,  ...,  0.0115,  0.1001,  0.0617],
        [ 0.0654, -0.0171, -0.0244,  ..., -0.0023,  0.0046,  0.0439],
        [-0.0229,  0.0498,  0.0293,  ..., -0.0353, -0.0045,  0.0238],
        ...,
        [ 0.0356, -0.0506,  0.0537,  ..., -0.0268, -0.0544,  0.0011],
        [ 0.0018,  0.0404,  0.0101,  ...,  0.0075,  0.0161, -0.0653],
        [ 0.0765, -0.0078, -0.0072,  ...,  0.0368,  0.0032,  0.0015]])

encoder.encoders.14.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0483, -0.0149,  0.0132,  ...,  0.0072, -0.0442, -0.0248])

encoder.encoders.14.norm_final.weight-torch.Size([1280])-torch.float32
tensor([1.2668, 1.2959, 1.3293,  ..., 1.2663, 1.2408, 1.2916])

encoder.encoders.14.norm_final.bias-torch.Size([1280])-torch.float32
tensor([-0.0973,  0.0016,  0.0245,  ..., -0.0239, -0.0763, -0.0847])

encoder.encoders.15.norm_ff_macaron.weight-torch.Size([1280])-torch.float32
tensor([1.0916, 0.9574, 0.9515,  ..., 0.9880, 1.0340, 1.0051])

encoder.encoders.15.norm_ff_macaron.bias-torch.Size([1280])-torch.float32
tensor([-0.2364, -0.1189,  0.0183,  ..., -0.0243, -0.1058, -0.0738])

encoder.encoders.15.feed_forward_macaron.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0021,  0.0342, -0.0400,  ...,  0.0636,  0.0112,  0.0338],
        [-0.0012,  0.0109, -0.0125,  ..., -0.0312,  0.0393, -0.0381],
        [-0.0170, -0.0757,  0.0265,  ..., -0.0141,  0.0128,  0.0925],
        ...,
        [-0.0503, -0.0073, -0.0053,  ...,  0.0027,  0.0404, -0.0222],
        [ 0.0011, -0.0171, -0.0597,  ...,  0.0319,  0.0901,  0.0187],
        [-0.0021, -0.0111,  0.0213,  ..., -0.0850,  0.0162,  0.0160]])

encoder.encoders.15.feed_forward_macaron.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0062, -0.0400, -0.0464,  ..., -0.0426, -0.0344,  0.0019])

encoder.encoders.15.feed_forward_macaron.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0159, -0.0008, -0.0179,  ..., -0.0622, -0.0240,  0.0068],
        [-0.0550,  0.0183,  0.0285,  ..., -0.0308, -0.0978,  0.0471],
        [-0.0114, -0.0019, -0.0241,  ..., -0.0031,  0.0066, -0.0084],
        ...,
        [ 0.0175, -0.0772,  0.0140,  ...,  0.0471,  0.0412, -0.0594],
        [-0.0174, -0.0173, -0.0240,  ..., -0.0220,  0.0477, -0.0331],
        [-0.0193, -0.0363,  0.0284,  ..., -0.0623,  0.0482,  0.0260]])

encoder.encoders.15.feed_forward_macaron.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0497,  0.0176,  0.0053,  ...,  0.0010, -0.0777, -0.0599])

encoder.encoders.15.self_attn.pos_bias_u-torch.Size([20, 64])-torch.float32
tensor([[-0.1832,  0.3310, -0.3392,  ..., -0.2497, -0.0046,  0.0229],
        [-0.0459,  0.3006,  0.0493,  ...,  0.0920, -0.2083, -0.0980],
        [ 0.3302, -0.1919,  0.2003,  ..., -0.1638, -0.1223,  0.2517],
        ...,
        [ 0.0585,  0.1742, -0.1502,  ...,  0.2022, -0.0513,  0.1433],
        [-0.0091,  0.0546, -0.0858,  ...,  0.1887, -0.0882, -0.0455],
        [ 0.0029,  0.2378,  0.2394,  ..., -0.1040, -0.2286, -0.2563]])

encoder.encoders.15.self_attn.pos_bias_v-torch.Size([20, 64])-torch.float32
tensor([[ 0.0168, -0.2663,  0.2350,  ...,  0.2312, -0.0966, -0.1085],
        [ 0.3423,  0.0590,  0.2341,  ..., -0.1317,  0.2003, -0.0057],
        [ 0.0368,  0.1747, -0.0176,  ..., -0.2324,  0.0616,  0.1437],
        ...,
        [-0.1000,  0.0399, -0.1403,  ..., -0.1250, -0.2276,  0.1779],
        [-0.0680,  0.1114, -0.0711,  ...,  0.2934,  0.3209, -0.2526],
        [ 0.1672,  0.1387, -0.1293,  ...,  0.1566,  0.1876,  0.1560]])

encoder.encoders.15.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0560, -0.0243, -0.0203,  ..., -0.0493, -0.0300, -0.0511],
        [-0.0218, -0.0494,  0.0893,  ...,  0.0327,  0.0209, -0.0476],
        [-0.0410,  0.0672, -0.0141,  ..., -0.0083,  0.0123,  0.0169],
        ...,
        [ 0.0474,  0.0261, -0.0296,  ..., -0.0321, -0.0166, -0.0294],
        [ 0.0304, -0.0341,  0.0022,  ...,  0.0786,  0.0256,  0.0059],
        [ 0.0139, -0.0236,  0.0344,  ..., -0.0260, -0.0207,  0.0232]])

encoder.encoders.15.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0097, -0.0224, -0.0009,  ...,  0.0063, -0.0233,  0.0319],
        [-0.0584,  0.0294, -0.0167,  ..., -0.0552, -0.0289, -0.0081],
        [-0.0353,  0.0166,  0.0452,  ..., -0.0531, -0.0205,  0.0147],
        ...,
        [-0.0684, -0.0026,  0.0271,  ..., -0.0124, -0.0649,  0.0177],
        [-0.0182, -0.0381, -0.0108,  ..., -0.0612, -0.0172,  0.0212],
        [ 0.0050, -0.0283, -0.0274,  ...,  0.0204, -0.0134,  0.0286]])

encoder.encoders.15.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0075, -0.0246, -0.0267,  ...,  0.0024, -0.0064, -0.0766],
        [ 0.0010, -0.0425, -0.0490,  ...,  0.0063, -0.0268, -0.0492],
        [-0.0202, -0.0604,  0.0537,  ..., -0.0106,  0.0293, -0.0052],
        ...,
        [-0.0111, -0.0284, -0.0246,  ..., -0.0193, -0.0012,  0.0010],
        [ 0.0192, -0.0515,  0.0387,  ...,  0.0164, -0.0429,  0.0080],
        [-0.0203,  0.0473,  0.0143,  ..., -0.0193,  0.0241, -0.0152]])

encoder.encoders.15.self_attn.layer_norm_q.weight-torch.Size([1280])-torch.float32
tensor([0.7508, 0.7274, 0.6674,  ..., 0.7740, 0.6827, 0.7470])

encoder.encoders.15.self_attn.layer_norm_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0130, -0.0088, -0.0206,  ...,  0.0164, -0.0250,  0.0161])

encoder.encoders.15.self_attn.layer_norm_k.weight-torch.Size([1280])-torch.float32
tensor([0.8957, 0.8683, 0.8024,  ..., 0.8764, 0.8831, 0.8822])

encoder.encoders.15.self_attn.layer_norm_k.bias-torch.Size([1280])-torch.float32
tensor([-0.0278, -0.0302, -0.0355,  ..., -0.0483, -0.0133, -0.0321])

encoder.encoders.15.self_attn.layer_norm_v.weight-torch.Size([1280])-torch.float32
tensor([0.6768, 0.6783, 0.6687,  ..., 0.7162, 0.6975, 0.7228])

encoder.encoders.15.self_attn.layer_norm_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0504, -0.0109, -0.0297,  ..., -0.0049,  0.0136, -0.0021])

encoder.encoders.15.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0090, -0.0173, -0.0054,  ...,  0.0275,  0.0331,  0.0130],
        [ 0.0164, -0.0317, -0.0596,  ...,  0.0099,  0.0449,  0.0328],
        [ 0.0092,  0.0512,  0.0454,  ...,  0.0383, -0.0569,  0.0333],
        ...,
        [-0.0473, -0.0525,  0.0155,  ...,  0.0323, -0.0180, -0.0332],
        [ 0.0241, -0.0172,  0.0183,  ..., -0.0640, -0.0305, -0.0008],
        [ 0.0512, -0.0228, -0.0244,  ...,  0.0088, -0.0767, -0.0296]])

encoder.encoders.15.self_attn.linear_pos.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0398, -0.0307,  0.0351,  ..., -0.0187, -0.0174,  0.0092],
        [ 0.0338, -0.0362,  0.0611,  ..., -0.0054,  0.0142,  0.0416],
        [-0.0524,  0.0305, -0.0527,  ...,  0.0173,  0.0277,  0.0495],
        ...,
        [-0.0041, -0.0261, -0.0243,  ...,  0.0712,  0.0465,  0.0384],
        [-0.0017,  0.0540, -0.0102,  ..., -0.0451, -0.0100,  0.0156],
        [-0.0424, -0.0661, -0.0483,  ...,  0.0362, -0.0011, -0.0067]])

encoder.encoders.15.norm_conv.weight-torch.Size([1280])-torch.float32
tensor([1.1097, 1.0915, 1.0688,  ..., 1.1944, 1.1453, 1.1610])

encoder.encoders.15.norm_conv.bias-torch.Size([1280])-torch.float32
tensor([-0.0977, -0.0083, -0.0721,  ..., -0.0627, -0.0032, -0.0505])

encoder.encoders.15.conv_module.pointwise_conv1.weight-torch.Size([5120, 1280, 1])-torch.float32
tensor([[[-0.0187],
         [-0.0063],
         [ 0.0425],
         ...,
         [-0.0098],
         [-0.0263],
         [-0.0080]],

        [[-0.0323],
         [ 0.0311],
         [ 0.0518],
         ...,
         [ 0.0390],
         [-0.0456],
         [ 0.0290]],

        [[-0.0639],
         [ 0.0166],
         [ 0.0514],
         ...,
         [-0.0335],
         [-0.0040],
         [-0.0109]],

        ...,

        [[ 0.0124],
         [-0.0205],
         [ 0.0312],
         ...,
         [ 0.0850],
         [-0.0045],
         [-0.0448]],

        [[ 0.0836],
         [ 0.0900],
         [-0.0243],
         ...,
         [-0.0119],
         [ 0.0602],
         [ 0.0504]],

        [[ 0.0342],
         [-0.0069],
         [ 0.0101],
         ...,
         [ 0.0288],
         [ 0.0008],
         [-0.0566]]])

encoder.encoders.15.conv_module.depthwise_conv.weight-torch.Size([2560, 1, 33])-torch.float32
tensor([[[-1.4701e-02, -1.0117e-02, -7.2125e-03,  ..., -6.3304e-03,
           6.2267e-03, -4.5333e-03]],

        [[-3.7924e-02, -1.6577e-02, -2.4422e-02,  ..., -3.2372e-03,
           1.4789e-02,  2.1242e-02]],

        [[-3.2290e-02, -5.8319e-03, -1.1912e-02,  ..., -1.9181e-03,
           7.4760e-03,  1.3768e-02]],

        ...,

        [[ 7.3657e-03, -2.9676e-03,  1.0731e-02,  ..., -2.4761e-02,
          -3.5402e-05, -2.2993e-02]],

        [[ 1.2385e-02, -8.6682e-03,  6.3520e-03,  ..., -1.4095e-02,
          -9.7319e-03, -3.3640e-03]],

        [[ 3.6750e-03,  6.3778e-03, -2.7758e-03,  ..., -1.1464e-04,
          -3.0007e-04, -2.6566e-03]]])

encoder.encoders.15.conv_module.norm.weight-torch.Size([2560])-torch.float32
tensor([0.9596, 0.9780, 1.0131,  ..., 0.9982, 0.9884, 0.9745])

encoder.encoders.15.conv_module.norm.bias-torch.Size([2560])-torch.float32
tensor([-0.0858, -0.0852, -0.0643,  ..., -0.0637, -0.0521, -0.0713])

encoder.encoders.15.conv_module.pointwise_conv2.weight-torch.Size([1280, 2560, 1])-torch.float32
tensor([[[ 0.0362],
         [-0.0370],
         [ 0.0155],
         ...,
         [ 0.0455],
         [-0.0769],
         [-0.0348]],

        [[-0.0208],
         [ 0.0291],
         [ 0.0121],
         ...,
         [ 0.0926],
         [-0.0068],
         [-0.0289]],

        [[-0.0274],
         [-0.0269],
         [-0.0162],
         ...,
         [-0.0114],
         [-0.0248],
         [-0.0306]],

        ...,

        [[-0.0153],
         [-0.0083],
         [-0.0222],
         ...,
         [-0.0127],
         [ 0.0530],
         [-0.0912]],

        [[-0.0540],
         [-0.0697],
         [-0.0442],
         ...,
         [ 0.0361],
         [-0.0426],
         [-0.0540]],

        [[ 0.0736],
         [-0.0302],
         [ 0.0331],
         ...,
         [ 0.0618],
         [-0.0188],
         [ 0.0134]]])

encoder.encoders.15.norm_ff.weight-torch.Size([1280])-torch.float32
tensor([1.0949, 1.0731, 1.0923,  ..., 1.1461, 1.1462, 1.1637])

encoder.encoders.15.norm_ff.bias-torch.Size([1280])-torch.float32
tensor([-0.0695,  0.0113,  0.0388,  ..., -0.1234, -0.1663, -0.1361])

encoder.encoders.15.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0182,  0.0390,  0.0172,  ...,  0.0533, -0.0153,  0.0233],
        [ 0.0540, -0.0373,  0.0228,  ..., -0.0063,  0.0909, -0.0060],
        [-0.0200, -0.0861,  0.0173,  ...,  0.0442, -0.0098, -0.0203],
        ...,
        [-0.0006, -0.0199, -0.0896,  ..., -0.0584,  0.0126, -0.0481],
        [ 0.0087, -0.0480,  0.0485,  ...,  0.0080,  0.0297,  0.0051],
        [ 0.0052,  0.0648, -0.0200,  ..., -0.0306, -0.0330, -0.0909]])

encoder.encoders.15.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0036, -0.0523, -0.0597,  ...,  0.0036, -0.0141, -0.0018])

encoder.encoders.15.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0398,  0.0117, -0.0525,  ..., -0.0415,  0.0176, -0.0010],
        [-0.0053, -0.0570,  0.0301,  ...,  0.0030,  0.0366, -0.0369],
        [-0.0276,  0.0151, -0.0273,  ..., -0.0125, -0.0157,  0.0298],
        ...,
        [-0.0435,  0.0346, -0.0606,  ..., -0.0021,  0.0621, -0.0505],
        [ 0.0054, -0.0179,  0.0314,  ...,  0.0043, -0.0036, -0.0136],
        [ 0.0241,  0.0409, -0.0201,  ..., -0.0111, -0.0222, -0.0299]])

encoder.encoders.15.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0541,  0.0116,  0.0112,  ..., -0.0204,  0.0007, -0.0348])

encoder.encoders.15.norm_final.weight-torch.Size([1280])-torch.float32
tensor([0.6941, 0.7063, 0.7188,  ..., 0.7269, 0.7284, 0.7322])

encoder.encoders.15.norm_final.bias-torch.Size([1280])-torch.float32
tensor([ 0.0203, -0.0203, -0.0335,  ...,  0.0030,  0.0097,  0.0027])

decoder.embed.0.weight-torch.Size([7832, 1280])-torch.float32
tensor([[ 0.0404,  0.3387, -0.0333,  ..., -0.0084,  0.0070, -0.0430],
        [ 0.0366, -0.0388,  0.0794,  ..., -0.0127, -0.0379,  0.0422],
        [ 0.0396,  0.3381, -0.0338,  ..., -0.0093,  0.0064, -0.0436],
        ...,
        [-0.0257,  0.1415,  0.0013,  ..., -0.0058, -0.0260,  0.0460],
        [ 0.0404,  0.3277, -0.0359,  ..., -0.0120,  0.0029, -0.0479],
        [ 0.0406,  0.3360, -0.0359,  ..., -0.0108,  0.0085, -0.0457]])

decoder.decoders.0.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.4514, 0.2470, 0.6939,  ..., 0.5763, 0.6630, 0.5476])

decoder.decoders.0.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.2351, -0.1056,  0.1455,  ..., -0.1059,  0.0665, -0.0225])

decoder.decoders.0.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-3.4332e-02,  6.2948e-02,  4.5062e-02,  ..., -3.0599e-02,
         -1.0710e-02, -6.5414e-02],
        [ 1.3820e-02, -2.9831e-02,  5.6754e-02,  ...,  5.3406e-02,
         -2.4744e-02,  7.7909e-03],
        [-4.9968e-02, -3.5870e-02, -1.7457e-02,  ...,  5.5072e-02,
         -4.3198e-02,  1.0955e-01],
        ...,
        [-1.0247e-01, -1.8118e-05, -4.0602e-03,  ...,  4.0005e-02,
         -4.2912e-02, -7.5106e-02],
        [-3.0462e-03, -7.3699e-03,  5.7765e-03,  ..., -1.1473e-02,
         -3.2301e-02,  2.6463e-02],
        [ 1.3975e-02, -4.8467e-03, -2.8989e-02,  ...,  2.2105e-02,
         -9.0801e-03, -3.7889e-02]])

decoder.decoders.0.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0779, -0.0396,  0.0872,  ...,  0.0266, -0.0010, -0.0322])

decoder.decoders.0.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0418, -0.0845,  0.0094,  ...,  0.0589,  0.0325,  0.0831],
        [-0.0139,  0.0491, -0.0008,  ..., -0.0302, -0.1244,  0.0282],
        [-0.0719,  0.0602, -0.0434,  ...,  0.0410, -0.0347, -0.0186],
        ...,
        [ 0.0266,  0.0330, -0.0197,  ...,  0.0005,  0.0898,  0.0471],
        [ 0.0443,  0.0166, -0.0321,  ...,  0.0585, -0.0284, -0.0240],
        [-0.0058, -0.0388,  0.0339,  ...,  0.0531,  0.0152, -0.0125]])

decoder.decoders.0.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-4.9777e-03, -6.8766e-02, -1.3765e-02,  ...,  4.0513e-02,
          7.2238e-02,  2.6901e-02],
        [-1.4614e-02,  1.9514e-02,  6.3099e-02,  ..., -2.5968e-02,
         -8.8298e-05, -6.5098e-02],
        [-5.5094e-02, -8.9081e-03,  2.4039e-02,  ...,  3.0299e-02,
         -6.4199e-02,  3.4204e-02],
        ...,
        [ 4.3218e-02,  8.8618e-03, -3.6940e-02,  ...,  1.9951e-02,
         -2.6522e-02, -3.0103e-02],
        [ 1.8624e-02, -2.8252e-03, -2.8895e-02,  ...,  4.2424e-02,
          1.5774e-02,  3.5362e-02],
        [ 1.9722e-02, -1.2144e-02, -1.2702e-02,  ...,  7.0679e-02,
          5.6579e-02, -5.4241e-02]])

decoder.decoders.0.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0713,  0.0134,  0.0228,  ...,  0.0673, -0.0494,  0.0064])

decoder.decoders.0.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0107, -0.0029,  0.0526,  ..., -0.0170, -0.0873, -0.0087],
        [-0.1006,  0.1441, -0.1363,  ...,  0.0013, -0.0613, -0.0492],
        [-0.0633, -0.0265,  0.0168,  ...,  0.0200, -0.0240,  0.0424],
        ...,
        [-0.0308, -0.0024, -0.0372,  ...,  0.0329, -0.0360, -0.0015],
        [ 0.0606,  0.0314, -0.0265,  ..., -0.0206,  0.0455, -0.0068],
        [ 0.0634, -0.0080, -0.0492,  ..., -0.0149,  0.0247,  0.0615]])

decoder.decoders.0.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0273, -0.0165, -0.0266,  ...,  0.0743,  0.0262,  0.0159])

decoder.decoders.0.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.7934, 0.8221, 0.7534,  ..., 0.7595, 0.8008, 0.7929])

decoder.decoders.0.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0715, -0.0714,  0.1197,  ..., -0.0800,  0.0242,  0.0043])

decoder.decoders.0.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-1.3275e-02,  5.0806e-02,  4.6876e-06,  ..., -7.3294e-02,
          5.4100e-02, -2.3675e-02],
        [ 9.0709e-02, -1.4370e-01,  5.1832e-02,  ...,  2.7709e-03,
          7.6671e-02, -5.1070e-02],
        [ 1.3643e-02,  1.4901e-02,  2.1303e-02,  ..., -3.5795e-02,
          1.4852e-02, -8.9344e-03],
        ...,
        [ 1.2738e-02, -2.8375e-02, -4.9526e-02,  ..., -4.4211e-02,
         -1.4667e-02,  2.5673e-02],
        [-6.2478e-02, -3.1037e-02,  2.3743e-02,  ...,  1.4406e-02,
          1.6238e-03,  8.7584e-03],
        [-2.2059e-02,  4.8941e-03, -5.4736e-02,  ..., -8.2002e-02,
         -2.6376e-02, -7.2337e-02]])

decoder.decoders.0.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0258, -0.0743, -0.0023,  ...,  0.0306,  0.0351,  0.0071])

decoder.decoders.0.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-4.6682e-02, -3.3117e-02,  3.8143e-03,  ...,  4.3910e-02,
          1.5426e-02, -2.6382e-02],
        [ 3.2763e-02, -6.1544e-03,  5.2400e-02,  ...,  2.6611e-02,
         -2.5274e-02,  3.9485e-02],
        [-2.6120e-02, -2.8317e-02,  4.7158e-02,  ...,  2.3342e-02,
          6.2960e-03,  3.9788e-02],
        ...,
        [ 3.8922e-02, -4.2901e-02,  6.3752e-02,  ..., -1.1701e-02,
         -1.7274e-02, -2.2779e-02],
        [ 2.0113e-03,  3.3351e-02, -2.8582e-02,  ..., -2.2119e-02,
         -6.3519e-02,  3.2747e-02],
        [ 3.5910e-02,  2.7434e-02, -4.0363e-03,  ...,  1.0298e-01,
          7.7559e-02,  8.2017e-07]])

decoder.decoders.0.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0246,  0.0530,  0.0390,  ...,  0.0178,  0.0103,  0.0551],
        [ 0.0564, -0.0033, -0.0063,  ..., -0.0204, -0.0536, -0.0084],
        [-0.0078, -0.0946,  0.0124,  ...,  0.0295, -0.0113,  0.0029],
        ...,
        [-0.0161,  0.0673,  0.0131,  ...,  0.0257, -0.0440,  0.0729],
        [ 0.0113,  0.0156,  0.0259,  ..., -0.0016,  0.0212,  0.0219],
        [-0.0235, -0.0160,  0.0607,  ..., -0.0354, -0.0102,  0.0853]])

decoder.decoders.0.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0157,  0.1030,  0.0202,  ..., -0.0295,  0.0150,  0.0167])

decoder.decoders.0.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0294, -0.0663,  0.0310,  ..., -0.0615, -0.0377,  0.0609],
        [ 0.0117, -0.0348, -0.0033,  ..., -0.0216,  0.0395,  0.0291],
        [-0.0009, -0.0107, -0.0439,  ..., -0.0317,  0.0192,  0.0122],
        ...,
        [-0.0055,  0.0972, -0.0574,  ...,  0.0095,  0.0704,  0.0256],
        [ 0.0522,  0.0347,  0.0262,  ...,  0.0078, -0.0086,  0.0477],
        [-0.0007,  0.0426, -0.0177,  ...,  0.0366, -0.0312, -0.0024]])

decoder.decoders.0.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0557, -0.0022, -0.0036,  ...,  0.0500,  0.0298,  0.0070])

decoder.decoders.0.norm3.weight-torch.Size([1280])-torch.float32
tensor([0.8405, 0.6817, 0.8232,  ..., 0.9709, 0.9822, 0.9198])

decoder.decoders.0.norm3.bias-torch.Size([1280])-torch.float32
tensor([ 0.0327, -0.1610,  0.0548,  ...,  0.0274,  0.0759,  0.0431])

decoder.decoders.0.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0004,  0.0177,  0.0134,  ..., -0.0050,  0.0303,  0.0049],
        [ 0.0331, -0.0107,  0.0170,  ...,  0.0615, -0.0410,  0.0402],
        [-0.0053, -0.0134,  0.0267,  ..., -0.0117,  0.0520,  0.0168],
        ...,
        [ 0.0484,  0.0288,  0.0490,  ..., -0.0618, -0.0142,  0.0393],
        [-0.0203, -0.0023, -0.0184,  ...,  0.0021,  0.0495,  0.0088],
        [ 0.0175, -0.0097,  0.0111,  ..., -0.0449, -0.0688,  0.0159]])

decoder.decoders.0.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0400, -0.0048, -0.0363,  ..., -0.0195, -0.0425,  0.0013])

decoder.decoders.0.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0161, -0.0243,  0.0048,  ...,  0.0080, -0.0164,  0.0381],
        [-0.0973,  0.0069, -0.0106,  ..., -0.0097,  0.1492, -0.0012],
        [ 0.0123, -0.0570, -0.0218,  ...,  0.0245, -0.0150, -0.0074],
        ...,
        [-0.0286, -0.0508,  0.0422,  ..., -0.0479,  0.0641, -0.0148],
        [-0.0498,  0.0087,  0.0514,  ...,  0.0353, -0.0217, -0.0452],
        [ 0.0019, -0.0382, -0.0501,  ..., -0.0042,  0.0209, -0.0276]])

decoder.decoders.0.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0757, -0.0617,  0.0061,  ...,  0.0728,  0.0738,  0.0221])

decoder.decoders.1.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7197, 0.2609, 0.8304,  ..., 0.8111, 0.8395, 0.8348])

decoder.decoders.1.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.1480, -0.4170,  0.0592,  ..., -0.0551,  0.0293, -0.0132])

decoder.decoders.1.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0187, -0.1321,  0.0423,  ...,  0.0494,  0.1122, -0.0103],
        [ 0.0692,  0.0748, -0.0192,  ..., -0.0128, -0.0600,  0.0108],
        [-0.0214,  0.0602,  0.0245,  ...,  0.0532, -0.0619,  0.0101],
        ...,
        [-0.0877, -0.0294, -0.0359,  ...,  0.0333, -0.0912, -0.0021],
        [-0.0338, -0.0369,  0.0046,  ..., -0.0065,  0.0856, -0.0523],
        [-0.0353,  0.0210, -0.0336,  ..., -0.0385, -0.0299, -0.0038]])

decoder.decoders.1.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0062,  0.0372,  0.0330,  ...,  0.0012,  0.0486, -0.2185])

decoder.decoders.1.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0527, -0.0350, -0.0676,  ..., -0.0356, -0.0702,  0.0910],
        [ 0.0153,  0.0040,  0.0274,  ..., -0.0090, -0.0891, -0.0480],
        [ 0.0641,  0.0252, -0.0511,  ..., -0.0224,  0.0032, -0.0218],
        ...,
        [-0.0062,  0.0016, -0.0408,  ...,  0.0967, -0.0291,  0.1469],
        [-0.0113,  0.0441, -0.0791,  ..., -0.0285,  0.0354,  0.0202],
        [ 0.0391, -0.0968, -0.0416,  ...,  0.0771, -0.0058,  0.0109]])

decoder.decoders.1.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0059,  0.0380, -0.0167,  ...,  0.0748,  0.0071, -0.0080],
        [-0.0154, -0.0073,  0.0563,  ...,  0.0179, -0.0520, -0.0094],
        [ 0.0039,  0.0108, -0.0668,  ...,  0.0111, -0.0204, -0.0161],
        ...,
        [ 0.0947,  0.0126, -0.0241,  ...,  0.0699, -0.0961,  0.0620],
        [-0.0526,  0.0373,  0.0841,  ..., -0.0009,  0.0187,  0.0705],
        [ 0.0331, -0.0075,  0.0215,  ...,  0.0134, -0.0358,  0.0026]])

decoder.decoders.1.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0267, -0.0086,  0.0559,  ..., -0.0247,  0.0101, -0.0297])

decoder.decoders.1.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 6.5019e-02,  3.6481e-02, -7.4307e-03,  ..., -6.1254e-02,
         -1.8621e-02, -4.4979e-02],
        [ 7.8955e-02, -4.0751e-02,  2.6275e-02,  ..., -3.7750e-02,
          9.7628e-05, -8.3039e-03],
        [-5.3002e-02, -9.1832e-03, -7.3312e-02,  ..., -1.1181e-02,
         -5.1719e-02, -2.9368e-02],
        ...,
        [-6.0064e-02,  2.0798e-02, -1.1571e-02,  ..., -1.7107e-03,
         -6.8774e-02, -3.2118e-02],
        [ 1.9513e-02, -4.6875e-02, -2.5435e-02,  ...,  2.9857e-02,
         -4.2504e-02,  3.2817e-02],
        [ 1.1709e-02,  1.2996e-03, -2.1577e-02,  ..., -4.2893e-02,
         -5.6042e-02, -1.1212e-02]])

decoder.decoders.1.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0202, -0.0755,  0.0074,  ...,  0.0205,  0.0567,  0.0286])

decoder.decoders.1.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9867, 0.8650, 0.9838,  ..., 0.9167, 0.9864, 0.9327])

decoder.decoders.1.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0495, -0.1482,  0.0209,  ...,  0.0008,  0.0545, -0.0019])

decoder.decoders.1.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0431,  0.0949, -0.0452,  ..., -0.0025, -0.0160,  0.0063],
        [-0.0923,  0.0051, -0.0229,  ...,  0.0541, -0.0387, -0.0718],
        [-0.0498,  0.1763,  0.0657,  ..., -0.0243, -0.0206,  0.0337],
        ...,
        [ 0.0213,  0.0234,  0.0128,  ...,  0.0291, -0.0024, -0.0211],
        [-0.0393,  0.0120,  0.0044,  ..., -0.0167, -0.0740,  0.0119],
        [ 0.0175,  0.0360, -0.0473,  ..., -0.0672, -0.0327, -0.0157]])

decoder.decoders.1.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0332, -0.0603,  0.0243,  ...,  0.0662, -0.0096,  0.0489])

decoder.decoders.1.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0469, -0.0529,  0.0086,  ..., -0.0148,  0.0778, -0.0602],
        [ 0.0039,  0.0630, -0.0371,  ...,  0.0378, -0.0132,  0.0051],
        [-0.0267,  0.0570,  0.0499,  ...,  0.0465,  0.0463,  0.0507],
        ...,
        [ 0.0253, -0.0327,  0.0162,  ...,  0.0433,  0.0008, -0.0283],
        [-0.0316, -0.0152,  0.0538,  ...,  0.0016,  0.0416, -0.0135],
        [ 0.0024,  0.0316, -0.0258,  ..., -0.0561,  0.0007, -0.0010]])

decoder.decoders.1.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0398, -0.0154,  0.0523,  ..., -0.0233,  0.0042, -0.0474],
        [ 0.0519,  0.0109, -0.0297,  ..., -0.0422,  0.0401,  0.0457],
        [ 0.0055,  0.0191,  0.0380,  ...,  0.0159,  0.0450, -0.0508],
        ...,
        [ 0.0161, -0.0080, -0.0371,  ..., -0.0254, -0.0206, -0.0194],
        [-0.0235,  0.0002, -0.0101,  ..., -0.0425,  0.0149, -0.0204],
        [-0.0121, -0.0565, -0.0332,  ...,  0.0369, -0.0628,  0.0430]])

decoder.decoders.1.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0380, -0.0029,  0.0133,  ...,  0.0379,  0.0190,  0.0069])

decoder.decoders.1.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0006, -0.0045, -0.0292,  ..., -0.0485, -0.0126,  0.0391],
        [-0.0919,  0.0002, -0.1443,  ...,  0.0332,  0.0488, -0.0558],
        [-0.0484,  0.0410,  0.0400,  ..., -0.0066, -0.0073, -0.0382],
        ...,
        [ 0.0603, -0.0178,  0.0340,  ...,  0.0222, -0.0053,  0.0283],
        [ 0.0520,  0.0462,  0.0008,  ..., -0.0133, -0.0345, -0.0069],
        [ 0.0437,  0.0385,  0.0273,  ...,  0.0434,  0.0244,  0.0163]])

decoder.decoders.1.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0382,  0.0305,  0.0134,  ...,  0.0594,  0.0537, -0.0089])

decoder.decoders.1.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.0396, 0.8451, 0.9474,  ..., 1.0490, 1.0959, 1.0017])

decoder.decoders.1.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.1512, -0.1637, -0.0945,  ...,  0.0193,  0.1178,  0.0015])

decoder.decoders.1.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0581, -0.0713,  0.0289,  ..., -0.0171, -0.0156, -0.0322],
        [-0.0085, -0.0213,  0.0402,  ..., -0.0429,  0.0019,  0.0321],
        [ 0.0228, -0.0351, -0.0057,  ...,  0.0658, -0.0158,  0.0023],
        ...,
        [-0.0455, -0.0105,  0.0395,  ...,  0.0004,  0.0217, -0.0688],
        [ 0.0014, -0.0214,  0.0366,  ..., -0.0582, -0.0350,  0.0724],
        [ 0.0537,  0.0152,  0.0238,  ..., -0.0371,  0.0501, -0.1030]])

decoder.decoders.1.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0322, -0.0312, -0.0345,  ..., -0.0353, -0.0071, -0.0344])

decoder.decoders.1.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0904, -0.0198, -0.0750,  ...,  0.0056,  0.0102, -0.0098],
        [-0.0456, -0.0172, -0.0297,  ..., -0.0176, -0.0044, -0.0073],
        [-0.0047, -0.0700,  0.0272,  ...,  0.0076, -0.0247, -0.0312],
        ...,
        [-0.0102,  0.0160, -0.0259,  ...,  0.0565,  0.0218, -0.0083],
        [ 0.0044,  0.0800,  0.0537,  ...,  0.0106, -0.0133,  0.0590],
        [ 0.0090, -0.0329,  0.0334,  ..., -0.1160, -0.0342, -0.0111]])

decoder.decoders.1.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0955, -0.1910,  0.0320,  ...,  0.0906,  0.0492,  0.0266])

decoder.decoders.2.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7254, 0.4010, 0.8003,  ..., 0.7952, 0.8475, 0.8259])

decoder.decoders.2.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.1420, -0.4153,  0.0396,  ..., -0.0127,  0.0120, -0.0096])

decoder.decoders.2.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0706,  0.0662, -0.0083,  ..., -0.0793,  0.0898,  0.0393],
        [-0.0437, -0.0681, -0.0124,  ...,  0.1129, -0.0326,  0.0850],
        [-0.0187, -0.0183,  0.0132,  ...,  0.0043, -0.0615,  0.0590],
        ...,
        [ 0.0194,  0.0203, -0.0623,  ..., -0.0644, -0.0503,  0.0523],
        [-0.0288,  0.0646, -0.0354,  ...,  0.0106, -0.0636,  0.0512],
        [ 0.0004,  0.0753, -0.0599,  ..., -0.1031,  0.0023, -0.0439]])

decoder.decoders.2.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0160,  0.0384,  0.0372,  ..., -0.0067, -0.0054,  0.0206])

decoder.decoders.2.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0962,  0.0080,  0.0217,  ...,  0.0190,  0.0084, -0.0341],
        [ 0.0920,  0.0052, -0.0445,  ..., -0.0377, -0.0240, -0.0457],
        [ 0.0805,  0.0080,  0.0261,  ..., -0.0445,  0.0955, -0.0785],
        ...,
        [-0.0560, -0.0397,  0.0407,  ..., -0.0080,  0.0290, -0.0324],
        [-0.0003, -0.0503,  0.0205,  ..., -0.0549, -0.0585,  0.0333],
        [-0.0724,  0.0265,  0.0448,  ..., -0.0021,  0.0569,  0.0027]])

decoder.decoders.2.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0485, -0.0235, -0.0037,  ...,  0.0363, -0.0281,  0.0024],
        [ 0.0176, -0.0229, -0.1085,  ...,  0.0672,  0.0950, -0.0135],
        [ 0.0078, -0.0407,  0.0041,  ..., -0.0345, -0.0777,  0.0193],
        ...,
        [ 0.0182, -0.0486,  0.0115,  ...,  0.0820, -0.0178,  0.0452],
        [ 0.0062,  0.0621, -0.0284,  ..., -0.0586, -0.0374, -0.0069],
        [ 0.0474, -0.0108, -0.0151,  ..., -0.0551, -0.0447, -0.0552]])

decoder.decoders.2.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0324,  0.0062, -0.0245,  ...,  0.0108, -0.0036,  0.0018])

decoder.decoders.2.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0126, -0.0274,  0.0237,  ..., -0.0046, -0.0125, -0.0664],
        [ 0.0481,  0.0039,  0.0015,  ...,  0.1114, -0.0507,  0.0847],
        [-0.0406,  0.0510,  0.0613,  ..., -0.0666,  0.0068, -0.0439],
        ...,
        [-0.0102,  0.1113, -0.0740,  ..., -0.0264,  0.0582,  0.0264],
        [-0.0074, -0.0281,  0.0220,  ..., -0.0160,  0.0078,  0.0464],
        [ 0.0299, -0.0701, -0.0509,  ...,  0.0045,  0.0146,  0.0348]])

decoder.decoders.2.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0510, -0.0217, -0.0024,  ...,  0.0248,  0.0365,  0.0241])

decoder.decoders.2.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9379, 0.9297, 0.9649,  ..., 0.9165, 0.9380, 0.9271])

decoder.decoders.2.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0889, -0.1684,  0.0564,  ..., -0.0070,  0.0444, -0.0016])

decoder.decoders.2.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0722, -0.0098,  0.0739,  ...,  0.0414, -0.0035,  0.0235],
        [-0.0636, -0.0123, -0.0407,  ...,  0.0144, -0.0624,  0.0412],
        [-0.0138,  0.1024,  0.0619,  ...,  0.0119,  0.0250, -0.0869],
        ...,
        [ 0.0194,  0.0101,  0.0674,  ..., -0.0195, -0.0263, -0.0686],
        [-0.0078,  0.0044, -0.0155,  ..., -0.0294, -0.0958,  0.0230],
        [ 0.0130,  0.0025,  0.0737,  ...,  0.0291, -0.0175, -0.0150]])

decoder.decoders.2.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0020, -0.0069,  0.0152,  ..., -0.0353, -0.0079, -0.0316])

decoder.decoders.2.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0323,  0.0794,  0.0422,  ...,  0.0150, -0.0282, -0.0347],
        [ 0.0091, -0.0209,  0.0162,  ..., -0.0272, -0.0142, -0.0447],
        [-0.0220, -0.0808, -0.0251,  ..., -0.0242,  0.0335,  0.0526],
        ...,
        [-0.0389, -0.0177, -0.0282,  ..., -0.0068, -0.0217, -0.0187],
        [-0.0529,  0.0028, -0.0496,  ..., -0.0093,  0.0490,  0.0361],
        [ 0.0093,  0.1039, -0.0778,  ...,  0.0302, -0.0104,  0.0634]])

decoder.decoders.2.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0043,  0.0013, -0.0013,  ..., -0.0407,  0.0293,  0.0343],
        [-0.0104, -0.0160, -0.0377,  ...,  0.0108,  0.0331, -0.0403],
        [ 0.0235,  0.0206, -0.0082,  ..., -0.0725,  0.0727, -0.0856],
        ...,
        [-0.0027,  0.0498, -0.0172,  ...,  0.0005, -0.0034, -0.0914],
        [-0.0835,  0.0402,  0.0438,  ..., -0.0187, -0.0611, -0.0696],
        [ 0.0182,  0.0334, -0.0086,  ..., -0.0261,  0.0232,  0.0435]])

decoder.decoders.2.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0128, -0.0256, -0.0136,  ..., -0.0212, -0.0070,  0.0117])

decoder.decoders.2.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0236, -0.0160,  0.0019,  ..., -0.0044,  0.0133, -0.0307],
        [-0.0023,  0.0115,  0.0781,  ...,  0.0133, -0.0162, -0.0261],
        [-0.0344,  0.0187, -0.0243,  ..., -0.0195, -0.0118,  0.0886],
        ...,
        [-0.0191, -0.0473,  0.0131,  ..., -0.0458,  0.0209,  0.0081],
        [-0.0454,  0.0042, -0.0635,  ..., -0.0317, -0.0375,  0.0513],
        [ 0.0081,  0.0138,  0.0366,  ...,  0.0427, -0.0330,  0.0093]])

decoder.decoders.2.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0401,  0.0339,  0.0347,  ...,  0.0393,  0.0027,  0.0235])

decoder.decoders.2.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1031, 0.9564, 1.0155,  ..., 1.0714, 1.0434, 0.9753])

decoder.decoders.2.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.2032, -0.0327,  0.0060,  ...,  0.0790,  0.0374, -0.0237])

decoder.decoders.2.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0192, -0.0672, -0.0254,  ...,  0.0102,  0.0170, -0.0098],
        [-0.0187, -0.0401,  0.0083,  ...,  0.0144,  0.0435, -0.0693],
        [-0.0007, -0.0015,  0.0390,  ...,  0.0112, -0.0032,  0.0617],
        ...,
        [ 0.0005,  0.0258, -0.0306,  ..., -0.0418, -0.0381,  0.0317],
        [ 0.0064,  0.0602,  0.0384,  ..., -0.0312,  0.0567, -0.0077],
        [ 0.0003, -0.0001, -0.0261,  ...,  0.0096,  0.0337,  0.0776]])

decoder.decoders.2.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0103, -0.0373, -0.0004,  ..., -0.0334,  0.0060,  0.0311])

decoder.decoders.2.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0218,  0.0227, -0.0265,  ..., -0.0035, -0.0021, -0.0438],
        [ 0.0331, -0.0319,  0.0091,  ...,  0.0204, -0.0263,  0.0328],
        [-0.0478,  0.0688, -0.0137,  ...,  0.0264, -0.0788,  0.0237],
        ...,
        [-0.0497,  0.0329, -0.0057,  ...,  0.0240, -0.0374,  0.0496],
        [ 0.0097,  0.0249,  0.0800,  ..., -0.0247, -0.0408,  0.0185],
        [ 0.0150, -0.0182, -0.0586,  ..., -0.0279, -0.0075,  0.0189]])

decoder.decoders.2.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0663, -0.0966,  0.0547,  ...,  0.0485,  0.0391,  0.0228])

decoder.decoders.3.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7790, 0.5374, 0.8277,  ..., 0.7833, 0.8038, 0.8284])

decoder.decoders.3.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.1271, -0.3176,  0.0152,  ..., -0.0238,  0.0093,  0.0320])

decoder.decoders.3.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0498,  0.0648,  0.0063,  ...,  0.0307,  0.0040, -0.0253],
        [-0.0324, -0.0091,  0.0463,  ..., -0.0237, -0.0293,  0.0273],
        [ 0.0292,  0.0479,  0.0506,  ..., -0.0782, -0.0289,  0.0648],
        ...,
        [-0.0805, -0.0004,  0.0482,  ...,  0.0549, -0.0096, -0.0217],
        [-0.0138,  0.0461,  0.0454,  ..., -0.0341, -0.0435,  0.0495],
        [-0.0096,  0.0081, -0.0503,  ..., -0.0223, -0.0761, -0.0040]])

decoder.decoders.3.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0436, -0.0259, -0.0428,  ...,  0.1270,  0.0601, -0.1799])

decoder.decoders.3.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0012, -0.0021, -0.0266,  ..., -0.0083, -0.0286,  0.0058],
        [ 0.0031,  0.0047, -0.0539,  ..., -0.0430, -0.0496,  0.0038],
        [-0.0515,  0.0313, -0.0696,  ..., -0.0210, -0.0129,  0.0836],
        ...,
        [-0.0326,  0.0595,  0.0682,  ...,  0.0308,  0.0157,  0.0215],
        [-0.0595,  0.0281,  0.0737,  ...,  0.0059, -0.0405,  0.0201],
        [-0.0019, -0.1188, -0.0991,  ...,  0.0257, -0.0699, -0.0580]])

decoder.decoders.3.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0213, -0.0090, -0.1106,  ...,  0.1048,  0.0152,  0.0408],
        [ 0.0785, -0.0065, -0.0149,  ...,  0.0461, -0.0331, -0.0525],
        [ 0.0325,  0.0255, -0.0363,  ..., -0.0611,  0.0502, -0.0126],
        ...,
        [ 0.0731, -0.0437, -0.0089,  ..., -0.0119,  0.0132, -0.0677],
        [-0.0974,  0.0352,  0.0417,  ...,  0.0795, -0.0079, -0.0299],
        [ 0.0267,  0.0194, -0.0967,  ..., -0.0343,  0.0641, -0.0627]])

decoder.decoders.3.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0013, -0.0072,  0.0298,  ..., -0.0494,  0.0127, -0.0034])

decoder.decoders.3.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0184, -0.0828,  0.0105,  ..., -0.0501,  0.0360, -0.0241],
        [ 0.0007,  0.0476, -0.0139,  ...,  0.0027, -0.0533, -0.0073],
        [ 0.1215,  0.0397,  0.0293,  ..., -0.0627, -0.0030,  0.0581],
        ...,
        [-0.0787,  0.0482,  0.0196,  ...,  0.0369,  0.0021,  0.0429],
        [-0.0031,  0.0089, -0.0459,  ...,  0.0047,  0.0484, -0.0152],
        [-0.0033,  0.0689, -0.0794,  ...,  0.0797,  0.0433, -0.0094]])

decoder.decoders.3.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0486, -0.0323,  0.0239,  ...,  0.0252,  0.0028,  0.0216])

decoder.decoders.3.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9796, 0.8733, 0.9687,  ..., 1.0191, 0.9978, 1.0768])

decoder.decoders.3.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0864, -0.1689, -0.0224,  ..., -0.0230,  0.0530, -0.0113])

decoder.decoders.3.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0200,  0.0091, -0.0441,  ..., -0.0198, -0.1162, -0.0337],
        [ 0.0759, -0.0242, -0.0011,  ..., -0.0045,  0.0876, -0.0524],
        [-0.0349, -0.0308, -0.0877,  ..., -0.0145, -0.0292,  0.0711],
        ...,
        [ 0.0453, -0.0920,  0.0195,  ..., -0.0388,  0.0085, -0.0322],
        [-0.0171, -0.0703,  0.0958,  ..., -0.0180, -0.0126,  0.0597],
        [ 0.0830,  0.0175, -0.0015,  ...,  0.0117, -0.0333, -0.0407]])

decoder.decoders.3.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0221,  0.0129,  0.0009,  ..., -0.0228,  0.0138,  0.0672])

decoder.decoders.3.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0129,  0.0145,  0.0845,  ..., -0.0277, -0.0193, -0.1014],
        [-0.0515, -0.0154, -0.0580,  ...,  0.0504,  0.0220,  0.0093],
        [-0.0100,  0.0461,  0.0615,  ...,  0.0999, -0.0253, -0.0704],
        ...,
        [-0.0299,  0.0435,  0.0319,  ...,  0.0148,  0.0281, -0.0414],
        [ 0.0281, -0.0498, -0.0186,  ..., -0.0154, -0.0339,  0.0121],
        [ 0.0033, -0.0742, -0.0031,  ..., -0.0241, -0.0085,  0.0935]])

decoder.decoders.3.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0055, -0.0240, -0.0079,  ...,  0.0103, -0.0193, -0.0083],
        [ 0.0250,  0.0406, -0.0229,  ...,  0.0138, -0.0277, -0.0383],
        [ 0.0610,  0.0356, -0.0232,  ...,  0.0161, -0.0449, -0.0326],
        ...,
        [-0.0099, -0.0136, -0.0058,  ...,  0.0419, -0.0063, -0.0080],
        [ 0.0030, -0.0176, -0.0177,  ...,  0.0099, -0.0520,  0.0299],
        [-0.0582, -0.0194,  0.0476,  ...,  0.0071, -0.0458, -0.0314]])

decoder.decoders.3.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0588, -0.0354, -0.0383,  ..., -0.0083, -0.0072,  0.0504])

decoder.decoders.3.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0748, -0.0082, -0.0120,  ..., -0.0538,  0.0216,  0.0397],
        [ 0.0010, -0.0515,  0.0291,  ..., -0.0518,  0.0555, -0.0168],
        [ 0.0977,  0.0318,  0.0332,  ..., -0.0151,  0.0534, -0.0194],
        ...,
        [-0.0452, -0.0664, -0.0088,  ...,  0.0614, -0.0302,  0.0787],
        [ 0.0627,  0.0263,  0.0010,  ...,  0.0139, -0.0897, -0.0354],
        [-0.0211,  0.0129, -0.0258,  ..., -0.0101,  0.0071, -0.0156]])

decoder.decoders.3.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0639,  0.0028,  0.0401,  ...,  0.0053, -0.0233,  0.0219])

decoder.decoders.3.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.0875, 1.0317, 0.9992,  ..., 1.0723, 1.0410, 1.0219])

decoder.decoders.3.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.1587,  0.0517,  0.1437,  ...,  0.1471,  0.0647,  0.0162])

decoder.decoders.3.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0978, -0.0769, -0.0802,  ...,  0.0484, -0.0406, -0.0226],
        [-0.0123,  0.0515,  0.0106,  ..., -0.0084, -0.0309,  0.0231],
        [ 0.0471,  0.0252, -0.0415,  ...,  0.0504,  0.0271,  0.0105],
        ...,
        [ 0.0365, -0.0804,  0.0263,  ...,  0.0161, -0.0787,  0.0154],
        [ 0.0179, -0.0932, -0.0728,  ...,  0.0204,  0.0067, -0.0515],
        [ 0.0395, -0.0027,  0.0044,  ...,  0.0139, -0.0695, -0.0050]])

decoder.decoders.3.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0006,  0.0051,  0.0111,  ..., -0.0518, -0.0215, -0.0178])

decoder.decoders.3.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0824, -0.0396,  0.0610,  ..., -0.0090,  0.0324, -0.0072],
        [ 0.0401, -0.0637, -0.0301,  ..., -0.0488,  0.0239,  0.0053],
        [ 0.0071,  0.0060,  0.0311,  ..., -0.0399,  0.0147,  0.0377],
        ...,
        [ 0.0604,  0.0357, -0.0551,  ...,  0.0108,  0.0244,  0.0205],
        [ 0.0038, -0.0918,  0.0492,  ...,  0.0552,  0.0009,  0.0170],
        [ 0.0277, -0.0515,  0.0418,  ...,  0.1099,  0.0426, -0.0184]])

decoder.decoders.3.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0180, -0.0840,  0.0533,  ...,  0.0001,  0.0390,  0.0121])

decoder.decoders.4.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7689, 0.5554, 0.8297,  ..., 0.7756, 0.8713, 0.8546])

decoder.decoders.4.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.1189, -0.3497, -0.0005,  ..., -0.0026, -0.0027,  0.0125])

decoder.decoders.4.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0779, -0.0738,  0.0376,  ...,  0.0252,  0.0167,  0.0807],
        [-0.0165, -0.0011, -0.0355,  ..., -0.0877,  0.0729, -0.0232],
        [ 0.0320, -0.0223,  0.0255,  ..., -0.0163,  0.0100,  0.0054],
        ...,
        [ 0.0128, -0.0476, -0.0087,  ..., -0.0924, -0.0627,  0.0051],
        [-0.0045, -0.0371,  0.0878,  ...,  0.0500,  0.0118, -0.0583],
        [ 0.0507, -0.0402, -0.0225,  ...,  0.0341, -0.0140, -0.0104]])

decoder.decoders.4.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0524,  0.0187,  0.0035,  ..., -0.0545,  0.0156,  0.0020])

decoder.decoders.4.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0955, -0.0209, -0.0596,  ...,  0.0554,  0.0220,  0.0313],
        [-0.0500,  0.0520, -0.0259,  ..., -0.0151, -0.0214,  0.1186],
        [ 0.0148,  0.0108,  0.0179,  ..., -0.0077, -0.0839, -0.0325],
        ...,
        [-0.0274,  0.0013,  0.0409,  ..., -0.0111,  0.0226, -0.0481],
        [-0.0176,  0.0604,  0.0611,  ..., -0.0739, -0.0523, -0.0102],
        [ 0.0325, -0.0049, -0.0172,  ...,  0.0150,  0.0386,  0.0184]])

decoder.decoders.4.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0558,  0.0246, -0.0105,  ...,  0.0163,  0.0738,  0.0197],
        [ 0.0361,  0.0103,  0.0768,  ...,  0.0043, -0.0804, -0.0260],
        [-0.0506, -0.0067,  0.0058,  ...,  0.0432,  0.0196, -0.0363],
        ...,
        [-0.0037,  0.0239,  0.0522,  ..., -0.0390,  0.0380, -0.0050],
        [ 0.0036, -0.0361, -0.0280,  ...,  0.0240,  0.0540, -0.0376],
        [-0.0011,  0.0193, -0.0519,  ...,  0.0217,  0.0530,  0.0158]])

decoder.decoders.4.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0120, -0.0102,  0.0183,  ..., -0.0172,  0.0241, -0.0273])

decoder.decoders.4.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0303, -0.0265, -0.0478,  ...,  0.0483, -0.0509,  0.0407],
        [-0.0835, -0.0075, -0.0386,  ..., -0.0256,  0.0401,  0.0571],
        [-0.0653, -0.0031, -0.0985,  ...,  0.0217,  0.0138, -0.0351],
        ...,
        [-0.0496, -0.0004, -0.0365,  ..., -0.0368,  0.0101,  0.0570],
        [ 0.0312,  0.0460, -0.0722,  ...,  0.0077, -0.0052,  0.0121],
        [ 0.0322,  0.0553, -0.0323,  ..., -0.0055,  0.0350, -0.0075]])

decoder.decoders.4.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0441, -0.0895, -0.0133,  ...,  0.0386,  0.0058,  0.0055])

decoder.decoders.4.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9690, 0.8626, 0.9858,  ..., 0.9851, 0.9948, 1.0676])

decoder.decoders.4.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.1027, -0.1439, -0.0101,  ..., -0.0330,  0.0127, -0.0170])

decoder.decoders.4.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0212,  0.0048,  0.0443,  ...,  0.0151,  0.0145, -0.0601],
        [-0.0406, -0.0053,  0.0476,  ...,  0.0529, -0.0009,  0.0402],
        [ 0.0551, -0.0451,  0.0143,  ...,  0.0419, -0.0084, -0.0466],
        ...,
        [ 0.0612, -0.0403,  0.0224,  ...,  0.0475,  0.0062,  0.0202],
        [ 0.0045, -0.0056, -0.0487,  ..., -0.0089, -0.0296,  0.0451],
        [ 0.0388,  0.0367, -0.0280,  ...,  0.0361,  0.0541,  0.0238]])

decoder.decoders.4.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0218, -0.0001,  0.0283,  ..., -0.0039,  0.0086, -0.0130])

decoder.decoders.4.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0393, -0.0065,  0.0004,  ...,  0.0237,  0.0921, -0.1016],
        [-0.0744, -0.0137, -0.0134,  ...,  0.0440,  0.0251,  0.0646],
        [ 0.0002,  0.0452, -0.0868,  ...,  0.0459, -0.0082,  0.0168],
        ...,
        [ 0.0100, -0.0476, -0.0048,  ...,  0.0108,  0.0179,  0.0075],
        [-0.0030, -0.0469,  0.0335,  ...,  0.0062,  0.0443,  0.0113],
        [-0.0725,  0.0471, -0.0058,  ..., -0.0310,  0.0369,  0.0144]])

decoder.decoders.4.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0653,  0.0479,  0.0064,  ..., -0.0285,  0.0425, -0.0181],
        [ 0.0273,  0.0371, -0.0904,  ...,  0.0261,  0.0493, -0.0393],
        [-0.0207, -0.0094,  0.0109,  ..., -0.0666,  0.0182,  0.0132],
        ...,
        [ 0.0644,  0.0435,  0.0273,  ..., -0.0581,  0.0644, -0.0121],
        [ 0.0265,  0.0222,  0.0063,  ..., -0.0300,  0.0153,  0.0798],
        [ 0.0690,  0.0086, -0.0734,  ...,  0.0199,  0.0329, -0.0510]])

decoder.decoders.4.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0189, -0.0196,  0.0207,  ...,  0.0319,  0.0021,  0.0209])

decoder.decoders.4.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0183, -0.0076, -0.0046,  ...,  0.0349,  0.0136, -0.0038],
        [-0.0198,  0.0511, -0.0016,  ..., -0.0396,  0.0114, -0.0247],
        [ 0.0748,  0.0346, -0.0903,  ...,  0.0004,  0.0176,  0.0659],
        ...,
        [-0.0362, -0.0149, -0.0062,  ...,  0.0059,  0.0147,  0.0298],
        [-0.0168,  0.0359, -0.1095,  ..., -0.0095,  0.0321, -0.0142],
        [ 0.0568,  0.0137, -0.0125,  ...,  0.0959, -0.0310, -0.0100]])

decoder.decoders.4.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0607, -0.0261, -0.0008,  ...,  0.0276,  0.0080,  0.0262])

decoder.decoders.4.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1278, 1.0072, 1.0624,  ..., 1.0754, 1.0671, 1.0667])

decoder.decoders.4.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.1573,  0.0937,  0.1182,  ...,  0.0993,  0.1360,  0.0370])

decoder.decoders.4.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0318,  0.0578,  0.0340,  ..., -0.0366,  0.0508, -0.0173],
        [ 0.0551,  0.0251, -0.0118,  ..., -0.0877, -0.0173,  0.0012],
        [ 0.0433,  0.0330, -0.0346,  ...,  0.0339,  0.0606,  0.0216],
        ...,
        [-0.0566,  0.0351, -0.0414,  ...,  0.0037, -0.0061,  0.0149],
        [ 0.0022, -0.0300,  0.0113,  ..., -0.0472,  0.0430,  0.0011],
        [ 0.0229, -0.0556,  0.0078,  ...,  0.0461,  0.0397, -0.0227]])

decoder.decoders.4.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0312, -0.0080, -0.0067,  ..., -0.0054, -0.0300,  0.0091])

decoder.decoders.4.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0029, -0.0347, -0.0328,  ...,  0.0920,  0.0788, -0.0211],
        [-0.0722,  0.0109, -0.0400,  ..., -0.0306, -0.0500, -0.0786],
        [-0.0536, -0.0072,  0.0426,  ..., -0.0186, -0.0040, -0.0701],
        ...,
        [-0.0149, -0.0075, -0.0863,  ...,  0.0360,  0.0222, -0.0273],
        [-0.0660,  0.0047, -0.0805,  ..., -0.0523, -0.0682,  0.0342],
        [ 0.0167, -0.0145, -0.0644,  ..., -0.0193,  0.0186,  0.0268]])

decoder.decoders.4.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0100, -0.1159,  0.0034,  ...,  0.0167, -0.0038,  0.0157])

decoder.decoders.5.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7821, 0.5949, 0.8126,  ..., 0.8185, 0.8356, 0.8748])

decoder.decoders.5.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0929, -0.3802,  0.0076,  ...,  0.0190,  0.0166,  0.0300])

decoder.decoders.5.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0370, -0.0265, -0.0813,  ...,  0.0104, -0.0307, -0.0552],
        [-0.0206,  0.0491, -0.0877,  ...,  0.0165, -0.0277, -0.0649],
        [-0.0356,  0.0344, -0.0492,  ...,  0.0262, -0.0397,  0.0047],
        ...,
        [-0.0079,  0.0189, -0.0128,  ..., -0.0060,  0.0007,  0.0380],
        [ 0.0213, -0.0010,  0.0425,  ...,  0.0237,  0.0403, -0.0014],
        [-0.0606,  0.0609,  0.0395,  ...,  0.0474, -0.0130,  0.0713]])

decoder.decoders.5.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0238, -0.0897,  0.0198,  ..., -0.0083,  0.0550,  0.0271])

decoder.decoders.5.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0096, -0.0036,  0.0421,  ...,  0.0062,  0.0241,  0.0588],
        [ 0.0493,  0.0094, -0.0103,  ...,  0.0387,  0.0046,  0.0050],
        [-0.0030, -0.0021, -0.0584,  ..., -0.0704, -0.0072, -0.0144],
        ...,
        [-0.0450, -0.0456,  0.0283,  ...,  0.0122, -0.0338, -0.0302],
        [ 0.0103,  0.1087, -0.0590,  ...,  0.0117,  0.0806,  0.0349],
        [ 0.0414, -0.0044,  0.0328,  ...,  0.0340,  0.0081, -0.0475]])

decoder.decoders.5.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0357,  0.0061, -0.0837,  ..., -0.0238,  0.1036, -0.0659],
        [-0.0465,  0.0025,  0.1038,  ..., -0.1025, -0.0332,  0.0179],
        [-0.0600, -0.0034, -0.0045,  ...,  0.0041,  0.0337,  0.0767],
        ...,
        [-0.0598, -0.0067,  0.0836,  ..., -0.0462,  0.0618, -0.0142],
        [ 0.0287,  0.0227,  0.0271,  ..., -0.0100, -0.0967,  0.0295],
        [-0.0114, -0.0039, -0.0159,  ..., -0.0524, -0.0295,  0.0372]])

decoder.decoders.5.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0164,  0.0426,  0.0250,  ...,  0.0263, -0.0167, -0.0196])

decoder.decoders.5.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0607,  0.1102,  0.0018,  ...,  0.0057, -0.0193,  0.0342],
        [-0.0223,  0.0799, -0.0573,  ..., -0.0602, -0.0781,  0.0176],
        [ 0.0212, -0.1022,  0.0792,  ...,  0.0057,  0.0180,  0.0026],
        ...,
        [-0.0250,  0.0312, -0.0548,  ..., -0.0769,  0.0464, -0.0594],
        [-0.0002,  0.0332, -0.0312,  ..., -0.0102, -0.0207, -0.0088],
        [ 0.0492, -0.0371, -0.1085,  ...,  0.0125,  0.0255,  0.1103]])

decoder.decoders.5.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0195, -0.1351, -0.0154,  ...,  0.0015,  0.0250,  0.0148])

decoder.decoders.5.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9382, 0.8613, 0.9748,  ..., 0.9936, 0.9899, 1.0405])

decoder.decoders.5.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.1105, -0.1135,  0.0359,  ...,  0.0120,  0.0432,  0.0220])

decoder.decoders.5.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0074, -0.0216, -0.0621,  ..., -0.0510,  0.0484, -0.0280],
        [-0.0262,  0.0509, -0.0276,  ..., -0.0044, -0.0855, -0.0511],
        [-0.0341, -0.0343, -0.0019,  ..., -0.0849,  0.0045,  0.0065],
        ...,
        [ 0.0147,  0.0769,  0.0144,  ..., -0.0179, -0.0628,  0.0391],
        [-0.0649,  0.0128,  0.0039,  ..., -0.0492,  0.0011,  0.0493],
        [ 0.0055,  0.0030, -0.0179,  ...,  0.0495,  0.0132,  0.0165]])

decoder.decoders.5.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0112, -0.0238, -0.0161,  ...,  0.0096, -0.0199,  0.0032])

decoder.decoders.5.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0352,  0.0233,  0.0238,  ...,  0.0269,  0.0065,  0.0611],
        [ 0.0071,  0.0433,  0.0121,  ..., -0.0117, -0.0231, -0.0557],
        [-0.0450, -0.0637, -0.0057,  ..., -0.0955,  0.0267, -0.0686],
        ...,
        [-0.0814,  0.0024,  0.0180,  ...,  0.0906,  0.0113, -0.0011],
        [ 0.0354, -0.0601, -0.0450,  ..., -0.0480,  0.0274, -0.0164],
        [-0.0153,  0.0456, -0.0063,  ..., -0.0191,  0.0610,  0.0488]])

decoder.decoders.5.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0287,  0.0072, -0.0016,  ...,  0.0708,  0.1193, -0.0116],
        [-0.0109,  0.0131,  0.0399,  ..., -0.0598, -0.0660,  0.0688],
        [-0.0131, -0.0856, -0.0212,  ...,  0.0067, -0.0181,  0.0061],
        ...,
        [-0.0478,  0.0435, -0.0303,  ...,  0.0403, -0.0569,  0.0342],
        [-0.0729,  0.0555,  0.0558,  ..., -0.0252,  0.0248,  0.0164],
        [ 0.0596,  0.0278,  0.0646,  ...,  0.0181, -0.0043, -0.0242]])

decoder.decoders.5.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0049,  0.0599, -0.0191,  ...,  0.0211,  0.0141, -0.0154])

decoder.decoders.5.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0826, -0.0775, -0.0441,  ..., -0.0443, -0.0238,  0.0135],
        [ 0.0179, -0.0152,  0.0319,  ..., -0.0104,  0.0084,  0.0155],
        [ 0.0743,  0.0028,  0.1057,  ...,  0.0213, -0.0479, -0.0215],
        ...,
        [-0.0316, -0.0775, -0.0994,  ..., -0.0304, -0.0524,  0.0227],
        [ 0.0302,  0.0555,  0.0209,  ...,  0.0315,  0.0521,  0.0323],
        [ 0.0137,  0.0252, -0.0247,  ..., -0.0158,  0.0439, -0.0063]])

decoder.decoders.5.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0235, -0.0939,  0.0015,  ...,  0.0174, -0.0053, -0.0373])

decoder.decoders.5.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1650, 0.9722, 1.0476,  ..., 1.0682, 1.1130, 1.1070])

decoder.decoders.5.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.2143,  0.1063,  0.0406,  ..., -0.0640,  0.0998, -0.0719])

decoder.decoders.5.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0365,  0.0283,  0.0013,  ...,  0.0573,  0.0261,  0.0316],
        [-0.0325, -0.0940,  0.0561,  ...,  0.0354, -0.0134, -0.0072],
        [-0.0421,  0.0087, -0.0117,  ..., -0.0793, -0.0665, -0.0035],
        ...,
        [-0.0627,  0.0360,  0.0023,  ...,  0.0304,  0.0214, -0.0181],
        [-0.0025,  0.0081,  0.0058,  ..., -0.0198,  0.0055,  0.0668],
        [ 0.0313,  0.0218, -0.0313,  ..., -0.0454,  0.0559, -0.0056]])

decoder.decoders.5.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0106, -0.0028, -0.0200,  ..., -0.0427, -0.0087,  0.0068])

decoder.decoders.5.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0998, -0.0621,  0.0068,  ...,  0.0748, -0.0664,  0.0088],
        [ 0.0190,  0.0077, -0.0487,  ...,  0.0379,  0.0013, -0.0335],
        [-0.0510,  0.0190,  0.0248,  ..., -0.0445,  0.0508, -0.0905],
        ...,
        [-0.0349,  0.0337,  0.1197,  ..., -0.0038, -0.0061, -0.0084],
        [ 0.0084, -0.0044, -0.0304,  ..., -0.0038, -0.0432, -0.0574],
        [-0.0522,  0.0354, -0.0086,  ..., -0.0111, -0.0592, -0.0880]])

decoder.decoders.5.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0130, -0.1837, -0.0211,  ...,  0.0047, -0.0105, -0.0143])

decoder.decoders.6.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8199, 0.5729, 0.8655,  ..., 0.8388, 0.8376, 0.8448])

decoder.decoders.6.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0970, -0.3342, -0.0056,  ...,  0.0156,  0.0122,  0.0234])

decoder.decoders.6.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0548, -0.0281, -0.0269,  ...,  0.0069,  0.0048, -0.0840],
        [-0.0052, -0.0303,  0.0208,  ..., -0.0165,  0.0384, -0.0403],
        [-0.0123,  0.0293,  0.0208,  ..., -0.0260,  0.0084,  0.0312],
        ...,
        [ 0.0020, -0.0096, -0.0325,  ..., -0.0014,  0.0004, -0.0168],
        [-0.0092, -0.0290,  0.0039,  ..., -0.0205, -0.0531,  0.0335],
        [-0.0028, -0.0505, -0.0113,  ...,  0.0278, -0.0346,  0.0331]])

decoder.decoders.6.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0070, -0.0976,  0.0529,  ..., -0.0299,  0.0541, -0.0178])

decoder.decoders.6.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0204, -0.0023,  0.0029,  ...,  0.0130, -0.0310, -0.0817],
        [ 0.0536, -0.0706, -0.0199,  ...,  0.0768, -0.0524,  0.0052],
        [ 0.0332,  0.0439, -0.0309,  ..., -0.0634, -0.0547,  0.0748],
        ...,
        [-0.0100, -0.0101, -0.0585,  ...,  0.0166, -0.0126,  0.0700],
        [-0.0160, -0.0070, -0.0034,  ..., -0.0372,  0.0046, -0.0054],
        [-0.0025, -0.0472, -0.0217,  ..., -0.0019, -0.0312,  0.0111]])

decoder.decoders.6.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0609,  0.0423,  0.0580,  ..., -0.0092, -0.0578,  0.0031],
        [-0.0091, -0.0107, -0.0202,  ...,  0.0077,  0.0090,  0.0038],
        [-0.0298,  0.0309,  0.0340,  ..., -0.0503,  0.0086, -0.0227],
        ...,
        [ 0.0199, -0.0452,  0.0275,  ..., -0.0133,  0.0476, -0.0065],
        [-0.0117, -0.0280, -0.0017,  ..., -0.0408,  0.0565,  0.0472],
        [-0.0660,  0.0117, -0.0246,  ...,  0.0112, -0.0242,  0.0531]])

decoder.decoders.6.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0189, -0.0109,  0.0162,  ...,  0.0086,  0.0093,  0.0105])

decoder.decoders.6.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0603, -0.0267,  0.0413,  ...,  0.0023, -0.0224,  0.0785],
        [-0.0091, -0.0600, -0.0929,  ...,  0.0266, -0.0381,  0.0144],
        [-0.0105,  0.0769,  0.0051,  ...,  0.0256, -0.0124, -0.0160],
        ...,
        [ 0.0069, -0.0110,  0.0025,  ...,  0.0465,  0.0085, -0.0096],
        [ 0.0257,  0.0048,  0.0576,  ...,  0.0310, -0.0734,  0.0578],
        [-0.0221,  0.0259, -0.0044,  ..., -0.0098, -0.0105, -0.0422]])

decoder.decoders.6.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0060, -0.1783,  0.0029,  ..., -0.0115, -0.0159, -0.0216])

decoder.decoders.6.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9542, 0.8348, 0.9988,  ..., 1.0133, 1.0192, 1.0593])

decoder.decoders.6.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0775, -0.1000,  0.0071,  ..., -0.0010,  0.0244,  0.0665])

decoder.decoders.6.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0491, -0.0476,  0.0628,  ..., -0.0301, -0.0323, -0.0626],
        [ 0.0448, -0.0233, -0.0515,  ...,  0.0065, -0.0123,  0.0256],
        [-0.0555,  0.0215, -0.0662,  ..., -0.0240, -0.0232,  0.0103],
        ...,
        [ 0.0191, -0.0384,  0.0550,  ..., -0.0466,  0.0595, -0.0547],
        [ 0.0083, -0.0589,  0.0440,  ...,  0.0488,  0.0090,  0.0982],
        [ 0.0705,  0.0535,  0.0025,  ..., -0.0649,  0.1131, -0.0136]])

decoder.decoders.6.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0041,  0.0145,  0.0004,  ...,  0.0401, -0.0292,  0.0431])

decoder.decoders.6.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0399, -0.0383,  0.0326,  ...,  0.0607,  0.0872,  0.0601],
        [-0.0509,  0.0070, -0.0093,  ..., -0.0126,  0.0074,  0.0431],
        [ 0.0561,  0.0245,  0.0086,  ..., -0.0510,  0.0593,  0.0008],
        ...,
        [ 0.1152, -0.0575, -0.0694,  ..., -0.0135, -0.0479, -0.0076],
        [ 0.0406,  0.0442, -0.0366,  ..., -0.0092, -0.0130,  0.0568],
        [-0.0006, -0.0224,  0.0290,  ...,  0.0050, -0.0269, -0.0204]])

decoder.decoders.6.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0002, -0.0597, -0.0440,  ...,  0.0997, -0.0028, -0.0966],
        [ 0.0528,  0.0325,  0.0367,  ..., -0.0320,  0.0468, -0.0237],
        [-0.0494, -0.0254,  0.0153,  ...,  0.0238, -0.0320,  0.0202],
        ...,
        [ 0.0514, -0.0365, -0.0054,  ...,  0.0280,  0.0910,  0.0014],
        [ 0.0097, -0.0373,  0.0773,  ...,  0.0044, -0.0143, -0.0610],
        [-0.0004, -0.0792, -0.0154,  ..., -0.0526, -0.1035, -0.0051]])

decoder.decoders.6.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0043,  0.0088, -0.0219,  ..., -0.0110,  0.0121, -0.0199])

decoder.decoders.6.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0461, -0.0398,  0.0148,  ...,  0.0068,  0.0414, -0.0402],
        [-0.0019, -0.0083,  0.0819,  ..., -0.0621, -0.0424, -0.0583],
        [-0.0558, -0.0018, -0.0145,  ...,  0.0101,  0.0087,  0.0117],
        ...,
        [-0.0072, -0.0018, -0.0028,  ...,  0.0157,  0.0299, -0.0262],
        [-0.0075,  0.0211, -0.0372,  ...,  0.0012, -0.0004,  0.0275],
        [ 0.0337, -0.0003, -0.0541,  ..., -0.0894, -0.0366, -0.0256]])

decoder.decoders.6.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0035, -0.1770, -0.0531,  ..., -0.0255, -0.0196, -0.0383])

decoder.decoders.6.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1382, 0.9058, 1.0174,  ..., 1.0363, 1.1093, 1.1034])

decoder.decoders.6.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.0942,  0.1843, -0.0779,  ..., -0.0982, -0.0250, -0.0875])

decoder.decoders.6.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0196,  0.0523,  0.0226,  ..., -0.0201, -0.0128, -0.0152],
        [-0.0086, -0.0663, -0.0304,  ...,  0.0026,  0.0176,  0.1402],
        [ 0.0041,  0.0501,  0.0223,  ..., -0.0465,  0.0131,  0.0556],
        ...,
        [ 0.0224, -0.0383, -0.0119,  ..., -0.0066,  0.0093, -0.0129],
        [-0.0370,  0.0499,  0.0219,  ..., -0.0557, -0.0314, -0.0422],
        [-0.0264,  0.0521,  0.0344,  ...,  0.0120, -0.0155, -0.0146]])

decoder.decoders.6.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0223, -0.0183, -0.0363,  ..., -0.0531,  0.0051, -0.0393])

decoder.decoders.6.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0299, -0.0105,  0.0421,  ..., -0.0693,  0.0887, -0.0246],
        [-0.1682,  0.0019,  0.0434,  ..., -0.0117, -0.0302, -0.0667],
        [ 0.0137, -0.0179,  0.1327,  ..., -0.0469, -0.0027, -0.0646],
        ...,
        [-0.0671, -0.0346,  0.0299,  ..., -0.0164,  0.0847, -0.0515],
        [ 0.0433,  0.0340, -0.0063,  ..., -0.0228, -0.0070,  0.0189],
        [ 0.0535,  0.0948, -0.0346,  ...,  0.0041, -0.0304,  0.0358]])

decoder.decoders.6.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0315, -0.2344, -0.0280,  ...,  0.0755,  0.0159,  0.0096])

decoder.decoders.7.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8256, 0.5234, 0.8829,  ..., 0.8811, 0.8822, 0.8934])

decoder.decoders.7.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0885, -0.4003, -0.0143,  ...,  0.0437, -0.0005,  0.0245])

decoder.decoders.7.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0592, -0.0170,  0.1023,  ...,  0.0336,  0.0102,  0.0321],
        [-0.0036, -0.0104, -0.0361,  ..., -0.0305, -0.0252,  0.0297],
        [-0.0906, -0.0491,  0.0130,  ...,  0.0152,  0.0154,  0.0123],
        ...,
        [ 0.0314,  0.0342,  0.0562,  ...,  0.0158, -0.0720,  0.0253],
        [-0.0404,  0.0210,  0.0492,  ..., -0.0074, -0.0170,  0.0675],
        [-0.0130, -0.0112, -0.0421,  ..., -0.0343,  0.0327,  0.0255]])

decoder.decoders.7.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0205,  0.0268,  0.0110,  ..., -0.0259,  0.0023,  0.0517])

decoder.decoders.7.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0333, -0.0158, -0.0141,  ...,  0.0146,  0.0102,  0.0492],
        [-0.0111, -0.0080,  0.0783,  ...,  0.0264,  0.0149,  0.0351],
        [ 0.0195, -0.0309,  0.0783,  ..., -0.0059,  0.0642,  0.0316],
        ...,
        [ 0.0063, -0.0529,  0.0667,  ...,  0.0489,  0.0191,  0.0845],
        [ 0.0547, -0.0331,  0.0598,  ...,  0.0160,  0.0532, -0.0683],
        [ 0.0306,  0.0161, -0.0519,  ...,  0.0283,  0.0468, -0.0776]])

decoder.decoders.7.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0427,  0.0393, -0.0124,  ...,  0.0143, -0.0052,  0.0147],
        [ 0.0063, -0.0035,  0.0932,  ...,  0.0293,  0.0638,  0.0349],
        [ 0.0191,  0.0280,  0.0289,  ...,  0.0020,  0.0377,  0.0333],
        ...,
        [-0.0660, -0.0226,  0.0499,  ..., -0.0376, -0.0390,  0.0158],
        [-0.0077,  0.0270,  0.0360,  ...,  0.1180, -0.0122, -0.0610],
        [ 0.0227, -0.0125, -0.0089,  ..., -0.0204,  0.0384, -0.0453]])

decoder.decoders.7.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0221, -0.0370,  0.0388,  ..., -0.0119, -0.0135,  0.0255])

decoder.decoders.7.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0279,  0.0536,  0.0303,  ..., -0.1000,  0.0224, -0.0253],
        [-0.0641,  0.0293,  0.0374,  ...,  0.0218, -0.1470,  0.1553],
        [-0.0343, -0.0677,  0.0680,  ..., -0.0692, -0.0266, -0.0502],
        ...,
        [ 0.0865,  0.0531, -0.0506,  ...,  0.0350,  0.0577, -0.0618],
        [ 0.0676, -0.0315,  0.0557,  ...,  0.0459, -0.0504, -0.0588],
        [-0.0816,  0.0586, -0.0008,  ..., -0.0161,  0.0189, -0.0207]])

decoder.decoders.7.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0071, -0.2345, -0.0005,  ..., -0.0069, -0.0059, -0.0081])

decoder.decoders.7.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9021, 0.7216, 0.9348,  ..., 0.9079, 0.8886, 0.9347])

decoder.decoders.7.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0684, -0.1727,  0.0175,  ...,  0.0376,  0.0044,  0.0588])

decoder.decoders.7.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0306, -0.0253, -0.0240,  ..., -0.0045,  0.0717, -0.0002],
        [ 0.0248,  0.0021, -0.0319,  ...,  0.0190, -0.0080,  0.0133],
        [ 0.0055,  0.0304, -0.0203,  ..., -0.0748, -0.0800,  0.0251],
        ...,
        [-0.0953, -0.0521, -0.0114,  ...,  0.0747, -0.0060,  0.0739],
        [ 0.0322,  0.0513, -0.0091,  ..., -0.0061,  0.0085,  0.0082],
        [ 0.0569, -0.0168,  0.0582,  ..., -0.0645,  0.0472, -0.0045]])

decoder.decoders.7.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0058,  0.0210, -0.0189,  ..., -0.0201, -0.0183, -0.0316])

decoder.decoders.7.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0202,  0.0290, -0.0305,  ..., -0.0512,  0.0276, -0.0702],
        [ 0.0761,  0.0371, -0.0182,  ..., -0.0024,  0.0433, -0.0011],
        [-0.1023,  0.0858, -0.0630,  ...,  0.0279, -0.0506, -0.0018],
        ...,
        [ 0.0442,  0.0282, -0.0410,  ..., -0.0437,  0.0511, -0.0234],
        [ 0.0491, -0.0186,  0.0712,  ...,  0.0092,  0.0149,  0.0485],
        [ 0.0460, -0.0093, -0.0439,  ...,  0.0084,  0.0153, -0.0650]])

decoder.decoders.7.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0256,  0.0264, -0.0087,  ...,  0.0007, -0.0778, -0.0607],
        [-0.0776,  0.0133, -0.0054,  ..., -0.0898,  0.0070,  0.0126],
        [-0.0042, -0.0041, -0.0725,  ...,  0.0788, -0.0149,  0.0878],
        ...,
        [ 0.0231,  0.0121,  0.0044,  ...,  0.0069, -0.0081,  0.0531],
        [ 0.0149, -0.0619,  0.0185,  ...,  0.0842, -0.0023, -0.0239],
        [-0.0290,  0.0206, -0.0220,  ..., -0.0125,  0.0220, -0.0854]])

decoder.decoders.7.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0186, -0.0271, -0.0103,  ..., -0.0244,  0.0002,  0.0081])

decoder.decoders.7.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0794,  0.0122, -0.0557,  ...,  0.0448,  0.0129, -0.0127],
        [-0.0121,  0.1053,  0.0743,  ...,  0.0369, -0.0180,  0.0231],
        [ 0.0426,  0.0384,  0.0679,  ..., -0.0140, -0.0082,  0.0305],
        ...,
        [-0.0282, -0.0129, -0.0242,  ..., -0.0671,  0.0355,  0.0466],
        [-0.0088, -0.0067, -0.0344,  ...,  0.0194,  0.0084, -0.0155],
        [ 0.0350,  0.0016, -0.1309,  ..., -0.0210,  0.0103, -0.0023]])

decoder.decoders.7.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0395, -0.2226,  0.0015,  ...,  0.0052, -0.0220, -0.0067])

decoder.decoders.7.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1839, 0.7584, 1.0888,  ..., 1.1647, 1.1224, 1.1082])

decoder.decoders.7.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.1209,  0.0785, -0.0892,  ..., -0.1409, -0.0245, -0.0418])

decoder.decoders.7.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0082,  0.0285,  0.0156,  ...,  0.0717, -0.0077, -0.0517],
        [ 0.0098, -0.0473,  0.0436,  ...,  0.0289, -0.0163,  0.0706],
        [-0.0195, -0.0066,  0.0659,  ..., -0.0414,  0.0355,  0.0131],
        ...,
        [ 0.0390,  0.0305, -0.0874,  ...,  0.0213,  0.0427,  0.1047],
        [-0.0256,  0.0346,  0.0573,  ..., -0.0370,  0.0112,  0.0223],
        [ 0.0409,  0.0330,  0.0194,  ...,  0.0342, -0.0095,  0.0227]])

decoder.decoders.7.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0231,  0.0095,  0.0074,  ..., -0.0309,  0.0007,  0.0053])

decoder.decoders.7.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 3.6785e-02,  5.5485e-02, -3.3975e-02,  ..., -1.5618e-02,
          1.0061e-02, -2.6638e-03],
        [-3.2734e-02, -4.1797e-02,  2.1490e-02,  ..., -9.1982e-02,
         -3.2613e-02, -5.3948e-02],
        [-3.9389e-02, -5.5175e-02,  4.2706e-02,  ...,  7.2529e-02,
          4.8030e-02,  7.7529e-03],
        ...,
        [ 1.1488e-02, -1.7420e-02,  7.2129e-06,  ..., -1.5265e-02,
         -7.8305e-03, -1.3840e-02],
        [-4.2830e-02,  4.8973e-03, -5.0117e-02,  ...,  2.4040e-02,
         -7.5605e-03, -4.1127e-02],
        [ 5.5097e-02, -6.3069e-03, -5.7409e-03,  ..., -4.8630e-02,
          3.3764e-02, -2.3669e-02]])

decoder.decoders.7.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0913, -0.2600, -0.0247,  ...,  0.0538,  0.0344, -0.0229])

decoder.decoders.8.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8568, 0.5203, 0.9331,  ..., 0.9161, 0.9045, 0.9506])

decoder.decoders.8.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0469, -0.4109, -0.0307,  ...,  0.0193,  0.0261,  0.0235])

decoder.decoders.8.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0637,  0.0475,  0.0381,  ..., -0.0888, -0.0206, -0.0527],
        [-0.0174,  0.1129,  0.0280,  ...,  0.0567, -0.0090,  0.1001],
        [-0.0464,  0.0105,  0.0104,  ...,  0.0055,  0.0238, -0.0496],
        ...,
        [-0.0169, -0.1222, -0.0287,  ...,  0.0035,  0.0417,  0.0639],
        [ 0.0408,  0.1477,  0.0266,  ...,  0.0818,  0.0083,  0.0293],
        [ 0.0002,  0.0005, -0.0488,  ...,  0.0185,  0.1146, -0.0276]])

decoder.decoders.8.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0226, -0.0786,  0.0689,  ...,  0.0939,  0.0114,  0.0052])

decoder.decoders.8.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0037, -0.0506,  0.0580,  ...,  0.0384, -0.0090,  0.0358],
        [ 0.0218, -0.0593,  0.0962,  ...,  0.0086, -0.0295,  0.0465],
        [ 0.0307, -0.0077, -0.0540,  ...,  0.0196,  0.0087, -0.0132],
        ...,
        [ 0.0599,  0.0992, -0.0755,  ...,  0.0648,  0.0603, -0.0815],
        [ 0.0234,  0.0032, -0.0060,  ..., -0.0102,  0.0356, -0.0643],
        [ 0.0487,  0.0024,  0.0959,  ...,  0.0610, -0.0636,  0.0028]])

decoder.decoders.8.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0232, -0.0313, -0.0270,  ..., -0.0104, -0.0477, -0.0089],
        [-0.0251,  0.0014, -0.0608,  ..., -0.0349,  0.0428, -0.0180],
        [ 0.0597, -0.0176, -0.0361,  ...,  0.0817,  0.0469,  0.0295],
        ...,
        [-0.0399, -0.0454,  0.0307,  ..., -0.0026, -0.0361, -0.1040],
        [ 0.0071, -0.0337, -0.1250,  ...,  0.0410,  0.0170,  0.1474],
        [-0.0526, -0.0186, -0.0157,  ...,  0.0161,  0.0616, -0.1076]])

decoder.decoders.8.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0195, -0.0040, -0.0256,  ..., -0.0200,  0.0061, -0.0191])

decoder.decoders.8.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0486, -0.0437, -0.0662,  ...,  0.0140,  0.0536,  0.0384],
        [-0.0249, -0.0278, -0.0474,  ...,  0.0158, -0.0029,  0.0024],
        [ 0.1002,  0.0041, -0.0096,  ...,  0.0196, -0.0226,  0.0265],
        ...,
        [-0.0048,  0.0248,  0.0967,  ..., -0.0360,  0.0497, -0.0632],
        [ 0.0259, -0.0192,  0.0303,  ..., -0.0373,  0.0121, -0.0469],
        [ 0.0945,  0.1160, -0.0464,  ...,  0.0262, -0.0734,  0.0547]])

decoder.decoders.8.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0302, -0.2711,  0.0030,  ...,  0.0061,  0.0100,  0.0119])

decoder.decoders.8.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9448, 0.7596, 0.9952,  ..., 0.9856, 0.9582, 1.0452])

decoder.decoders.8.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0531, -0.0837, -0.0144,  ...,  0.0167,  0.0122,  0.0642])

decoder.decoders.8.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0483,  0.0236,  0.0108,  ..., -0.0437,  0.0020,  0.0118],
        [-0.0521,  0.0569, -0.0711,  ...,  0.0219, -0.0560, -0.0397],
        [-0.0428, -0.0167, -0.0078,  ..., -0.0360,  0.0068, -0.0084],
        ...,
        [-0.0033, -0.0069, -0.0712,  ..., -0.0139,  0.0276, -0.0595],
        [-0.0245, -0.0284,  0.0467,  ...,  0.0426,  0.0096,  0.0203],
        [ 0.0520,  0.0189,  0.0845,  ...,  0.0155,  0.0455,  0.0129]])

decoder.decoders.8.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0116,  0.0327,  0.0112,  ...,  0.0079,  0.0077,  0.0319])

decoder.decoders.8.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0617,  0.0538, -0.0069,  ...,  0.0204,  0.0494, -0.0390],
        [ 0.0002, -0.0147,  0.0510,  ...,  0.0138, -0.0076, -0.0403],
        [-0.0400, -0.1044, -0.1142,  ..., -0.0606, -0.0064,  0.0037],
        ...,
        [-0.0317, -0.0367,  0.0460,  ..., -0.0494,  0.0316,  0.0051],
        [ 0.0141,  0.0056, -0.0229,  ...,  0.0318,  0.0522,  0.0051],
        [ 0.0420, -0.0079, -0.0323,  ..., -0.0327, -0.0253, -0.0035]])

decoder.decoders.8.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0470, -0.0616, -0.0610,  ...,  0.0444,  0.0395, -0.0232],
        [-0.0336, -0.0356, -0.0533,  ..., -0.0668, -0.0327, -0.0887],
        [ 0.0717, -0.0236,  0.0608,  ...,  0.0329, -0.0270, -0.0688],
        ...,
        [ 0.0155,  0.0623,  0.0679,  ..., -0.0266,  0.0026,  0.0255],
        [-0.0046,  0.0003, -0.0010,  ..., -0.0481,  0.0444, -0.0170],
        [ 0.0602, -0.0446,  0.0789,  ..., -0.0237, -0.0463,  0.0232]])

decoder.decoders.8.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0083, -0.0065, -0.0155,  ..., -0.0291, -0.0089,  0.0216])

decoder.decoders.8.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0279, -0.0368,  0.0295,  ...,  0.0101,  0.0037, -0.0070],
        [ 0.1116, -0.0265,  0.0700,  ..., -0.0788,  0.0125, -0.0500],
        [-0.0455,  0.0247,  0.0322,  ...,  0.0765,  0.0221, -0.0685],
        ...,
        [-0.0593, -0.0300, -0.0042,  ..., -0.0542, -0.0081,  0.0074],
        [ 0.0292, -0.0118, -0.0468,  ...,  0.0258,  0.1049,  0.0153],
        [ 0.0277,  0.0029,  0.0422,  ..., -0.0311,  0.0140,  0.0268]])

decoder.decoders.8.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0053, -0.2940,  0.0338,  ..., -0.0012, -0.0440, -0.0238])

decoder.decoders.8.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.2163, 0.6231, 1.0872,  ..., 1.1592, 1.1360, 1.1488])

decoder.decoders.8.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.2082,  0.0205,  0.0405,  ..., -0.1648, -0.0790, -0.0282])

decoder.decoders.8.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0224, -0.0077,  0.0042,  ...,  0.0311, -0.0346, -0.0823],
        [-0.0039,  0.0206, -0.0708,  ...,  0.1186, -0.0296, -0.0399],
        [-0.0109, -0.0165, -0.0074,  ...,  0.0169,  0.0868,  0.0898],
        ...,
        [ 0.0239, -0.0007, -0.0019,  ..., -0.0221,  0.0268, -0.0339],
        [ 0.0290,  0.0298,  0.0335,  ...,  0.0024, -0.0066,  0.0304],
        [-0.0237, -0.0597, -0.0560,  ..., -0.0113,  0.0051,  0.0289]])

decoder.decoders.8.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([ 0.0163, -0.0035, -0.0104,  ..., -0.0189, -0.0361, -0.0434])

decoder.decoders.8.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0370,  0.0019,  0.0292,  ..., -0.0323, -0.0033,  0.0428],
        [ 0.1395, -0.0613,  0.0181,  ..., -0.0279,  0.1020, -0.0461],
        [-0.0463, -0.0085, -0.0336,  ..., -0.0080, -0.0294, -0.0555],
        ...,
        [-0.0430, -0.0222, -0.0339,  ..., -0.0266,  0.1083, -0.0345],
        [-0.0018, -0.0373, -0.0050,  ..., -0.0085,  0.0433, -0.0228],
        [-0.0107,  0.0304, -0.0433,  ..., -0.0458, -0.0125,  0.0044]])

decoder.decoders.8.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0412, -0.3848, -0.0176,  ...,  0.0742,  0.0576,  0.0024])

decoder.decoders.9.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8139, 0.4667, 0.8923,  ..., 0.8576, 0.8715, 0.8686])

decoder.decoders.9.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0732, -0.3788, -0.0416,  ..., -0.0029,  0.0173,  0.0091])

decoder.decoders.9.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0585,  0.0004, -0.0139,  ..., -0.0431,  0.0686,  0.0243],
        [-0.0227,  0.0545, -0.0708,  ..., -0.0531,  0.0373,  0.0098],
        [ 0.0590, -0.0139, -0.0031,  ..., -0.0473, -0.0218,  0.0294],
        ...,
        [ 0.0391, -0.0216,  0.0234,  ...,  0.0018, -0.0120, -0.0238],
        [ 0.0284, -0.0574,  0.0344,  ...,  0.0081, -0.0126, -0.0019],
        [ 0.0358,  0.0234,  0.0061,  ..., -0.0410, -0.0264,  0.0269]])

decoder.decoders.9.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0517,  0.0518, -0.1094,  ..., -0.0535,  0.0062, -0.0172])

decoder.decoders.9.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-2.2143e-02,  4.8636e-04, -4.5255e-02,  ...,  1.1845e-02,
         -2.1883e-03,  1.7129e-02],
        [-5.0624e-02, -2.3148e-02, -1.1038e-02,  ...,  3.6483e-02,
          7.2233e-03,  1.7686e-02],
        [ 2.3820e-02, -7.5806e-02,  6.2705e-02,  ..., -4.4974e-02,
         -4.3309e-02,  4.9033e-02],
        ...,
        [-1.9278e-02, -5.0482e-02, -1.7878e-02,  ..., -3.3019e-02,
         -5.3889e-02,  3.7229e-03],
        [ 5.7161e-02, -6.7297e-03, -8.1608e-02,  ..., -2.8344e-02,
         -9.5331e-03,  1.4534e-02],
        [-8.4656e-02, -3.9368e-03, -6.4763e-02,  ..., -5.3756e-02,
         -4.0069e-05,  4.9135e-02]])

decoder.decoders.9.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0353,  0.0279,  0.1616,  ..., -0.0081, -0.0368,  0.0092],
        [-0.0400,  0.0169, -0.1149,  ..., -0.0117, -0.0533, -0.0093],
        [-0.0380, -0.0297, -0.0069,  ...,  0.0195,  0.0384, -0.0620],
        ...,
        [ 0.0085, -0.0411,  0.0212,  ...,  0.0035,  0.0543, -0.0617],
        [-0.0264, -0.0216, -0.0089,  ...,  0.0655,  0.0345, -0.0343],
        [-0.0602, -0.0357, -0.0376,  ...,  0.0947,  0.0567, -0.0260]])

decoder.decoders.9.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0037, -0.0217,  0.0134,  ..., -0.0049,  0.0182, -0.0103])

decoder.decoders.9.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0052, -0.0011,  0.0319,  ..., -0.0141, -0.0390, -0.0294],
        [-0.0084,  0.0723,  0.0433,  ..., -0.0558,  0.0554,  0.0326],
        [ 0.0245, -0.0482,  0.0425,  ...,  0.0850, -0.0057, -0.0268],
        ...,
        [ 0.0124, -0.0734,  0.0003,  ..., -0.0009, -0.0475, -0.0654],
        [ 0.0110, -0.0268, -0.0264,  ...,  0.0061,  0.0024, -0.0041],
        [ 0.0596,  0.0376, -0.0450,  ...,  0.0510,  0.0266,  0.0222]])

decoder.decoders.9.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0235, -0.3344,  0.0071,  ...,  0.0459,  0.0117, -0.0136])

decoder.decoders.9.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9029, 0.7294, 1.0032,  ..., 0.9757, 0.9572, 0.9917])

decoder.decoders.9.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0620, -0.0486,  0.0246,  ...,  0.0012,  0.0473,  0.0398])

decoder.decoders.9.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0651, -0.0251, -0.0200,  ...,  0.0115, -0.0250, -0.0209],
        [ 0.0019,  0.0094, -0.0520,  ...,  0.0755,  0.0315,  0.0152],
        [-0.0038,  0.0137, -0.0162,  ...,  0.0461, -0.0095, -0.1072],
        ...,
        [-0.0398, -0.0417,  0.0238,  ..., -0.0478,  0.0607, -0.0152],
        [ 0.0916, -0.0047, -0.0380,  ..., -0.0200, -0.0903, -0.0101],
        [-0.0455, -0.0012,  0.0265,  ...,  0.0731, -0.0553,  0.0123]])

decoder.decoders.9.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0150,  0.0328, -0.0002,  ...,  0.0024, -0.0201,  0.0166])

decoder.decoders.9.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-6.7918e-03, -3.5569e-02, -3.3248e-02,  ...,  1.1137e-02,
         -1.1825e-02, -2.1184e-02],
        [ 7.9347e-02,  3.6227e-02,  2.9543e-02,  ..., -7.4563e-04,
         -2.1498e-02, -6.5105e-02],
        [-2.5921e-02,  1.6218e-02,  6.2336e-02,  ..., -2.8980e-02,
          6.3344e-02, -1.9359e-02],
        ...,
        [ 1.7229e-02, -1.5202e-02,  1.4003e-02,  ..., -1.9516e-02,
          1.2540e-02, -6.0175e-02],
        [-4.2263e-02, -2.1626e-02,  4.0196e-02,  ..., -4.8976e-03,
          4.1178e-02,  3.1048e-02],
        [ 2.2424e-02,  2.0594e-02,  2.2625e-02,  ...,  1.3559e-02,
          7.3111e-02, -7.7789e-06]])

decoder.decoders.9.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0098,  0.0087,  0.0452,  ..., -0.0344, -0.0503,  0.0309],
        [-0.0064, -0.0557, -0.0380,  ..., -0.0717,  0.0218,  0.0243],
        [ 0.0031,  0.0045, -0.0131,  ...,  0.0371,  0.0903, -0.0170],
        ...,
        [ 0.0752,  0.0233,  0.0671,  ..., -0.0800, -0.0268,  0.0582],
        [-0.0340,  0.0063,  0.0045,  ...,  0.0618,  0.0070,  0.0042],
        [-0.0528,  0.0391, -0.0674,  ...,  0.0150,  0.0523, -0.0061]])

decoder.decoders.9.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0233,  0.0275, -0.0245,  ...,  0.0239,  0.0065, -0.0444])

decoder.decoders.9.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0417, -0.0894,  0.0525,  ..., -0.0366,  0.0609,  0.0409],
        [ 0.1086,  0.0352,  0.0424,  ...,  0.0445, -0.1361,  0.0201],
        [ 0.0031, -0.0665, -0.0073,  ...,  0.0047, -0.0454, -0.0587],
        ...,
        [-0.0095, -0.0027,  0.0627,  ...,  0.0231,  0.0632,  0.0451],
        [ 0.0033,  0.0463, -0.0473,  ..., -0.0185,  0.0602,  0.0303],
        [-0.0252, -0.0123,  0.0402,  ...,  0.0972,  0.0126, -0.0731]])

decoder.decoders.9.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0160, -0.3300,  0.0009,  ...,  0.0379, -0.0228, -0.0165])

decoder.decoders.9.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1667, 0.4835, 1.0859,  ..., 1.1835, 1.1341, 1.1797])

decoder.decoders.9.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.1034, -0.0183,  0.0280,  ..., -0.0703, -0.0692, -0.0258])

decoder.decoders.9.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0354,  0.0133,  0.0062,  ...,  0.0680,  0.0224, -0.0072],
        [-0.0198,  0.0810, -0.0384,  ..., -0.0240,  0.0006,  0.0490],
        [-0.0116,  0.0291, -0.0300,  ...,  0.0159, -0.0251, -0.0427],
        ...,
        [-0.0068, -0.0127,  0.0569,  ..., -0.0921, -0.0067, -0.0558],
        [-0.0777,  0.0487, -0.0361,  ..., -0.0092,  0.0807, -0.0759],
        [ 0.0087, -0.0597, -0.0463,  ...,  0.0508,  0.1155, -0.0246]])

decoder.decoders.9.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0419, -0.0072, -0.0239,  ...,  0.0181, -0.0458, -0.0451])

decoder.decoders.9.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0240, -0.0802, -0.0036,  ..., -0.0521, -0.0277, -0.0021],
        [-0.0503, -0.0444, -0.0300,  ...,  0.0870, -0.0243,  0.0643],
        [-0.0652,  0.0161,  0.0631,  ..., -0.0547, -0.0038, -0.0083],
        ...,
        [-0.0028, -0.0080, -0.0301,  ...,  0.0840, -0.0666, -0.0325],
        [ 0.0107,  0.0003,  0.0791,  ...,  0.0527,  0.0884, -0.0177],
        [-0.0912,  0.0133, -0.0470,  ...,  0.0315, -0.0439, -0.0204]])

decoder.decoders.9.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0225, -0.4402, -0.0141,  ...,  0.0441,  0.0688,  0.0063])

decoder.decoders.10.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8203, 0.4697, 0.8905,  ..., 0.8809, 0.9153, 0.9069])

decoder.decoders.10.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0553, -0.3754, -0.0638,  ...,  0.0188,  0.0124, -0.0024])

decoder.decoders.10.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0415, -0.0414,  0.0704,  ...,  0.0524,  0.0498,  0.0083],
        [ 0.0073, -0.0307,  0.0102,  ..., -0.0397,  0.0424, -0.0234],
        [ 0.0716,  0.0367,  0.0147,  ...,  0.0193,  0.0245, -0.0610],
        ...,
        [ 0.0635,  0.0582,  0.0273,  ...,  0.0769,  0.0191, -0.0230],
        [ 0.0628,  0.0231,  0.0296,  ..., -0.0272,  0.0048, -0.0436],
        [ 0.0105, -0.0232,  0.0170,  ...,  0.0075, -0.0129, -0.0367]])

decoder.decoders.10.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0016, -0.0067,  0.0701,  ...,  0.0272,  0.0044,  0.0667])

decoder.decoders.10.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0284, -0.0167,  0.0022,  ...,  0.0677, -0.0496,  0.0091],
        [ 0.0784,  0.0028, -0.0149,  ..., -0.0147,  0.0873,  0.0876],
        [-0.0194,  0.0308, -0.0787,  ...,  0.0234,  0.0139,  0.0077],
        ...,
        [-0.0257,  0.0092, -0.0584,  ...,  0.0012,  0.0325, -0.0434],
        [-0.0347, -0.0388,  0.0494,  ..., -0.0750,  0.0171,  0.0309],
        [-0.0467,  0.0277,  0.0036,  ..., -0.0387,  0.0214,  0.0873]])

decoder.decoders.10.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0381,  0.0177,  0.0947,  ...,  0.0178, -0.0873, -0.0217],
        [ 0.1033, -0.0116, -0.0125,  ...,  0.0266,  0.0219,  0.0411],
        [ 0.0931,  0.0487, -0.0653,  ...,  0.0513, -0.0145,  0.0164],
        ...,
        [-0.0023,  0.0397,  0.0554,  ..., -0.0118, -0.0406,  0.0019],
        [ 0.0772,  0.0027, -0.0456,  ...,  0.0281, -0.0083,  0.0606],
        [ 0.0850,  0.0004,  0.0267,  ...,  0.0390, -0.0113,  0.0336]])

decoder.decoders.10.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0082, -0.0039,  0.0175,  ..., -0.0279, -0.0047,  0.0238])

decoder.decoders.10.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0398,  0.0387,  0.0231,  ...,  0.0406,  0.0305,  0.0093],
        [ 0.0779, -0.0478, -0.0243,  ..., -0.1020,  0.0057,  0.0043],
        [ 0.0517, -0.0553, -0.0161,  ...,  0.0839,  0.0300, -0.0261],
        ...,
        [-0.0192, -0.0664,  0.0368,  ..., -0.0098, -0.0031,  0.0035],
        [-0.0376, -0.1072,  0.0017,  ...,  0.0537,  0.0680, -0.0029],
        [-0.0149, -0.0348,  0.0312,  ..., -0.0665, -0.0371, -0.0638]])

decoder.decoders.10.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0061, -0.3422,  0.0256,  ...,  0.0427, -0.0121, -0.0196])

decoder.decoders.10.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9311, 0.6960, 0.9442,  ..., 0.9698, 0.9475, 0.9606])

decoder.decoders.10.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0836, -0.0767, -0.0218,  ..., -0.0039, -0.0043,  0.0187])

decoder.decoders.10.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0931, -0.0620, -0.0313,  ..., -0.1490,  0.0451, -0.0675],
        [-0.0455,  0.0266,  0.0007,  ...,  0.0487,  0.0956,  0.0046],
        [-0.0249, -0.0564,  0.0354,  ...,  0.0340, -0.0477,  0.0013],
        ...,
        [-0.0459,  0.0054,  0.0032,  ..., -0.0034, -0.0287,  0.0015],
        [-0.0726,  0.0028,  0.0245,  ..., -0.0087,  0.0213,  0.0530],
        [ 0.0435,  0.0002,  0.0190,  ..., -0.0107,  0.0032,  0.0535]])

decoder.decoders.10.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0242, -0.0220, -0.0440,  ...,  0.0157, -0.0263, -0.0575])

decoder.decoders.10.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0260, -0.0244,  0.0306,  ...,  0.0060, -0.0065,  0.0312],
        [-0.0240, -0.0406,  0.0320,  ...,  0.0173,  0.0385, -0.0339],
        [-0.0103, -0.0365,  0.0175,  ..., -0.0470, -0.0061,  0.0402],
        ...,
        [ 0.0648, -0.0488, -0.0468,  ..., -0.0502,  0.0422,  0.0023],
        [-0.0007, -0.0788,  0.0306,  ..., -0.0410,  0.0124,  0.0438],
        [-0.0081,  0.0103, -0.1187,  ..., -0.0807, -0.0180, -0.0400]])

decoder.decoders.10.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0184,  0.0271,  0.0112,  ..., -0.0220, -0.0590,  0.0448],
        [-0.0054,  0.0353,  0.0058,  ..., -0.0588, -0.0735, -0.0574],
        [-0.0304, -0.0054,  0.0285,  ..., -0.0403, -0.0857, -0.0537],
        ...,
        [ 0.0894, -0.0660, -0.0144,  ..., -0.1169,  0.0103, -0.0156],
        [-0.0530,  0.0082, -0.1273,  ...,  0.1040,  0.0058,  0.0282],
        [ 0.0629, -0.0013, -0.0677,  ...,  0.0136,  0.0058,  0.0417]])

decoder.decoders.10.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0009,  0.0019, -0.0290,  ..., -0.0276, -0.0096, -0.0250])

decoder.decoders.10.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-9.3307e-05,  5.8597e-03, -6.0731e-02,  ...,  9.0133e-02,
         -7.6799e-03, -3.7332e-02],
        [ 9.7122e-02,  2.5792e-02, -9.3991e-02,  ...,  5.7661e-02,
         -3.1349e-02,  9.8199e-03],
        [-3.4022e-03, -1.0159e-02,  1.4663e-02,  ..., -1.6327e-02,
          3.7604e-02, -7.6433e-02],
        ...,
        [-9.1667e-02, -5.6363e-02,  1.1416e-02,  ...,  4.0849e-02,
          8.5697e-02, -3.2331e-02],
        [-4.7909e-02, -6.7057e-02, -4.0120e-02,  ...,  1.3338e-02,
         -4.4812e-02, -3.4640e-02],
        [ 5.9006e-03,  8.4377e-02, -2.2812e-02,  ...,  8.3122e-03,
         -1.0076e-01,  2.0026e-02]])

decoder.decoders.10.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0152, -0.3583,  0.0261,  ...,  0.0514, -0.0349, -0.0215])

decoder.decoders.10.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1718, 0.3754, 1.1470,  ..., 1.2053, 1.1682, 1.1823])

decoder.decoders.10.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.0914, -0.0350,  0.0502,  ...,  0.0462, -0.0551, -0.0098])

decoder.decoders.10.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0223,  0.0176,  0.0241,  ...,  0.0517,  0.0345,  0.0780],
        [-0.0227,  0.0410, -0.0424,  ..., -0.0259, -0.0050, -0.0725],
        [-0.0080,  0.0267,  0.0420,  ...,  0.0389, -0.0407, -0.0038],
        ...,
        [ 0.0083, -0.0271, -0.0192,  ..., -0.0015,  0.0866,  0.0472],
        [ 0.0104,  0.0349,  0.0978,  ...,  0.0011, -0.0950, -0.0150],
        [ 0.0252,  0.0461, -0.0321,  ...,  0.0546,  0.0688, -0.0294]])

decoder.decoders.10.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0112, -0.0261, -0.0591,  ..., -0.0219,  0.0041, -0.0270])

decoder.decoders.10.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0700,  0.0825, -0.0139,  ..., -0.0399, -0.0001, -0.0304],
        [-0.0236,  0.0072,  0.0062,  ...,  0.0012, -0.0617,  0.0476],
        [-0.0371, -0.0276,  0.0087,  ...,  0.0363, -0.0427, -0.0418],
        ...,
        [-0.0089, -0.0314, -0.0247,  ...,  0.0719, -0.0923, -0.0055],
        [-0.0039,  0.0529,  0.0292,  ..., -0.0318,  0.0093,  0.0361],
        [-0.0303,  0.0416, -0.0610,  ...,  0.0172,  0.0407,  0.0092]])

decoder.decoders.10.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0217, -0.4937,  0.0008,  ...,  0.0575,  0.0755,  0.0102])

decoder.decoders.11.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8139, 0.4954, 0.9204,  ..., 0.8826, 0.9174, 0.9301])

decoder.decoders.11.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0466, -0.3161, -0.0470,  ..., -0.0072,  0.0412, -0.0378])

decoder.decoders.11.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0237,  0.0094,  0.0075,  ..., -0.0134, -0.0791, -0.0219],
        [ 0.1182, -0.0467, -0.0216,  ..., -0.0374, -0.0223,  0.0019],
        [-0.0786, -0.0020, -0.0032,  ..., -0.0519,  0.0425,  0.0308],
        ...,
        [-0.0665, -0.0492,  0.0225,  ..., -0.0356,  0.0711,  0.0123],
        [ 0.0402, -0.0674,  0.0465,  ..., -0.0057,  0.0067,  0.0174],
        [ 0.0078,  0.0540, -0.0130,  ...,  0.0437,  0.0114, -0.0033]])

decoder.decoders.11.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0062,  0.0653,  0.0335,  ...,  0.0437, -0.1048, -0.0344])

decoder.decoders.11.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0605,  0.0001, -0.0182,  ...,  0.0074, -0.0296, -0.0605],
        [-0.0174, -0.0061, -0.0579,  ..., -0.0402,  0.0100,  0.0402],
        [-0.0058,  0.0356,  0.0338,  ...,  0.0529,  0.0383,  0.0147],
        ...,
        [ 0.0133,  0.0362, -0.0658,  ..., -0.0976,  0.0857, -0.0441],
        [ 0.0734, -0.0557,  0.0596,  ...,  0.0924,  0.0562,  0.0746],
        [-0.0263, -0.0353,  0.0280,  ...,  0.0197, -0.0181, -0.0573]])

decoder.decoders.11.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0090, -0.0177,  0.0126,  ...,  0.0342, -0.0589, -0.0145],
        [-0.0396, -0.0093,  0.0769,  ..., -0.0947, -0.0482, -0.0761],
        [-0.0245,  0.0099, -0.0342,  ..., -0.0529,  0.0226,  0.0117],
        ...,
        [ 0.0035,  0.0222, -0.0181,  ...,  0.0192,  0.0884, -0.0020],
        [ 0.0341,  0.0153,  0.0578,  ...,  0.0473, -0.0080, -0.0384],
        [ 0.0577,  0.0017, -0.0195,  ...,  0.0151, -0.0487, -0.0800]])

decoder.decoders.11.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0084, -0.0053,  0.0185,  ..., -0.0234,  0.0150,  0.0381])

decoder.decoders.11.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 1.5640e-02,  4.4184e-02,  6.6805e-02,  ..., -1.5821e-04,
          5.2726e-02,  4.3391e-02],
        [ 1.4449e-02, -1.6777e-01, -5.3503e-02,  ..., -7.3914e-02,
         -6.8124e-02, -9.1854e-02],
        [-2.0889e-03, -1.7459e-02,  8.2110e-02,  ...,  1.9572e-02,
         -1.9930e-02,  6.5852e-02],
        ...,
        [ 2.4984e-02,  1.9002e-02, -1.5845e-02,  ...,  7.5098e-02,
         -1.4642e-02, -1.7383e-02],
        [-5.2828e-02, -6.8435e-02,  2.0422e-02,  ..., -7.1377e-02,
         -6.8814e-02, -1.0636e-01],
        [-2.7617e-02,  3.1259e-02,  3.9610e-02,  ...,  1.0922e-03,
         -1.0154e-02, -4.4268e-03]])

decoder.decoders.11.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0039, -0.3941,  0.0561,  ...,  0.0148, -0.0117,  0.0246])

decoder.decoders.11.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9720, 0.6790, 0.9132,  ..., 0.9608, 0.9598, 0.9739])

decoder.decoders.11.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0584, -0.0431, -0.0218,  ...,  0.0032, -0.0043,  0.0448])

decoder.decoders.11.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-8.5254e-02, -4.2624e-02, -2.4961e-02,  ...,  4.2151e-02,
          9.2135e-02, -1.6383e-02],
        [ 1.8765e-02,  3.3324e-02,  8.6716e-03,  ..., -6.9754e-02,
          1.8506e-02,  4.2426e-02],
        [-3.9874e-03, -4.8913e-02, -5.5645e-02,  ...,  1.1314e-01,
         -2.7155e-02, -5.7441e-02],
        ...,
        [-5.0754e-02, -2.6351e-02,  4.2635e-02,  ...,  1.8693e-02,
         -2.4282e-02, -9.5954e-02],
        [-4.8167e-02,  2.8417e-02,  2.8671e-02,  ..., -5.2481e-02,
         -1.0385e-02, -2.2653e-02],
        [ 5.5340e-02, -2.1746e-02,  2.0953e-02,  ...,  4.6565e-02,
          1.6110e-02,  4.1819e-06]])

decoder.decoders.11.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0204, -0.0136, -0.0059,  ..., -0.0090, -0.0329,  0.0251])

decoder.decoders.11.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0380, -0.0073,  0.0017,  ..., -0.0036, -0.0337,  0.0650],
        [-0.0448,  0.0144,  0.0466,  ..., -0.0484,  0.0468, -0.0435],
        [ 0.0054,  0.0097,  0.0706,  ..., -0.0155,  0.0128, -0.0170],
        ...,
        [-0.0188,  0.0600,  0.0403,  ...,  0.0017, -0.0064,  0.0773],
        [ 0.0196, -0.0142, -0.0238,  ..., -0.0162,  0.0457,  0.0545],
        [ 0.0146,  0.0382,  0.0753,  ...,  0.0457,  0.0008, -0.0104]])

decoder.decoders.11.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0567,  0.0346,  0.0079,  ..., -0.1352, -0.0194, -0.0764],
        [-0.0454, -0.0590,  0.0152,  ...,  0.0586,  0.0325,  0.0820],
        [ 0.0199,  0.0209,  0.0989,  ..., -0.0965, -0.0679, -0.0042],
        ...,
        [ 0.1075, -0.0131,  0.0164,  ..., -0.0389, -0.0566,  0.0002],
        [ 0.0080,  0.0403,  0.0398,  ..., -0.0042,  0.0316, -0.0195],
        [ 0.0325,  0.0026, -0.0238,  ..., -0.0092,  0.0416, -0.0040]])

decoder.decoders.11.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0083, -0.0021, -0.0117,  ..., -0.0174,  0.0031, -0.0105])

decoder.decoders.11.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0097, -0.0253, -0.0463,  ..., -0.0246, -0.1481,  0.0006],
        [ 0.0995,  0.0627, -0.0539,  ..., -0.1706, -0.0554, -0.0517],
        [ 0.0438, -0.0343,  0.0068,  ...,  0.0520,  0.0494,  0.0869],
        ...,
        [-0.0285,  0.0249, -0.0278,  ..., -0.0367, -0.0858,  0.0549],
        [ 0.0681, -0.0618, -0.0245,  ..., -0.0374, -0.0082, -0.0353],
        [-0.0044,  0.0064,  0.0095,  ...,  0.0210,  0.0695,  0.0309]])

decoder.decoders.11.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0051, -0.4130,  0.0491,  ...,  0.0218, -0.0034, -0.0080])

decoder.decoders.11.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.2379, 0.3014, 1.1725,  ..., 1.2089, 1.2179, 1.2328])

decoder.decoders.11.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.0678, -0.0062,  0.0814,  ..., -0.0289, -0.0872, -0.0350])

decoder.decoders.11.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0292, -0.0032, -0.0006,  ..., -0.0749,  0.0128,  0.0060],
        [-0.0296,  0.0422,  0.0081,  ..., -0.0200,  0.0476, -0.0061],
        [ 0.0448,  0.0757,  0.0232,  ...,  0.0322, -0.0195,  0.0143],
        ...,
        [-0.0219,  0.0412, -0.0455,  ...,  0.0362,  0.0106,  0.0119],
        [-0.0884,  0.0426, -0.0581,  ...,  0.0162,  0.0038,  0.0452],
        [-0.0144,  0.0145,  0.0032,  ...,  0.0092, -0.0084, -0.0143]])

decoder.decoders.11.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0281, -0.0029, -0.0351,  ..., -0.0473,  0.0117, -0.0250])

decoder.decoders.11.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0501, -0.0192, -0.0810,  ...,  0.0365,  0.0796,  0.0038],
        [-0.0959,  0.0480, -0.0213,  ...,  0.0014, -0.0530, -0.0092],
        [-0.0981, -0.0232, -0.0179,  ...,  0.0306,  0.0200, -0.0195],
        ...,
        [ 0.0455,  0.0330, -0.0707,  ...,  0.0562, -0.0154,  0.0117],
        [ 0.0293,  0.0420, -0.0714,  ...,  0.0750,  0.0560, -0.0316],
        [-0.0834, -0.0298, -0.0888,  ...,  0.1056,  0.0024, -0.0749]])

decoder.decoders.11.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0415, -0.5537, -0.0133,  ...,  0.0482,  0.0521,  0.0065])

decoder.decoders.12.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.8192, 0.4499, 0.8319,  ..., 0.8599, 0.8590, 0.9122])

decoder.decoders.12.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0586, -0.2583, -0.0682,  ..., -0.0266,  0.0522, -0.0109])

decoder.decoders.12.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0459, -0.0395,  0.0232,  ...,  0.0749,  0.1017,  0.0496],
        [-0.0359, -0.0482,  0.0112,  ...,  0.0505, -0.0195,  0.0695],
        [-0.0836, -0.0271,  0.0437,  ..., -0.0071, -0.0011, -0.0091],
        ...,
        [ 0.0111, -0.0299, -0.0293,  ..., -0.0858, -0.0097,  0.0369],
        [ 0.0203, -0.0099,  0.0316,  ...,  0.0016, -0.0407, -0.0380],
        [-0.0718, -0.0513, -0.0818,  ..., -0.0178,  0.0587, -0.0174]])

decoder.decoders.12.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0790, -0.0474, -0.0378,  ..., -0.0219, -0.0262,  0.0282])

decoder.decoders.12.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0143, -0.0666, -0.0493,  ..., -0.0147,  0.0292,  0.0211],
        [-0.0950, -0.0988, -0.0376,  ..., -0.0233, -0.0284, -0.0343],
        [-0.0337, -0.0340, -0.0324,  ...,  0.0201,  0.0018, -0.0016],
        ...,
        [ 0.0043, -0.0210, -0.0581,  ..., -0.0577,  0.1213,  0.0488],
        [ 0.0443, -0.0132, -0.0003,  ..., -0.0136, -0.0946, -0.0220],
        [ 0.0150,  0.0453, -0.0624,  ...,  0.0139, -0.0157, -0.0409]])

decoder.decoders.12.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0471,  0.0181,  0.0088,  ..., -0.0161, -0.0415,  0.0540],
        [-0.0457, -0.0055, -0.0068,  ...,  0.0146, -0.0780,  0.0795],
        [ 0.0344,  0.0196, -0.0154,  ...,  0.0413,  0.0532,  0.0339],
        ...,
        [-0.0105,  0.0046, -0.0642,  ...,  0.0386, -0.0111,  0.0304],
        [-0.0295, -0.0080, -0.0285,  ...,  0.0648, -0.0248,  0.0560],
        [ 0.0392,  0.0022,  0.0635,  ..., -0.0373, -0.0214, -0.0348]])

decoder.decoders.12.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0001, -0.0062, -0.0494,  ..., -0.0090, -0.0074, -0.0346])

decoder.decoders.12.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-2.1716e-02,  2.4522e-02,  2.2068e-02,  ..., -3.4122e-02,
         -5.1325e-02, -4.0961e-02],
        [ 1.0777e-02, -1.3838e-01, -5.2985e-02,  ...,  4.3604e-02,
          3.8561e-02, -1.5761e-01],
        [ 3.8398e-02, -1.8960e-02, -5.3890e-02,  ...,  3.1567e-02,
          2.7387e-02,  5.6267e-02],
        ...,
        [ 4.0511e-02,  2.5391e-02,  4.6016e-03,  ...,  4.7890e-02,
         -4.4164e-02,  7.7466e-02],
        [-6.6465e-02,  4.9904e-03,  1.8818e-02,  ...,  3.1435e-02,
         -5.8364e-02, -8.6933e-02],
        [-2.0610e-02, -7.4389e-03,  3.3886e-02,  ...,  3.9452e-05,
         -2.6278e-02,  3.6434e-02]])

decoder.decoders.12.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0095, -0.4166,  0.0511,  ...,  0.0613, -0.0076,  0.0291])

decoder.decoders.12.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9743, 0.6746, 0.9382,  ..., 0.9913, 0.9541, 0.9341])

decoder.decoders.12.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0542, -0.0359, -0.0285,  ..., -0.0288,  0.0122,  0.0061])

decoder.decoders.12.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0113, -0.0066,  0.0116,  ..., -0.0442,  0.0814, -0.0310],
        [-0.0356,  0.0259,  0.0339,  ..., -0.0170,  0.0820,  0.0695],
        [-0.0237, -0.0038, -0.0798,  ...,  0.0226, -0.0005,  0.0623],
        ...,
        [ 0.0103, -0.0433, -0.0233,  ...,  0.0027, -0.0051, -0.0087],
        [-0.0051,  0.0039, -0.0920,  ..., -0.0412,  0.0124, -0.0389],
        [-0.0039,  0.0390, -0.0761,  ..., -0.0017,  0.0158,  0.0068]])

decoder.decoders.12.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0058, -0.0362, -0.0067,  ..., -0.0950, -0.0230, -0.0182])

decoder.decoders.12.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0564, -0.1035, -0.0026,  ..., -0.0216,  0.0224, -0.0141],
        [-0.0796,  0.0575, -0.0081,  ...,  0.0456,  0.0235,  0.0527],
        [-0.0181,  0.0926, -0.0082,  ..., -0.0725, -0.0148, -0.0103],
        ...,
        [-0.0451, -0.0114,  0.0328,  ..., -0.0252, -0.0649,  0.0028],
        [ 0.0155, -0.0127,  0.0312,  ...,  0.0495,  0.0163,  0.0265],
        [-0.0041,  0.0002,  0.0262,  ...,  0.0041,  0.0338, -0.0176]])

decoder.decoders.12.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0656,  0.0011, -0.0471,  ...,  0.0529,  0.0801,  0.0515],
        [-0.0238, -0.0237, -0.0613,  ..., -0.0355, -0.0252, -0.0346],
        [-0.0457, -0.0582, -0.0327,  ..., -0.0193, -0.0265, -0.0407],
        ...,
        [ 0.0629,  0.0281, -0.0704,  ...,  0.0186,  0.0016, -0.0827],
        [ 0.0333,  0.0337, -0.0318,  ..., -0.0575,  0.0397, -0.0472],
        [-0.0100, -0.0189, -0.0144,  ...,  0.0462, -0.0735, -0.0705]])

decoder.decoders.12.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0179,  0.0151,  0.0120,  ..., -0.0069,  0.0170, -0.0142])

decoder.decoders.12.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0589,  0.0229,  0.0051,  ...,  0.0114, -0.0004, -0.0856],
        [ 0.0783,  0.0596, -0.0143,  ...,  0.1050, -0.1103,  0.0520],
        [ 0.0654,  0.0141, -0.0053,  ...,  0.0052, -0.0977,  0.0737],
        ...,
        [-0.0945,  0.0203, -0.0236,  ..., -0.0415, -0.0005,  0.0847],
        [-0.0199, -0.1204,  0.0043,  ...,  0.0614,  0.0621,  0.0070],
        [-0.0319, -0.0218,  0.0224,  ..., -0.0329,  0.0040,  0.0502]])

decoder.decoders.12.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0292, -0.3916,  0.0276,  ...,  0.0514,  0.0271,  0.0297])

decoder.decoders.12.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.2212, 0.2980, 1.1413,  ..., 1.2274, 1.2236, 1.2498])

decoder.decoders.12.norm3.bias-torch.Size([1280])-torch.float32
tensor([-0.0140,  0.0687,  0.0867,  ...,  0.0108, -0.0925, -0.0092])

decoder.decoders.12.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0154, -0.0631, -0.0329,  ...,  0.0185,  0.0165, -0.1034],
        [-0.0548, -0.0134,  0.0100,  ...,  0.0552,  0.0061,  0.0500],
        [ 0.0608, -0.0054,  0.0702,  ...,  0.0332,  0.0433,  0.0133],
        ...,
        [-0.0026, -0.0196,  0.0431,  ...,  0.0581,  0.0065, -0.0232],
        [-0.0061, -0.0023,  0.0550,  ..., -0.0302,  0.0595,  0.0973],
        [ 0.0049,  0.0282, -0.0437,  ...,  0.0244,  0.0278, -0.0266]])

decoder.decoders.12.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0499, -0.0340, -0.0068,  ..., -0.0271, -0.0298, -0.0180])

decoder.decoders.12.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0084, -0.0734, -0.0726,  ..., -0.1098, -0.0351, -0.1023],
        [ 0.0076, -0.0175,  0.0093,  ..., -0.0704, -0.0550,  0.0607],
        [-0.0337, -0.0649, -0.0471,  ..., -0.0278, -0.0168, -0.0425],
        ...,
        [-0.0354, -0.0212, -0.0945,  ..., -0.0441,  0.0273, -0.0612],
        [ 0.0678, -0.0320,  0.0092,  ..., -0.0291, -0.0227, -0.0127],
        [-0.0086, -0.0599, -0.0135,  ..., -0.0499,  0.0417,  0.0555]])

decoder.decoders.12.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0223, -0.4948,  0.0112,  ...,  0.0283,  0.0150,  0.0220])

decoder.decoders.13.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7940, 0.4534, 0.8375,  ..., 0.8405, 0.8646, 0.8904])

decoder.decoders.13.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0378, -0.1444, -0.0717,  ..., -0.0272,  0.0522, -0.0120])

decoder.decoders.13.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0220, -0.0742, -0.1056,  ..., -0.0996, -0.0189,  0.0728],
        [ 0.0225,  0.0504,  0.1285,  ...,  0.0002, -0.0458,  0.0182],
        [-0.0189, -0.0133, -0.0069,  ..., -0.0170, -0.0359, -0.0918],
        ...,
        [ 0.0150,  0.0585, -0.0523,  ...,  0.0197, -0.0096,  0.0008],
        [-0.0365, -0.0120, -0.0113,  ..., -0.0414, -0.0785, -0.0034],
        [-0.0082,  0.0050, -0.1298,  ...,  0.0185,  0.0669,  0.0426]])

decoder.decoders.13.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([0.0150, 0.0431, 0.0539,  ..., 0.0552, 0.0485, 0.0426])

decoder.decoders.13.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0287,  0.0237, -0.0681,  ..., -0.0415,  0.0060, -0.0434],
        [ 0.0021,  0.0353,  0.0259,  ...,  0.1079,  0.0073,  0.0045],
        [ 0.0152,  0.0735, -0.0047,  ...,  0.0433,  0.0581, -0.0104],
        ...,
        [ 0.0077,  0.0444, -0.0443,  ...,  0.0628, -0.0272, -0.0972],
        [ 0.0350,  0.0870,  0.0387,  ...,  0.0139,  0.0065,  0.0706],
        [-0.0179,  0.0670,  0.0344,  ...,  0.0567, -0.0180, -0.0694]])

decoder.decoders.13.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0072, -0.0375,  0.0043,  ..., -0.0040,  0.0277, -0.0094],
        [ 0.0487, -0.0279,  0.0149,  ..., -0.0380,  0.0335, -0.0360],
        [ 0.0327, -0.0060,  0.0079,  ...,  0.0032,  0.0448,  0.0304],
        ...,
        [-0.0101,  0.0507,  0.0809,  ..., -0.0611, -0.0674,  0.0344],
        [-0.0665,  0.0576, -0.0108,  ..., -0.0554, -0.0494, -0.0423],
        [ 0.0497,  0.0258, -0.0303,  ...,  0.0315,  0.0433, -0.0028]])

decoder.decoders.13.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0060,  0.0126, -0.0073,  ..., -0.0087, -0.0083, -0.0129])

decoder.decoders.13.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0321, -0.0600,  0.0273,  ..., -0.0340,  0.0174, -0.0111],
        [-0.0090,  0.0366, -0.1045,  ..., -0.0591,  0.0241, -0.1221],
        [ 0.0174,  0.0053,  0.0824,  ..., -0.0003,  0.0277,  0.0067],
        ...,
        [-0.0903,  0.0197,  0.0342,  ...,  0.0310,  0.0374,  0.0458],
        [-0.0049, -0.0260,  0.0217,  ..., -0.1368, -0.0306, -0.0152],
        [-0.0532,  0.0613,  0.0073,  ...,  0.0431,  0.0049,  0.0318]])

decoder.decoders.13.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0138, -0.3554,  0.0173,  ...,  0.0410, -0.0190,  0.0487])

decoder.decoders.13.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9296, 0.6535, 0.9210,  ..., 0.9750, 0.9163, 0.9639])

decoder.decoders.13.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0475,  0.0097, -0.0188,  ..., -0.0573,  0.0173,  0.0127])

decoder.decoders.13.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0253,  0.0111, -0.0482,  ...,  0.0296,  0.1101, -0.0259],
        [-0.0500,  0.0383, -0.0058,  ...,  0.0621,  0.0457,  0.0100],
        [ 0.0007, -0.0127,  0.0025,  ...,  0.0543, -0.0455,  0.0016],
        ...,
        [-0.0668, -0.0170,  0.0376,  ..., -0.0349, -0.0083, -0.0093],
        [-0.0278,  0.0018,  0.0034,  ..., -0.0004,  0.0192,  0.0072],
        [ 0.0283, -0.0020,  0.0408,  ..., -0.0686,  0.0627, -0.0067]])

decoder.decoders.13.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0408,  0.0293,  0.0227,  ..., -0.0767, -0.0347, -0.0825])

decoder.decoders.13.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0564, -0.0022,  0.0589,  ...,  0.0676,  0.0031,  0.0180],
        [ 0.0639,  0.0213,  0.0163,  ..., -0.0325,  0.0031,  0.0440],
        [ 0.0546,  0.0049,  0.0162,  ..., -0.0914,  0.0274,  0.0273],
        ...,
        [ 0.0038,  0.0959, -0.0506,  ...,  0.0269, -0.0120,  0.0041],
        [-0.0355,  0.0074,  0.0040,  ...,  0.0315, -0.0091,  0.0102],
        [-0.0301, -0.0361,  0.0147,  ...,  0.0168,  0.0684, -0.0504]])

decoder.decoders.13.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0415, -0.0590, -0.0415,  ..., -0.0096,  0.0023, -0.0256],
        [-0.0996,  0.0632,  0.0009,  ..., -0.0735, -0.0603, -0.0024],
        [-0.1134,  0.0410, -0.1074,  ..., -0.0221,  0.0203, -0.0648],
        ...,
        [-0.0889,  0.0938,  0.0415,  ..., -0.0589,  0.0410, -0.0497],
        [-0.0956,  0.0028,  0.0147,  ..., -0.0279, -0.0650,  0.0021],
        [-0.0446, -0.0284,  0.0558,  ..., -0.0211, -0.0064,  0.0547]])

decoder.decoders.13.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0235, -0.0073, -0.0041,  ..., -0.0262, -0.0002,  0.0072])

decoder.decoders.13.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 4.6727e-02, -3.0686e-02, -2.5357e-02,  ..., -2.2532e-02,
         -4.1574e-02,  1.3432e-02],
        [ 3.0803e-03,  9.9914e-02, -8.8341e-03,  ..., -1.7340e-02,
          1.7674e-01, -1.1066e-01],
        [ 4.3381e-02,  5.0072e-02,  2.7697e-02,  ...,  4.9487e-02,
         -8.1594e-02,  5.2301e-02],
        ...,
        [-3.7236e-02,  6.3323e-03,  1.7477e-02,  ..., -4.3658e-02,
          1.4645e-04,  4.6289e-02],
        [ 3.5614e-02,  1.2207e-02,  9.5374e-03,  ...,  4.5749e-02,
         -6.2822e-02, -1.8401e-02],
        [-1.7232e-02, -1.1995e-02,  3.4704e-02,  ...,  2.4419e-02,
         -3.2910e-02, -3.3559e-02]])

decoder.decoders.13.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0302, -0.3296,  0.0060,  ...,  0.0607, -0.0063,  0.0468])

decoder.decoders.13.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.2329, 0.3536, 1.1804,  ..., 1.2896, 1.2114, 1.2518])

decoder.decoders.13.norm3.bias-torch.Size([1280])-torch.float32
tensor([ 0.0414,  0.0941,  0.1192,  ...,  0.1060, -0.0597,  0.0653])

decoder.decoders.13.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0320, -0.0004, -0.0925,  ...,  0.0588,  0.0453,  0.0390],
        [-0.0345, -0.0266, -0.0532,  ...,  0.0170,  0.0685,  0.0472],
        [-0.0357,  0.0132, -0.0382,  ...,  0.0253,  0.0165, -0.0609],
        ...,
        [-0.0126, -0.0119,  0.0208,  ...,  0.0446, -0.0371, -0.0134],
        [ 0.0256, -0.0060, -0.0081,  ..., -0.0017,  0.0588, -0.0212],
        [-0.0019, -0.0285,  0.0153,  ..., -0.0541, -0.0327,  0.0170]])

decoder.decoders.13.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0409, -0.0077, -0.0259,  ...,  0.0019, -0.0108, -0.0148])

decoder.decoders.13.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0258,  0.0574, -0.0517,  ...,  0.0502,  0.0031, -0.0804],
        [ 0.0086,  0.0712, -0.1557,  ..., -0.0173,  0.0008,  0.0093],
        [ 0.0220, -0.0187,  0.0195,  ..., -0.0226, -0.0268,  0.0615],
        ...,
        [-0.0710,  0.0260, -0.0211,  ..., -0.0753,  0.0132,  0.0332],
        [-0.0998,  0.0623, -0.0290,  ...,  0.0887, -0.0836,  0.0397],
        [-0.0036,  0.0097, -0.0283,  ...,  0.0178,  0.0264, -0.0703]])

decoder.decoders.13.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0274, -0.3523, -0.0429,  ...,  0.0099,  0.0236, -0.0015])

decoder.decoders.14.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7958, 0.5071, 0.7926,  ..., 0.7845, 0.8147, 0.8318])

decoder.decoders.14.norm1.bias-torch.Size([1280])-torch.float32
tensor([ 0.0148, -0.0135, -0.1233,  ..., -0.0632,  0.0625, -0.0212])

decoder.decoders.14.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0080, -0.0321,  0.0125,  ...,  0.0261, -0.0094, -0.0198],
        [-0.0460,  0.0464,  0.0202,  ..., -0.0306, -0.0477,  0.0349],
        [ 0.0060, -0.0874,  0.0257,  ..., -0.0305,  0.0880, -0.0764],
        ...,
        [ 0.0159,  0.0857, -0.0046,  ...,  0.0119,  0.0051,  0.0127],
        [ 0.1137, -0.0375, -0.0450,  ..., -0.0031,  0.0656,  0.1122],
        [ 0.0148,  0.0130, -0.0744,  ..., -0.0763,  0.0004, -0.0485]])

decoder.decoders.14.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0491,  0.0026, -0.0992,  ..., -0.0305,  0.0912,  0.0419])

decoder.decoders.14.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 4.1816e-02, -5.3504e-02,  3.5341e-02,  ...,  2.3890e-02,
          2.7750e-02,  3.4098e-02],
        [-1.7268e-02,  2.7050e-02,  7.4512e-02,  ..., -1.9618e-02,
         -4.3135e-02,  5.3476e-02],
        [-1.0186e-01, -8.1618e-02, -7.9300e-05,  ..., -3.9910e-02,
          5.7034e-02, -1.9890e-03],
        ...,
        [-2.1921e-02, -5.1230e-02, -6.0586e-02,  ..., -9.5303e-03,
         -2.3674e-02, -4.5743e-03],
        [ 6.0805e-02,  6.8101e-02, -5.7192e-02,  ...,  3.2665e-02,
          1.2302e-02,  1.0347e-01],
        [-2.0069e-02,  4.0558e-02,  7.8273e-02,  ..., -7.5195e-02,
         -1.3021e-02,  6.0600e-02]])

decoder.decoders.14.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 1.0732e-03, -3.3877e-02,  1.9500e-02,  ...,  6.3504e-02,
         -8.5015e-02,  3.6788e-02],
        [-3.7276e-05,  5.4881e-03, -6.3710e-03,  ..., -3.3587e-02,
         -8.8935e-03, -2.8272e-02],
        [-9.8859e-03,  7.1727e-03, -1.4729e-02,  ...,  1.6418e-03,
          4.4852e-02,  5.0999e-02],
        ...,
        [-9.9118e-03,  2.9852e-04, -4.1614e-02,  ...,  4.6789e-03,
         -4.2706e-02, -2.7762e-03],
        [ 2.7264e-02,  5.0514e-02, -3.6730e-02,  ...,  1.8340e-02,
          6.9484e-02,  2.5116e-02],
        [ 6.6081e-03, -1.7386e-02,  4.1993e-02,  ..., -5.5783e-02,
         -1.5101e-02,  4.0785e-03]])

decoder.decoders.14.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0274,  0.0155,  0.0063,  ..., -0.0244, -0.0309,  0.0084])

decoder.decoders.14.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0141,  0.0320, -0.1073,  ...,  0.0135, -0.0070,  0.0659],
        [-0.1270,  0.1640, -0.0085,  ..., -0.0364,  0.0501,  0.0621],
        [ 0.0125,  0.0376,  0.0511,  ...,  0.0561, -0.0186,  0.0697],
        ...,
        [ 0.0243, -0.0203,  0.0075,  ...,  0.0251,  0.0158, -0.0037],
        [-0.0878, -0.0062, -0.0530,  ...,  0.0181,  0.0206, -0.0343],
        [ 0.0139,  0.0386,  0.0008,  ..., -0.0290,  0.0069,  0.0216]])

decoder.decoders.14.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0044, -0.2116,  0.0354,  ...,  0.0170, -0.0050,  0.0182])

decoder.decoders.14.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.9505, 0.7540, 0.8813,  ..., 0.9225, 0.9486, 0.9549])

decoder.decoders.14.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0105,  0.0658, -0.0461,  ..., -0.0532,  0.0519,  0.0449])

decoder.decoders.14.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0371, -0.0024,  0.0022,  ...,  0.0661,  0.0287, -0.0218],
        [-0.0369,  0.0781,  0.0068,  ...,  0.0419, -0.0007, -0.0091],
        [-0.0289,  0.0336,  0.1029,  ..., -0.0272,  0.0185, -0.0261],
        ...,
        [ 0.0141,  0.0391, -0.0387,  ...,  0.0742,  0.0552,  0.0467],
        [ 0.0480,  0.0059,  0.0087,  ...,  0.0656,  0.0493,  0.0194],
        [-0.0246, -0.0306, -0.0125,  ..., -0.0958, -0.0112,  0.0653]])

decoder.decoders.14.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0697,  0.0684, -0.0411,  ..., -0.0691,  0.0233, -0.1157])

decoder.decoders.14.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0670, -0.0626, -0.0960,  ...,  0.0320,  0.0118,  0.0528],
        [ 0.0202, -0.0230, -0.0517,  ..., -0.0102,  0.0383, -0.0120],
        [ 0.0559, -0.0330, -0.0527,  ..., -0.0281, -0.0162, -0.0434],
        ...,
        [-0.0060,  0.1026,  0.0490,  ..., -0.0825, -0.1134,  0.0713],
        [ 0.0085, -0.1013,  0.0521,  ..., -0.0039, -0.0112,  0.0336],
        [ 0.0498, -0.0756,  0.0893,  ..., -0.0648,  0.0082, -0.0122]])

decoder.decoders.14.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0373,  0.0074,  0.0814,  ...,  0.0439,  0.1297, -0.0196],
        [-0.0712,  0.0387, -0.0467,  ..., -0.0590,  0.0420,  0.0319],
        [-0.0664, -0.0125,  0.1160,  ...,  0.0099,  0.0726, -0.0875],
        ...,
        [ 0.0095, -0.0419,  0.0740,  ..., -0.0289, -0.0662,  0.0134],
        [ 0.0103, -0.0239,  0.0372,  ..., -0.0857,  0.0015,  0.0372],
        [-0.1396, -0.0831, -0.0277,  ..., -0.1031,  0.0078, -0.0119]])

decoder.decoders.14.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([-0.0011,  0.0004, -0.0034,  ...,  0.0102, -0.0356,  0.0299])

decoder.decoders.14.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0445,  0.0163, -0.0125,  ..., -0.0819,  0.0162,  0.0264],
        [ 0.1228,  0.0697,  0.1431,  ..., -0.1843,  0.1686, -0.1357],
        [-0.1017,  0.0713, -0.0660,  ...,  0.0481,  0.0531,  0.0153],
        ...,
        [ 0.0573, -0.0407, -0.0115,  ...,  0.0303, -0.0516, -0.0256],
        [-0.0034, -0.0119,  0.0589,  ..., -0.0589,  0.0274, -0.0104],
        [ 0.0551, -0.0118,  0.0612,  ..., -0.0238, -0.0429,  0.0268]])

decoder.decoders.14.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0217, -0.1847, -0.0078,  ...,  0.0444,  0.0045,  0.0363])

decoder.decoders.14.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1856, 0.5441, 1.1120,  ..., 1.2841, 1.1526, 1.2195])

decoder.decoders.14.norm3.bias-torch.Size([1280])-torch.float32
tensor([ 0.0969, -0.0292,  0.1235,  ...,  0.1891,  0.0469,  0.0850])

decoder.decoders.14.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[ 0.0503, -0.0351,  0.0024,  ...,  0.0252,  0.0827,  0.0256],
        [ 0.0043,  0.0058,  0.0420,  ..., -0.0096,  0.0281, -0.0787],
        [-0.0187,  0.0279, -0.0858,  ...,  0.0183,  0.0071,  0.0256],
        ...,
        [-0.0263,  0.0453,  0.0526,  ..., -0.0342, -0.0106, -0.0116],
        [-0.0229,  0.0158,  0.0060,  ...,  0.0483,  0.0073, -0.0327],
        [-0.0445,  0.0168,  0.0204,  ...,  0.0450,  0.0148, -0.0245]])

decoder.decoders.14.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0199, -0.0126, -0.0188,  ..., -0.0059, -0.0238, -0.0441])

decoder.decoders.14.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[ 0.0021, -0.0694, -0.0391,  ...,  0.0235,  0.0146, -0.0273],
        [ 0.0366, -0.0597, -0.0037,  ..., -0.0328, -0.0176,  0.0544],
        [-0.0756, -0.0077, -0.0398,  ..., -0.0101, -0.0038,  0.1047],
        ...,
        [-0.0579, -0.0322,  0.0573,  ...,  0.0263,  0.0145, -0.0571],
        [-0.0455,  0.0199, -0.1028,  ..., -0.0103,  0.0280, -0.0442],
        [-0.0068, -0.0539,  0.0244,  ...,  0.1218, -0.0087,  0.0626]])

decoder.decoders.14.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([-0.0140,  0.0692, -0.0286,  ..., -0.0044, -0.0200, -0.0160])

decoder.decoders.15.norm1.weight-torch.Size([1280])-torch.float32
tensor([0.7476, 0.5983, 0.7823,  ..., 0.7307, 0.7465, 0.8261])

decoder.decoders.15.norm1.bias-torch.Size([1280])-torch.float32
tensor([-0.0127,  0.0819, -0.0829,  ..., -0.1121,  0.0587, -0.0352])

decoder.decoders.15.self_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 7.4345e-02,  2.1387e-02, -2.9828e-02,  ..., -1.0509e-02,
          7.2300e-03,  7.5217e-02],
        [ 5.4229e-02,  5.2893e-02, -3.8401e-02,  ..., -1.3823e-02,
         -7.6801e-02, -4.1402e-02],
        [-1.2320e-01,  1.3846e-02, -6.0788e-02,  ..., -9.3373e-02,
         -4.5885e-02, -6.0266e-02],
        ...,
        [ 2.7735e-02,  5.7683e-03,  5.4244e-02,  ..., -2.1130e-02,
         -4.0006e-02,  5.2704e-02],
        [-5.9400e-02, -2.4998e-02,  3.8766e-02,  ..., -1.2826e-01,
         -1.0338e-04, -1.6087e-02],
        [ 2.3352e-02, -6.6110e-02,  5.0446e-02,  ...,  1.6459e-02,
         -3.4574e-02,  4.4371e-02]])

decoder.decoders.15.self_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([ 0.0168,  0.0256, -0.0126,  ...,  0.0873, -0.0990, -0.0041])

decoder.decoders.15.self_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0350, -0.0093, -0.0453,  ...,  0.0370,  0.0432, -0.0780],
        [ 0.0053,  0.0336, -0.0051,  ..., -0.0120, -0.0452, -0.0061],
        [ 0.0513, -0.0418, -0.0420,  ..., -0.0585, -0.0422,  0.0416],
        ...,
        [ 0.0553,  0.0129,  0.0175,  ..., -0.0348, -0.0131,  0.0339],
        [-0.0712, -0.0443,  0.0491,  ..., -0.0135, -0.0993, -0.0024],
        [-0.0343, -0.0006, -0.0336,  ..., -0.0099,  0.0784,  0.0303]])

decoder.decoders.15.self_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0189, -0.0418, -0.0339,  ..., -0.0224, -0.0230,  0.0074],
        [ 0.0189, -0.0672, -0.0334,  ...,  0.0330, -0.0341,  0.0034],
        [ 0.0071,  0.0579,  0.0057,  ...,  0.0143, -0.0425, -0.0327],
        ...,
        [ 0.0005,  0.0034, -0.0424,  ..., -0.0033, -0.0138,  0.0517],
        [ 0.0521,  0.0264, -0.0502,  ...,  0.0566,  0.0483, -0.0711],
        [-0.0157,  0.0712, -0.0367,  ...,  0.0227, -0.0539,  0.0416]])

decoder.decoders.15.self_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0050,  0.0171, -0.0038,  ...,  0.0383,  0.0021,  0.0399])

decoder.decoders.15.self_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[ 0.0584,  0.0276, -0.0070,  ...,  0.0369,  0.0222, -0.0179],
        [ 0.0716,  0.1962, -0.0467,  ..., -0.1019, -0.0587, -0.1773],
        [-0.0443,  0.0882, -0.0415,  ..., -0.0088, -0.0185,  0.0182],
        ...,
        [ 0.0330,  0.0681, -0.0639,  ...,  0.0170, -0.0005,  0.0550],
        [ 0.0167, -0.0139, -0.0698,  ...,  0.0253,  0.0204, -0.0102],
        [-0.0076,  0.0109,  0.0340,  ..., -0.0124,  0.0306,  0.0255]])

decoder.decoders.15.self_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([ 0.0180, -0.1781,  0.0168,  ..., -0.0040, -0.0167,  0.0059])

decoder.decoders.15.norm2.weight-torch.Size([1280])-torch.float32
tensor([0.8973, 0.7763, 0.9242,  ..., 0.9260, 0.8796, 0.9537])

decoder.decoders.15.norm2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0529, -0.0499, -0.0096,  ..., -0.0182,  0.0819, -0.0103])

decoder.decoders.15.src_attn.linear_q.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0371,  0.0320, -0.0475,  ..., -0.0377, -0.0208, -0.0567],
        [ 0.0584, -0.0903, -0.0030,  ..., -0.0577, -0.0278, -0.0639],
        [ 0.0655, -0.0215, -0.0244,  ..., -0.0454,  0.0231, -0.0119],
        ...,
        [ 0.0822,  0.0109,  0.0377,  ..., -0.0155,  0.0164,  0.0629],
        [ 0.0293,  0.0012,  0.0903,  ..., -0.0218, -0.0019,  0.0796],
        [ 0.0377,  0.0013, -0.0127,  ..., -0.0384, -0.0275,  0.0923]])

decoder.decoders.15.src_attn.linear_q.bias-torch.Size([1280])-torch.float32
tensor([-0.0561,  0.0366, -0.0188,  ...,  0.0042,  0.0107, -0.0236])

decoder.decoders.15.src_attn.linear_k.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0096, -0.0311,  0.0336,  ..., -0.0474, -0.0470,  0.0624],
        [ 0.0235,  0.0146, -0.0153,  ..., -0.0038, -0.0212, -0.0129],
        [ 0.0223,  0.0090,  0.0086,  ..., -0.0320,  0.0115,  0.0042],
        ...,
        [-0.0627,  0.0537,  0.0514,  ..., -0.0056, -0.0670,  0.0109],
        [-0.0828, -0.0373, -0.0428,  ...,  0.0205,  0.0407, -0.0001],
        [ 0.0913, -0.0692,  0.0703,  ..., -0.0536, -0.0224, -0.0320]])

decoder.decoders.15.src_attn.linear_v.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0401,  0.0536,  0.0139,  ..., -0.0217, -0.0339, -0.0789],
        [ 0.0384,  0.0115,  0.0400,  ..., -0.0063, -0.0880, -0.0483],
        [-0.0291, -0.0269, -0.0972,  ..., -0.0668,  0.0356, -0.0239],
        ...,
        [-0.1180,  0.0267,  0.0583,  ..., -0.0206, -0.0764,  0.0624],
        [ 0.1044,  0.0933,  0.0602,  ...,  0.0331,  0.0376, -0.0342],
        [-0.0911, -0.0545,  0.0013,  ...,  0.0009, -0.0288, -0.0272]])

decoder.decoders.15.src_attn.linear_v.bias-torch.Size([1280])-torch.float32
tensor([ 0.0072,  0.0096,  0.0195,  ...,  0.0303, -0.0384,  0.0162])

decoder.decoders.15.src_attn.linear_out.weight-torch.Size([1280, 1280])-torch.float32
tensor([[-0.0785,  0.0254,  0.0228,  ...,  0.0050,  0.0658,  0.0439],
        [-0.0118, -0.0734,  0.1569,  ..., -0.0197, -0.0217, -0.1673],
        [-0.0072, -0.0081, -0.1405,  ..., -0.0268, -0.0338,  0.0981],
        ...,
        [ 0.0313,  0.0537, -0.0170,  ...,  0.0483,  0.0270,  0.0115],
        [-0.0198,  0.0935,  0.0367,  ...,  0.0371,  0.0428, -0.0888],
        [-0.0039, -0.0087, -0.0068,  ...,  0.0008, -0.0691,  0.0651]])

decoder.decoders.15.src_attn.linear_out.bias-torch.Size([1280])-torch.float32
tensor([-0.0143, -0.2207, -0.0178,  ..., -0.0104, -0.0143, -0.0023])

decoder.decoders.15.norm3.weight-torch.Size([1280])-torch.float32
tensor([1.1006, 0.9208, 1.0914,  ..., 1.1531, 1.0591, 1.1301])

decoder.decoders.15.norm3.bias-torch.Size([1280])-torch.float32
tensor([ 0.2020, -0.0334,  0.0403,  ...,  0.1970,  0.0733, -0.0249])

decoder.decoders.15.feed_forward.w_1.weight-torch.Size([5120, 1280])-torch.float32
tensor([[-0.0221,  0.0229,  0.0358,  ...,  0.0124,  0.0098,  0.0416],
        [ 0.0143,  0.0392, -0.0034,  ...,  0.0230,  0.0277, -0.0099],
        [-0.0052,  0.0439,  0.0132,  ...,  0.0175,  0.0837,  0.0035],
        ...,
        [-0.0397,  0.0503, -0.0196,  ...,  0.0164, -0.0071, -0.0690],
        [ 0.0021,  0.0065,  0.0516,  ...,  0.0002,  0.0145,  0.0479],
        [-0.0400,  0.0253, -0.0398,  ..., -0.0828,  0.0507, -0.0420]])

decoder.decoders.15.feed_forward.w_1.bias-torch.Size([5120])-torch.float32
tensor([-0.0278, -0.0195,  0.0096,  ..., -0.0183, -0.0580,  0.0099])

decoder.decoders.15.feed_forward.w_2.weight-torch.Size([1280, 5120])-torch.float32
tensor([[-0.0448,  0.0220, -0.0082,  ...,  0.0003, -0.0010, -0.0590],
        [ 0.0084, -0.0098,  0.0229,  ..., -0.0601, -0.0032,  0.1041],
        [ 0.0382, -0.0291, -0.0382,  ..., -0.0373, -0.0220,  0.0006],
        ...,
        [-0.0304,  0.0309,  0.0260,  ..., -0.0918, -0.0577, -0.0468],
        [ 0.0013, -0.0039,  0.0433,  ...,  0.0452, -0.0232, -0.0392],
        [-0.0111, -0.0049,  0.0931,  ...,  0.0480, -0.0244,  0.0137]])

decoder.decoders.15.feed_forward.w_2.bias-torch.Size([1280])-torch.float32
tensor([ 0.0328,  0.0802, -0.0315,  ..., -0.0069,  0.0216,  0.0096])

decoder.output_layer.weight-torch.Size([7832, 1280])-torch.float32
tensor([[ 0.0404,  0.3387, -0.0333,  ..., -0.0084,  0.0070, -0.0430],
        [ 0.0366, -0.0388,  0.0794,  ..., -0.0127, -0.0379,  0.0422],
        [ 0.0396,  0.3381, -0.0338,  ..., -0.0093,  0.0064, -0.0436],
        ...,
        [-0.0257,  0.1415,  0.0013,  ..., -0.0058, -0.0260,  0.0460],
        [ 0.0404,  0.3277, -0.0359,  ..., -0.0120,  0.0029, -0.0479],
        [ 0.0406,  0.3360, -0.0359,  ..., -0.0108,  0.0085, -0.0457]])

decoder.after_norm.weight-torch.Size([1280])-torch.float32
tensor([1.9747, 1.4543, 2.1772,  ..., 1.9527, 2.1169, 1.9353])

decoder.after_norm.bias-torch.Size([1280])-torch.float32
tensor([-0.0562, -0.4840,  0.0557,  ...,  0.0006, -0.0026,  0.1444])

